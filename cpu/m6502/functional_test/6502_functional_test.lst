ca65 V2.18 - N/A
Main file   : 6502_functional_test.a65
Current file: 6502_functional_test.a65

000000r 1               ;
000000r 1               ; 6 5 0 2   F U N C T I O N A L   T E S T
000000r 1               ;
000000r 1               ; Copyright (C) 2012-2015  Klaus Dormann
000000r 1               ;
000000r 1               ; This program is free software: you can redistribute it and/or modify
000000r 1               ; it under the terms of the GNU General Public License as published by
000000r 1               ; the Free Software Foundation, either version 3 of the License, or
000000r 1               ; (at your option) any later version.
000000r 1               ;
000000r 1               ; This program is distributed in the hope that it will be useful,
000000r 1               ; but WITHOUT ANY WARRANTY; without even the implied warranty of
000000r 1               ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
000000r 1               ; GNU General Public License for more details.
000000r 1               ;
000000r 1               ; You should have received a copy of the GNU General Public License
000000r 1               ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
000000r 1               
000000r 1               
000000r 1               ; This program is designed to test all opcodes of a 6502 emulator using all
000000r 1               ; addressing modes with focus on propper setting of the processor status
000000r 1               ; register bits.
000000r 1               ;
000000r 1               ; version 01-aug-2019
000000r 1               ; contact info at http://2m5.de or email K@2m5.de
000000r 1               ;
000000r 1               ; assembled with CA65, linked with LD65 (cc65.github.io):
000000r 1               ;  ca65 -l 6502_functional_test.lst 6502_functional_test.ca65
000000r 1               ;  ld65 6502_functional_test.o -o 6502_functional_test.bin \
000000r 1               ;   -m 6502_functional_test.map -C example.cfg
000000r 1               ; example linker config (example.cfg):
000000r 1               ;  MEMORY {
000000r 1               ;  RAM: start = $0000, size=$8000, type = rw, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  ROM: start = $8000, size=$7FFA, type = ro, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  ROM_VECTORS: start = $FFFA, size=6, type = ro, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  }
000000r 1               ;  SEGMENTS {
000000r 1               ;  ZEROPAGE: load=RAM, type=rw;
000000r 1               ;  DATA: load=RAM, type=rw, offset=$0200;
000000r 1               ;  CODE: load=RAM, type=rw, offset=$0400;
000000r 1               ;  VECTORS: load=ROM_VECTORS, type=ro;
000000r 1               ;  }
000000r 1               ;
000000r 1               ; No IO - should be run from a monitor with access to registers.
000000r 1               ; To run load intel hex image with a load command, than alter PC to 400 hex
000000r 1               ; (code_segment) and enter a go command.
000000r 1               ; Loop on program counter determines error or successful completion of test.
000000r 1               ; Check listing for relevant traps (jump/branch *).
000000r 1               ; Please note that in early tests some instructions will have to be used before
000000r 1               ; they are actually tested!
000000r 1               ;
000000r 1               ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
000000r 1               ; Tests documented behavior of the original NMOS 6502 only! No unofficial
000000r 1               ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
000000r 1               ; not be tested. Decimal ops will only be tested with valid BCD operands and
000000r 1               ; N V Z flags will be ignored.
000000r 1               ;
000000r 1               ; Debugging hints:
000000r 1               ;     Most of the code is written sequentially. if you hit a trap, check the
000000r 1               ;   immediately preceeding code for the instruction to be tested. Results are
000000r 1               ;   tested first, flags are checked second by pushing them onto the stack and
000000r 1               ;   pulling them to the accumulator after the result was checked. The "real"
000000r 1               ;   flags are no longer valid for the tested instruction at this time!
000000r 1               ;     If the tested instruction was indexed, the relevant index (X or Y) must
000000r 1               ;   also be checked. Opposed to the flags, X and Y registers are still valid.
000000r 1               ;
000000r 1               ; versions:
000000r 1               ;   28-jul-2012  1st version distributed for testing
000000r 1               ;   29-jul-2012  fixed references to location 0, now #0
000000r 1               ;                added license - GPLv3
000000r 1               ;   30-jul-2012  added configuration options
000000r 1               ;   01-aug-2012  added trap macro to allow user to change error handling
000000r 1               ;   01-dec-2012  fixed trap in branch field must be a branch
000000r 1               ;   02-mar-2013  fixed PLA flags not tested
000000r 1               ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
000000r 1               ;                added test sequence check to detect if tests jump their fence
000000r 1               ;   23-jul-2013  added RAM integrity check option
000000r 1               ;   16-aug-2013  added error report to standard output option
000000r 1               ;   13-dec-2014  added binary/decimal opcode table switch test
000000r 1               ;   14-dec-2014  improved relative address test
000000r 1               ;   23-aug-2015  added option to disable self modifying tests
000000r 1               ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
000000r 1               ;                added small branch offset pretest
000000r 1               ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
000000r 1               ;   04-dec-2017  fixed BRK only tested with interrupts enabled
000000r 1               ;                added option to skip the remainder of a failing test
000000r 1               ;                in report.i65
000000r 1               
000000r 1               
000000r 1               ; C O N F I G U R A T I O N
000000r 1               
000000r 1               ;ROM_vectors writable (0=no, 1=yes)
000000r 1               ;if ROM vectors can not be used interrupts will not be trapped
000000r 1               ;as a consequence BRK can not be tested but will be emulated to test RTI
000000r 1               ROM_vectors = 1
000000r 1               
000000r 1               ;load_data_direct (0=move from code segment, 1=load directly)
000000r 1               ;loading directly is preferred but may not be supported by your platform
000000r 1               ;0 produces only consecutive object code, 1 is not suitable for a binary image
000000r 1               load_data_direct = 1
000000r 1               
000000r 1               ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
000000r 1               ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
000000r 1               ;tested if you allow changing the interrupt status (I_flag = 3)
000000r 1               I_flag = 3
000000r 1               
000000r 1               ;configure memory - try to stay away from memory used by the system
000000r 1               ;zero_page memory start address, $50 (80) consecutive Bytes required
000000r 1               ;                                add 2 if I_flag = 2
000000r 1               zero_page = $a
000000r 1               
000000r 1               ;data_segment memory start address, $6A (106) consecutive Bytes required
000000r 1               ; check that this matches the linker configuration file
000000r 1               data_segment = $200
000000r 1                   .if (data_segment & $ff) <> 0
000000r 1                       .error "low byte of data_segment MUST be $00 !!"
000000r 1                   .endif
000000r 1               
000000r 1               ;code_segment memory start address, 13kB of consecutive space required
000000r 1               ;                                   add 2.5 kB if I_flag = 2
000000r 1               ; check that this matches the linker configuration file
000000r 1               code_segment = $400
000000r 1               
000000r 1               ;self modifying code may be disabled to allow running in ROM
000000r 1               ;0=part of the code is self modifying and must reside in RAM
000000r 1               ;1=tests disabled: branch range
000000r 1               disable_selfmod = 0
000000r 1               
000000r 1               ;report errors through I/O channel (0=use standard self trap loops, 1=include
000000r 1               ;report.i65 as I/O channel, add 3.5 kB)
000000r 1               report = 1
000000r 1               
000000r 1               ;RAM integrity test option. Checks for undesired RAM writes.
000000r 1               ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
000000r 1               ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
000000r 1               ram_top = -1
000000r 1               
000000r 1               ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
000000r 1               ;2=disable including decimal flag in processor status
000000r 1               disable_decimal = 2
000000r 1               
000000r 1               ;macros for error & success traps to allow user modification
000000r 1               ;example:
000000r 1               ;        .macro  trap
000000r 1               ;        jsr my_error_handler
000000r 1               ;        .endmacro
000000r 1               ;        .macro  trap_eq
000000r 1               ;        bne :+
000000r 1               ;        trap           ;failed equal (zero)
000000r 1               ;:
000000r 1               ;        .endmacro
000000r 1               ;
000000r 1               ; my_error_handler should pop the calling address from the stack and report it.
000000r 1               ; putting larger portions of code (more than 3 bytes) inside the trap macro
000000r 1               ; may lead to branch range problems for some tests.
000000r 1                   .if report = 0
000000r 1                       .macro  trap
000000r 1                       jmp *           ;failed anyway
000000r 1                       .endmacro
000000r 1                       .macro  trap_eq
000000r 1                       beq *           ;failed equal (zero)
000000r 1                       .endmacro
000000r 1                       .macro  trap_ne
000000r 1                       bne *           ;failed not equal (non zero)
000000r 1                       .endmacro
000000r 1                       .macro  trap_cs
000000r 1                       bcs *           ;failed carry set
000000r 1                       .endmacro
000000r 1                       .macro  trap_cc
000000r 1                       bcc *           ;failed carry clear
000000r 1                       .endmacro
000000r 1                       .macro  trap_mi
000000r 1                       bmi *           ;failed minus (bit 7 set)
000000r 1                       .endmacro
000000r 1                       .macro  trap_pl
000000r 1                       bpl *           ;failed plus (bit 7 clear)
000000r 1                       .endmacro
000000r 1                       .macro  trap_vs
000000r 1                       bvs *           ;failed overflow set
000000r 1                       .endmacro
000000r 1                       .macro  trap_vc
000000r 1                       bvc *           ;failed overflow clear
000000r 1                       .endmacro
000000r 1               ; please observe that during the test the stack gets invalidated
000000r 1               ; therefore a RTS inside the success macro is not possible
000000r 1                       .macro  success
000000r 1                       jmp *           ;test passed, no errors
000000r 1                       .endmacro
000000r 1                   .endif
000000r 1                   .if report = 1
000000r 1                       .macro  trap
000000r 1                       jsr $ffff
000000r 1                       .endmacro
000000r 1                       .macro  trap_eq
000000r 1                       bne :+
000000r 1                       trap           ;failed equal (zero)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_ne
000000r 1                       beq :+
000000r 1                       trap            ;failed not equal (non zero)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_cs
000000r 1                       bcc :+
000000r 1                       trap            ;failed carry set
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_cc
000000r 1                       bcs :+
000000r 1                       trap            ;failed carry clear
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_mi
000000r 1                       bpl :+
000000r 1                       trap            ;failed minus (bit 7 set)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_pl
000000r 1                       bmi :+
000000r 1                       trap            ;failed plus (bit 7 clear)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_vs
000000r 1                       bvc :+
000000r 1                       trap            ;failed overflow set
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_vc
000000r 1                       bvs :+
000000r 1                       trap            ;failed overflow clear
000000r 1               :
000000r 1                       .endmacro
000000r 1               ; please observe that during the test the stack gets invalidated
000000r 1               ; therefore a RTS inside the success macro is not possible
000000r 1                       .macro  success
000000r 1                       jsr $fffe
000000r 1                       .endmacro
000000r 1                   .endif
000000r 1               
000000r 1                   .define equ =
000000r 1               
000000r 1               carry   equ %00000001   ;flag bits in status
000000r 1               zero    equ %00000010
000000r 1               intdis  equ %00000100
000000r 1               decmode equ %00001000
000000r 1               break   equ %00010000
000000r 1               reserv  equ %00100000
000000r 1               overfl  equ %01000000
000000r 1               minus   equ %10000000
000000r 1               
000000r 1               fc      equ carry
000000r 1               fz      equ zero
000000r 1               fzc     equ carry+zero
000000r 1               fv      equ overfl
000000r 1               fvz     equ overfl+zero
000000r 1               fn      equ minus
000000r 1               fnc     equ minus+carry
000000r 1               fnz     equ minus+zero
000000r 1               fnzc    equ minus+zero+carry
000000r 1               fnv     equ minus+overfl
000000r 1               
000000r 1               fao     equ break+reserv    ;bits always on after PHP, BRK
000000r 1               fai     equ fao+intdis      ;+ forced interrupt disable
000000r 1               faod    equ fao+decmode     ;+ ignore decimal
000000r 1               faid    equ fai+decmode     ;+ ignore decimal
000000r 1               m8      equ $ff             ;8 bit mask
000000r 1               m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
000000r 1               
000000r 1               ;macros to allow masking of status bits.
000000r 1               ;masking test of decimal bit
000000r 1               ;masking of interrupt enable/disable on load and compare
000000r 1               ;masking of always on bits after PHP or BRK (unused & break) on compare
000000r 1                   .if disable_decimal < 2
000000r 1                       .if I_flag = 0
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1&m8i          ;force enable interrupts (mask I)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fao)&m8i   ;I_flag is always enabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #(p1&m8i|fao)   ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 1
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1|intdis      ;force disable interrupts
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fai)&m8    ;I_flag is always disabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #(p1|fai)       ;invert expected flags + always on bits + I
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 2
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1
000000r 1                           ora flag_I_on       ;restore I-flag
000000r 1                           and flag_I_off
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           cmp #(p1|fao)&m8i   ;expected flags + always on bits, mask I
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           eor #(p1&m8i|fao)   ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 3
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1             ;allow test to change I-flag (no mask)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fao)&m8    ;expected flags + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #p1|fao         ;invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                   .else
000000r 1                       .if I_flag = 0
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1&m8i         ;force enable interrupts (mask I)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8i  ;I_flag is always enabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1&m8i|faod)  ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 1
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1|intdis      ;force disable interrupts
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faid)&m8   ;I_flag is always disabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1|faid)      ;invert expected flags + always on bits + I
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 2
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1
000000r 1                           ora flag_I_on       ;restore I-flag
000000r 1                           and flag_I_off
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8i  ;expected flags + always on bits, mask I
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1&m8i|faod)  ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 3
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1             ;allow test to change I-flag (no mask)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8   ;expected flags + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #p1|faod        ;invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                   .endif
000000r 1               
000000r 1               ;macros to set (register|memory|zeropage) & status
000000r 1                           .macro      set_stat    p1          ;setting flags in the processor status register
000000r 1                           load_flag p1
000000r 1                           pha         ;use stack to load status
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_a       p1,p2       ;precharging accu & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda #p1     ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_x       p1,p2       ;precharging index & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           ldx #p1     ;precharge index x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_y       p1,p2       ;precharging index & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           ldy #p1     ;precharge index y
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_ax      p1,p2       ;precharging indexed accu & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_ay      p1,p2       ;precharging indexed accu & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,y    ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_z       p1,p2       ;precharging indexed zp & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to zeropage
000000r 1                           sta zpt
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_zx      p1,p2       ;precharging zp,x & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to indexed zeropage
000000r 1                           sta zpt,x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_abs     p1,p2       ;precharging indexed memory & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to memory
000000r 1                           sta abst
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_absx    p1,p2       ;precharging abs,x & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to indexed memory
000000r 1                           sta abst,x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1               ;macros to test (register|memory|zeropage) & status & (mask)
000000r 1                           .macro      tst_stat    p1          ;testing flags in the processor status register
000000r 1                           php         ;save status
000000r 1                           pla         ;use stack to retrieve status
000000r 1                           pha
000000r 1                           cmp_flag p1
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_a       p1,p2        ;testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_x       p1,p2       ;testing result in x index & flags
000000r 1                           php         ;save flags
000000r 1                           cpx #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_y       p1,p2       ;testing result in y index & flags
000000r 1                           php         ;save flags
000000r 1                           cpy #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_ax      p1,p2,p3    ;indexed testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne     ;
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_ay      p1,p2,p3    ;indexed testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp p1,y    ;test result
000000r 1                           trap_ne     ;
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,y    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_z       p1,p2,p3    ;indexed testing result in zp & flags
000000r 1                           php         ;save flags
000000r 1                           lda zpt
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_zx      p1,p2,p3    ;testing result in zp,x & flags
000000r 1                           php         ;save flags
000000r 1                           lda zpt,x
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_abs     p1,p2,p3    ;indexed testing result in memory & flags
000000r 1                           php         ;save flags
000000r 1                           lda abst
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_absx    p1,p2,p3    ;testing result in abs,x & flags
000000r 1                           php         ;save flags
000000r 1                           lda abst,x
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1               ; RAM integrity test
000000r 1               ;   verifies that none of the previous tests has altered RAM outside of the
000000r 1               ;   designated write areas.
000000r 1               ;   uses zpt word as indirect pointer, zpt+2 word as checksum
000000r 1                       .if ram_top > -1
000000r 1               check_ram   macro
000000r 1                           cld
000000r 1                           lda #0
000000r 1                           sta zpt         ;set low byte of indirect pointer
000000r 1                           sta zpt+3       ;checksum high byte
000000r 1                         .if disable_selfmod = 0
000000r 1                           sta range_adr   ;reset self modifying code
000000r 1                         .endif
000000r 1                           clc
000000r 1                           ldx #zp_bss-zero_page ;zeropage - write test area
000000r 1               ccs3:       adc zero_page,x
000000r 1                           bcc ccs2
000000r 1                           inc zpt+3       ;carry to high byte
000000r 1                           clc
000000r 1               ccs2:       inx
000000r 1                           bne ccs3
000000r 1                           ldx #hi(abs1)   ;set high byte of indirect pointer
000000r 1                           stx zpt+1
000000r 1                           ldy #lo(abs1)   ;data after write & execute test area
000000r 1               ccs5:       adc (zpt),y
000000r 1                           bcc ccs4
000000r 1                           inc zpt+3       ;carry to high byte
000000r 1                           clc
000000r 1               ccs4:       iny
000000r 1                           bne ccs5
000000r 1                           inx             ;advance RAM high address
000000r 1                           stx zpt+1
000000r 1                           cpx #ram_top
000000r 1                           bne ccs5
000000r 1                           sta zpt+2       ;checksum low is
000000r 1                           cmp ram_chksm   ;checksum low expected
000000r 1                           trap_ne         ;checksum mismatch
000000r 1                           lda zpt+3       ;checksum high is
000000r 1                           cmp ram_chksm+1 ;checksum high expected
000000r 1                           trap_ne         ;checksum mismatch
000000r 1                           .endmacro
000000r 1                       .else
000000r 1                           .macro  check_ram
000000r 1                           ;RAM check disabled - RAM size not set
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1               
000000r 1                           .macro  next_test   ;make sure, tests don't jump the fence
000000r 1                           lda test_case   ;previous test
000000r 1                           cmp #test_num
000000r 1                           trap_ne         ;test is out of sequence
000000r 1               test_num .set test_num + 1
000000r 1                           lda #test_num   ;*** next tests' number
000000r 1                           sta test_case
000000r 1                           ;check_ram       ;uncomment to find altered RAM after each test
000000r 1                           .endmacro
000000r 1               
000000r 1                       .ZEROPAGE
000000r 1  00 00 00 00  		.res zero_page, 0
000004r 1  00 00 00 00  
000008r 1  00 00        
00000Ar 1                       .org zero_page
00000A  1               
00000A  1               ;break test interrupt save
00000A  1  00           irq_a:  .res    1,0             ;a register
00000B  1  00           irq_x:  .res    1,0             ;x register
00000C  1                   .if I_flag = 2
00000C  1               ;masking for I bit in status
00000C  1               flag_I_on:  .res    1,0         ;or mask to load flags
00000C  1               flag_I_off: .res    1,0         ;and mask to load flags
00000C  1                   .endif
00000C  1               zpt:                        ;5 bytes store/modify test area
00000C  1               ;add/subtract operand generation and result/flag prediction
00000C  1  00           adfc:   .res    1,0             ;carry flag before op
00000D  1  00           ad1:    .res    1,0             ;operand 1 - accumulator
00000E  1  00           ad2:    .res    1,0             ;operand 2 - memory / immediate
00000F  1  00           adrl:   .res    1,0             ;expected result bits 0-7
000010  1  00           adrh:   .res    1,0             ;expected result bit 8 (carry)
000011  1  00           adrf:   .res    1,0             ;expected flags NV0000ZC (only binary mode)
000012  1  00           sb2:    .res    1,0             ;operand 2 complemented for subtract
000013  1               zp_bss:
000013  1  C3 82 41 00  zp1:    .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000017  1  7F           zp7f:   .byte   $7f             ;test pattern for compare
000018  1               ;logical zeropage operands
000018  1  00 1F 71 80  zpOR:   .byte   0,$1f,$71,$80   ;test pattern for OR
00001C  1  0F FF 7F 80  zpAN:   .byte   $0f,$ff,$7f,$80 ;test pattern for AND
000020  1  FF 0F 8F 8F  zpEO:   .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
000024  1               ;indirect addressing pointers
000024  1  17 02        ind1:   .word   abs1            ;indirect pointer to pattern in absolute memory
000026  1  18 02                .word   abs1+1
000028  1  19 02                .word   abs1+2
00002A  1  1A 02                .word   abs1+3
00002C  1  1B 02                .word   abs7f
00002E  1  1F 01        inw1:   .word   abs1-$f8        ;indirect pointer for wrap-test pattern
000030  1  03 02        indt:   .word   abst            ;indirect pointer to store area in absolute memory
000032  1  04 02                .word   abst+1
000034  1  05 02                .word   abst+2
000036  1  06 02                .word   abst+3
000038  1  0B 01        inwt:   .word   abst-$f8        ;indirect pointer for wrap-test store
00003A  1  4E 02        indAN:  .word   absAN           ;indirect pointer to AND pattern in absolute memory
00003C  1  4F 02                .word   absAN+1
00003E  1  50 02                .word   absAN+2
000040  1  51 02                .word   absAN+3
000042  1  52 02        indEO:  .word   absEO           ;indirect pointer to EOR pattern in absolute memory
000044  1  53 02                .word   absEO+1
000046  1  54 02                .word   absEO+2
000048  1  55 02                .word   absEO+3
00004A  1  4A 02        indOR:  .word   absOR           ;indirect pointer to OR pattern in absolute memory
00004C  1  4B 02                .word   absOR+1
00004E  1  4C 02                .word   absOR+2
000050  1  4D 02                .word   absOR+3
000052  1               ;add/subtract indirect pointers
000052  1  03 02        adi2:   .word   ada2            ;indirect pointer to operand 2 in absolute memory
000054  1  04 02        sbi2:   .word   sba2            ;indirect pointer to complemented operand 2 (SBC)
000056  1  04 01        adiy2:  .word   ada2-$ff        ;with offset for indirect indexed
000058  1  05 01        sbiy2:  .word   sba2-$ff
00005A  1               zp_bss_end:
00005A  1               
00005A  1                       .DATA
00005A  1                       .org data_segment
000200  1               
000200  1  00           test_case:  .res    1,0         ;current test number
000201  1  00 00        ram_chksm:  .res    2,0         ;checksum for RAM integrity test
000203  1               ;add/subtract operand copy - abs tests write area
000203  1               abst:                       ;5 bytes store/modify test area
000203  1  00           ada2:   .res    1,0             ;operand 2
000204  1  00           sba2:   .res    1,0             ;operand 2 complemented for subtract
000205  1  00 00 00             .res    3,0             ;fill remaining bytes
000208  1               data_bss:
000208  1                   .if load_data_direct = 1
000208  1  29 00        ex_andi:and #0              ;execute immediate opcodes
00020A  1  60                   rts
00020B  1  49 00        ex_eori:eor #0              ;execute immediate opcodes
00020D  1  60                   rts
00020E  1  09 00        ex_orai:ora #0              ;execute immediate opcodes
000210  1  60                   rts
000211  1  69 00        ex_adci:adc #0              ;execute immediate opcodes
000213  1  60                   rts
000214  1  E9 00        ex_sbci:sbc #0              ;execute immediate opcodes
000216  1  60                   rts
000217  1                   .else
000217  1               ex_andi:.res    3
000217  1               ex_eori:.res    3
000217  1               ex_orai:.res    3
000217  1               ex_adci:.res    3
000217  1               ex_sbci:.res    3
000217  1                   .endif
000217  1  C3 82 41 00  abs1:   .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
00021B  1  7F           abs7f:  .byte   $7f             ;test pattern for compare
00021C  1               ;loads
00021C  1  80 80 00 02  fLDx:   .byte   fn,fn,0,fz      ;expected flags for load
000220  1               ;shifts
000220  1               rASL:                       ;expected result ASL & ROL -carry
000220  1  86 04 82 00  rROL:   .byte   $86,$04,$82,0   ; "
000224  1  87 05 83 01  rROLc:  .byte   $87,$05,$83,1   ;expected result ROL +carry
000228  1               rLSR:                       ;expected result LSR & ROR -carry
000228  1  61 41 20 00  rROR:   .byte   $61,$41,$20,0   ; "
00022C  1  E1 C1 A0 80  rRORc:  .byte   $e1,$c1,$a0,$80 ;expected result ROR +carry
000230  1               fASL:                       ;expected flags for shifts
000230  1  81 01 80 02  fROL:   .byte   fnc,fc,fn,fz    ;no carry in
000234  1  81 01 80 00  fROLc:  .byte   fnc,fc,fn,0     ;carry in
000238  1               fLSR:
000238  1  01 00 01 02  fROR:   .byte   fc,0,fc,fz      ;no carry in
00023C  1  81 80 81 80  fRORc:  .byte   fnc,fn,fnc,fn   ;carry in
000240  1               ;increments (decrements)
000240  1  7F 80 FF 00  rINC:   .byte   $7f,$80,$ff,0,1 ;expected result for INC/DEC
000244  1  01           
000245  1  00 80 80 02  fINC:   .byte   0,fn,fn,fz,0    ;expected flags for INC/DEC
000249  1  00           
00024A  1               ;logical memory operand
00024A  1  00 1F 71 80  absOR:  .byte   0,$1f,$71,$80   ;test pattern for OR
00024E  1  0F FF 7F 80  absAN:  .byte   $0f,$ff,$7f,$80 ;test pattern for AND
000252  1  FF 0F 8F 8F  absEO:  .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
000256  1               ;logical accu operand
000256  1  00 F1 1F 00  absORa: .byte   0,$f1,$1f,0     ;test pattern for OR
00025A  1  F0 FF FF FF  absANa: .byte   $f0,$ff,$ff,$ff ;test pattern for AND
00025E  1  FF F0 F0 0F  absEOa: .byte   $ff,$f0,$f0,$0f ;test pattern for EOR
000262  1               ;logical results
000262  1  00 FF 7F 80  absrlo: .byte   0,$ff,$7f,$80
000266  1  02 80 00 80  absflo: .byte   fz,fn,0,fn
00026A  1               data_bss_end:
00026A  1               
00026A  1               
00026A  1                       .CODE
00026A  1                       .org code_segment
000400  1                       .P02            ; disable 65SC02, 65C02 and 65816 instructions
000400  1  D8           start:  cld
000401  1  A2 FF                ldx #$ff
000403  1  9A                   txs
000404  1  A9 00                lda #0          ;*** test 0 = initialize
000406  1  8D 00 02             sta test_case
000409  1               test_num .set 0
000409  1               
000409  1               ;stop interrupts before initializing BSS
000409  1                   .if I_flag = 1
000409  1                       sei
000409  1                   .endif
000409  1               
000409  1               ;initialize I/O for report channel
000409  1               ;     .if report = 1
000409  1               ;         jsr report_init
000409  1               ;     .endif
000409  1               
000409  1               ;pretest small branch offset
000409  1  A2 05                ldx #5
00040B  1  4C 33 04             jmp psb_test
00040E  1               psb_bwok:
00040E  1  A0 05                ldy #5
000410  1  D0 08                bne psb_forw
000412  1  20 FF FF             trap        ;branch should be taken
000415  1  88                   dey         ;forward landing zone
000416  1  88                   dey
000417  1  88                   dey
000418  1  88                   dey
000419  1  88                   dey
00041A  1               psb_forw:
00041A  1  88                   dey
00041B  1  88                   dey
00041C  1  88                   dey
00041D  1  88                   dey
00041E  1  88                   dey
00041F  1  F0 17                beq psb_fwok
000421  1  20 FF FF             trap        ;forward offset
000424  1               
000424  1  CA                   dex         ;backward landing zone
000425  1  CA                   dex
000426  1  CA                   dex
000427  1  CA                   dex
000428  1  CA                   dex
000429  1               psb_back:
000429  1  CA                   dex
00042A  1  CA                   dex
00042B  1  CA                   dex
00042C  1  CA                   dex
00042D  1  CA                   dex
00042E  1  F0 DE                beq psb_bwok
000430  1  20 FF FF             trap        ;backward offset
000433  1               psb_test:
000433  1  D0 F4                bne psb_back
000435  1  20 FF FF             trap        ;branch should be taken
000438  1               psb_fwok:
000438  1               
000438  1               ;initialize BSS segment
000438  1                   .if load_data_direct <> 1
000438  1                       ldx #zp_end-zp_init-1
000438  1               ld_zp:  lda zp_init,x
000438  1                       sta zp_bss,x
000438  1                       dex
000438  1                       bpl ld_zp
000438  1                       ldx #data_end-data_init-1
000438  1               ld_data:lda data_init,x
000438  1                       sta data_bss,x
000438  1                       dex
000438  1                       bpl ld_data
000438  1                     .if ROM_vectors = 1
000438  1                       ldx #5
000438  1               ld_vect:lda vec_init,x
000438  1                       sta vec_bss,x
000438  1                       dex
000438  1                       bpl ld_vect
000438  1                     .endif
000438  1                   .endif
000438  1               
000438  1               ;retain status of interrupt flag
000438  1                   .if I_flag = 2
000438  1                       php
000438  1                       pla
000438  1                       and #4          ;isolate flag
000438  1                       sta flag_I_on   ;or mask
000438  1                       eor #lo(~4)     ;reverse
000438  1                       sta flag_I_off  ;and mask
000438  1                   .endif
000438  1               
000438  1               ;generate checksum for RAM integrity test
000438  1                   .if ram_top > -1
000438  1                       lda #0
000438  1                       sta zpt         ;set low byte of indirect pointer
000438  1                       sta ram_chksm+1 ;checksum high byte
000438  1                     .if disable_selfmod = 0
000438  1                       sta range_adr   ;reset self modifying code
000438  1                     .endif
000438  1                       clc
000438  1                       ldx #zp_bss-zero_page ;zeropage - write test area
000438  1               gcs3:   adc zero_page,x
000438  1                       bcc gcs2
000438  1                       inc ram_chksm+1 ;carry to high byte
000438  1                       clc
000438  1               gcs2:   inx
000438  1                       bne gcs3
000438  1                       ldx #hi(abs1)   ;set high byte of indirect pointer
000438  1                       stx zpt+1
000438  1                       ldy #lo(abs1)   ;data after write & execute test area
000438  1               gcs5:   adc (zpt),y
000438  1                       bcc gcs4
000438  1                       inc ram_chksm+1 ;carry to high byte
000438  1                       clc
000438  1               gcs4:   iny
000438  1                       bne gcs5
000438  1                       inx             ;advance RAM high address
000438  1                       stx zpt+1
000438  1                       cpx #ram_top
000438  1                       bne gcs5
000438  1                       sta ram_chksm   ;checksum complete
000438  1                   .endif
000438  1  AD 00 02 C9          next_test
00043C  1  00 F0 03 20  
000440  1  FF FF A9 01  
000447  1               
000447  1                   .if disable_selfmod = 0
000447  1               ;testing relative addressing with BEQ
000447  1  A0 FE                ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
000449  1               range_loop:
000449  1  88                   dey             ;next relative address
00044A  1  98                   tya
00044B  1  AA                   tax             ;precharge count to end of loop
00044C  1  10 08                bpl range_fw    ;calculate relative address
00044E  1  18                   clc             ;avoid branch self or to relative address of branch
00044F  1  69 02                adc #2
000451  1  EA                   nop             ;offset landing zone - tolerate +/-5 offset to branch
000452  1  EA                   nop
000453  1  EA                   nop
000454  1  EA                   nop
000455  1  EA                   nop
000456  1               range_fw:
000456  1  EA                   nop
000457  1  EA                   nop
000458  1  EA                   nop
000459  1  EA                   nop
00045A  1  EA                   nop
00045B  1  49 7F                eor #$7f        ;complement except sign
00045D  1  8D E9 04             sta range_adr   ;load into test target
000460  1  A9 00                lda #0          ;should set zero flag in status register
000462  1  4C E8 04             jmp range_op
000465  1               
000465  1  CA                   dex             ; offset landing zone - backward branch too far
000466  1  CA                   dex
000467  1  CA                   dex
000468  1  CA                   dex
000469  1  CA                   dex
00046A  1                       ;relative address target field with branch under test in the middle
00046A  1  CA                   dex             ;-128 - max backward
00046B  1  CA                   dex
00046C  1  CA                   dex
00046D  1  CA                   dex
00046E  1  CA                   dex
00046F  1  CA                   dex
000470  1  CA                   dex
000471  1  CA                   dex
000472  1  CA                   dex             ;-120
000473  1  CA                   dex
000474  1  CA                   dex
000475  1  CA                   dex
000476  1  CA                   dex
000477  1  CA                   dex
000478  1  CA                   dex
000479  1  CA                   dex
00047A  1  CA                   dex
00047B  1  CA                   dex
00047C  1  CA                   dex             ;-110
00047D  1  CA                   dex
00047E  1  CA                   dex
00047F  1  CA                   dex
000480  1  CA                   dex
000481  1  CA                   dex
000482  1  CA                   dex
000483  1  CA                   dex
000484  1  CA                   dex
000485  1  CA                   dex
000486  1  CA                   dex             ;-100
000487  1  CA                   dex
000488  1  CA                   dex
000489  1  CA                   dex
00048A  1  CA                   dex
00048B  1  CA                   dex
00048C  1  CA                   dex
00048D  1  CA                   dex
00048E  1  CA                   dex
00048F  1  CA                   dex
000490  1  CA                   dex             ;-90
000491  1  CA                   dex
000492  1  CA                   dex
000493  1  CA                   dex
000494  1  CA                   dex
000495  1  CA                   dex
000496  1  CA                   dex
000497  1  CA                   dex
000498  1  CA                   dex
000499  1  CA                   dex
00049A  1  CA                   dex             ;-80
00049B  1  CA                   dex
00049C  1  CA                   dex
00049D  1  CA                   dex
00049E  1  CA                   dex
00049F  1  CA                   dex
0004A0  1  CA                   dex
0004A1  1  CA                   dex
0004A2  1  CA                   dex
0004A3  1  CA                   dex
0004A4  1  CA                   dex             ;-70
0004A5  1  CA                   dex
0004A6  1  CA                   dex
0004A7  1  CA                   dex
0004A8  1  CA                   dex
0004A9  1  CA                   dex
0004AA  1  CA                   dex
0004AB  1  CA                   dex
0004AC  1  CA                   dex
0004AD  1  CA                   dex
0004AE  1  CA                   dex             ;-60
0004AF  1  CA                   dex
0004B0  1  CA                   dex
0004B1  1  CA                   dex
0004B2  1  CA                   dex
0004B3  1  CA                   dex
0004B4  1  CA                   dex
0004B5  1  CA                   dex
0004B6  1  CA                   dex
0004B7  1  CA                   dex
0004B8  1  CA                   dex             ;-50
0004B9  1  CA                   dex
0004BA  1  CA                   dex
0004BB  1  CA                   dex
0004BC  1  CA                   dex
0004BD  1  CA                   dex
0004BE  1  CA                   dex
0004BF  1  CA                   dex
0004C0  1  CA                   dex
0004C1  1  CA                   dex
0004C2  1  CA                   dex             ;-40
0004C3  1  CA                   dex
0004C4  1  CA                   dex
0004C5  1  CA                   dex
0004C6  1  CA                   dex
0004C7  1  CA                   dex
0004C8  1  CA                   dex
0004C9  1  CA                   dex
0004CA  1  CA                   dex
0004CB  1  CA                   dex
0004CC  1  CA                   dex             ;-30
0004CD  1  CA                   dex
0004CE  1  CA                   dex
0004CF  1  CA                   dex
0004D0  1  CA                   dex
0004D1  1  CA                   dex
0004D2  1  CA                   dex
0004D3  1  CA                   dex
0004D4  1  CA                   dex
0004D5  1  CA                   dex
0004D6  1  CA                   dex             ;-20
0004D7  1  CA                   dex
0004D8  1  CA                   dex
0004D9  1  CA                   dex
0004DA  1  CA                   dex
0004DB  1  CA                   dex
0004DC  1  CA                   dex
0004DD  1  CA                   dex
0004DE  1  CA                   dex
0004DF  1  CA                   dex
0004E0  1  CA                   dex             ;-10
0004E1  1  CA                   dex
0004E2  1  CA                   dex
0004E3  1  CA                   dex
0004E4  1  CA                   dex
0004E5  1  CA                   dex
0004E6  1  CA                   dex
0004E7  1  CA                   dex             ;-3
0004E8  1               range_op:               ;test target with zero flag=0, z=1 if previous dex
0004E8  1               range_adr   = *+1       ;modifiable relative address
0004E8  1  F0 3E                beq *+64        ;+64 if called without modification
0004EA  1  CA                   dex             ;+0
0004EB  1  CA                   dex
0004EC  1  CA                   dex
0004ED  1  CA                   dex
0004EE  1  CA                   dex
0004EF  1  CA                   dex
0004F0  1  CA                   dex
0004F1  1  CA                   dex
0004F2  1  CA                   dex
0004F3  1  CA                   dex
0004F4  1  CA                   dex             ;+10
0004F5  1  CA                   dex
0004F6  1  CA                   dex
0004F7  1  CA                   dex
0004F8  1  CA                   dex
0004F9  1  CA                   dex
0004FA  1  CA                   dex
0004FB  1  CA                   dex
0004FC  1  CA                   dex
0004FD  1  CA                   dex
0004FE  1  CA                   dex             ;+20
0004FF  1  CA                   dex
000500  1  CA                   dex
000501  1  CA                   dex
000502  1  CA                   dex
000503  1  CA                   dex
000504  1  CA                   dex
000505  1  CA                   dex
000506  1  CA                   dex
000507  1  CA                   dex
000508  1  CA                   dex             ;+30
000509  1  CA                   dex
00050A  1  CA                   dex
00050B  1  CA                   dex
00050C  1  CA                   dex
00050D  1  CA                   dex
00050E  1  CA                   dex
00050F  1  CA                   dex
000510  1  CA                   dex
000511  1  CA                   dex
000512  1  CA                   dex             ;+40
000513  1  CA                   dex
000514  1  CA                   dex
000515  1  CA                   dex
000516  1  CA                   dex
000517  1  CA                   dex
000518  1  CA                   dex
000519  1  CA                   dex
00051A  1  CA                   dex
00051B  1  CA                   dex
00051C  1  CA                   dex             ;+50
00051D  1  CA                   dex
00051E  1  CA                   dex
00051F  1  CA                   dex
000520  1  CA                   dex
000521  1  CA                   dex
000522  1  CA                   dex
000523  1  CA                   dex
000524  1  CA                   dex
000525  1  CA                   dex
000526  1  CA                   dex             ;+60
000527  1  CA                   dex
000528  1  CA                   dex
000529  1  CA                   dex
00052A  1  CA                   dex
00052B  1  CA                   dex
00052C  1  CA                   dex
00052D  1  CA                   dex
00052E  1  CA                   dex
00052F  1  CA                   dex
000530  1  CA                   dex             ;+70
000531  1  CA                   dex
000532  1  CA                   dex
000533  1  CA                   dex
000534  1  CA                   dex
000535  1  CA                   dex
000536  1  CA                   dex
000537  1  CA                   dex
000538  1  CA                   dex
000539  1  CA                   dex
00053A  1  CA                   dex             ;+80
00053B  1  CA                   dex
00053C  1  CA                   dex
00053D  1  CA                   dex
00053E  1  CA                   dex
00053F  1  CA                   dex
000540  1  CA                   dex
000541  1  CA                   dex
000542  1  CA                   dex
000543  1  CA                   dex
000544  1  CA                   dex             ;+90
000545  1  CA                   dex
000546  1  CA                   dex
000547  1  CA                   dex
000548  1  CA                   dex
000549  1  CA                   dex
00054A  1  CA                   dex
00054B  1  CA                   dex
00054C  1  CA                   dex
00054D  1  CA                   dex
00054E  1  CA                   dex             ;+100
00054F  1  CA                   dex
000550  1  CA                   dex
000551  1  CA                   dex
000552  1  CA                   dex
000553  1  CA                   dex
000554  1  CA                   dex
000555  1  CA                   dex
000556  1  CA                   dex
000557  1  CA                   dex
000558  1  CA                   dex             ;+110
000559  1  CA                   dex
00055A  1  CA                   dex
00055B  1  CA                   dex
00055C  1  CA                   dex
00055D  1  CA                   dex
00055E  1  CA                   dex
00055F  1  CA                   dex
000560  1  CA                   dex
000561  1  CA                   dex
000562  1  CA                   dex             ;+120
000563  1  CA                   dex
000564  1  CA                   dex
000565  1  CA                   dex
000566  1  CA                   dex
000567  1  CA                   dex
000568  1  CA                   dex
000569  1  EA                   nop             ;offset landing zone - forward branch too far
00056A  1  EA                   nop
00056B  1  EA                   nop
00056C  1  EA                   nop
00056D  1  EA                   nop
00056E  1  F0 08                beq range_ok    ;+127 - max forward
000570  1  20 FF FF             trap            ; bad range
000573  1  EA                   nop             ;offset landing zone - tolerate +/-5 offset to branch
000574  1  EA                   nop
000575  1  EA                   nop
000576  1  EA                   nop
000577  1  EA                   nop
000578  1               range_ok:
000578  1  EA                   nop
000579  1  EA                   nop
00057A  1  EA                   nop
00057B  1  EA                   nop
00057C  1  EA                   nop
00057D  1  C0 00                cpy #0
00057F  1  F0 03                beq range_end
000581  1  4C 49 04             jmp range_loop
000584  1               range_end:              ;range test successful
000584  1                   .endif
000584  1  AD 00 02 C9          next_test
000588  1  01 F0 03 20  
00058C  1  FF FF A9 02  
000593  1               
000593  1               ;partial test BNE & CMP, CPX, CPY immediate
000593  1  C0 01                cpy #1          ;testing BNE true
000595  1  D0 03                bne test_bne
000597  1  20 FF FF             trap
00059A  1               test_bne:
00059A  1  A9 00                lda #0
00059C  1  C9 00                cmp #0          ;test compare immediate
00059E  1  F0 03 20 FF          trap_ne
0005A2  1  FF           
0005A3  1  B0 03 20 FF          trap_cc
0005A7  1  FF           
0005A8  1  10 03 20 FF          trap_mi
0005AC  1  FF           
0005AD  1  C9 01                cmp #1
0005AF  1  D0 03 20 FF          trap_eq
0005B3  1  FF           
0005B4  1  90 03 20 FF          trap_cs
0005B8  1  FF           
0005B9  1  30 03 20 FF          trap_pl
0005BD  1  FF           
0005BE  1  AA                   tax
0005BF  1  E0 00                cpx #0          ;test compare x immediate
0005C1  1  F0 03 20 FF          trap_ne
0005C5  1  FF           
0005C6  1  B0 03 20 FF          trap_cc
0005CA  1  FF           
0005CB  1  10 03 20 FF          trap_mi
0005CF  1  FF           
0005D0  1  E0 01                cpx #1
0005D2  1  D0 03 20 FF          trap_eq
0005D6  1  FF           
0005D7  1  90 03 20 FF          trap_cs
0005DB  1  FF           
0005DC  1  30 03 20 FF          trap_pl
0005E0  1  FF           
0005E1  1  A8                   tay
0005E2  1  C0 00                cpy #0          ;test compare y immediate
0005E4  1  F0 03 20 FF          trap_ne
0005E8  1  FF           
0005E9  1  B0 03 20 FF          trap_cc
0005ED  1  FF           
0005EE  1  10 03 20 FF          trap_mi
0005F2  1  FF           
0005F3  1  C0 01                cpy #1
0005F5  1  D0 03 20 FF          trap_eq
0005F9  1  FF           
0005FA  1  90 03 20 FF          trap_cs
0005FE  1  FF           
0005FF  1  30 03 20 FF          trap_pl
000603  1  FF           
000604  1  AD 00 02 C9          next_test
000608  1  02 F0 03 20  
00060C  1  FF FF A9 03  
000613  1               ;testing stack operations PHA PHP PLA PLP
000613  1               
000613  1  A2 FF                ldx #$ff        ;initialize stack
000615  1  9A                   txs
000616  1  A9 55                lda #$55
000618  1  48                   pha
000619  1  A9 AA                lda #$aa
00061B  1  48                   pha
00061C  1  CD FE 01             cmp $1fe        ;on stack ?
00061F  1  F0 03 20 FF          trap_ne
000623  1  FF           
000624  1  BA                   tsx
000625  1  8A                   txa             ;overwrite accu
000626  1  C9 FD                cmp #$fd        ;sp decremented?
000628  1  F0 03 20 FF          trap_ne
00062C  1  FF           
00062D  1  68                   pla
00062E  1  C9 AA                cmp #$aa        ;successful retreived from stack?
000630  1  F0 03 20 FF          trap_ne
000634  1  FF           
000635  1  68                   pla
000636  1  C9 55                cmp #$55
000638  1  F0 03 20 FF          trap_ne
00063C  1  FF           
00063D  1  CD FF 01             cmp $1ff        ;remains on stack?
000640  1  F0 03 20 FF          trap_ne
000644  1  FF           
000645  1  BA                   tsx
000646  1  E0 FF                cpx #$ff        ;sp incremented?
000648  1  F0 03 20 FF          trap_ne
00064C  1  FF           
00064D  1  AD 00 02 C9          next_test
000651  1  03 F0 03 20  
000655  1  FF FF A9 04  
00065C  1               
00065C  1               ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
00065C  1  A9 FF 48 28          set_stat $ff    ;all on
000660  1  10 1A                bpl nbr1        ;branches should not be taken
000662  1  50 1B                bvc nbr2
000664  1  90 1C                bcc nbr3
000666  1  D0 1D                bne nbr4
000668  1  30 03                bmi br1         ;branches should be taken
00066A  1  20 FF FF             trap
00066D  1  70 03        br1:    bvs br2
00066F  1  20 FF FF             trap
000672  1  B0 03        br2:    bcs br3
000674  1  20 FF FF             trap
000677  1  F0 0F        br3:    beq br4
000679  1  20 FF FF             trap
00067C  1               nbr1:
00067C  1  20 FF FF             trap            ;previous bpl taken
00067F  1               nbr2:
00067F  1  20 FF FF             trap            ;previous bvc taken
000682  1               nbr3:
000682  1  20 FF FF             trap            ;previous bcc taken
000685  1               nbr4:
000685  1  20 FF FF             trap            ;previous bne taken
000688  1  08           br4:    php
000689  1  BA                   tsx
00068A  1  E0 FE                cpx #$fe        ;sp after php?
00068C  1  F0 03 20 FF          trap_ne
000690  1  FF           
000691  1  68                   pla
000692  1  09 08 C9 FF          cmp_flag $ff    ;returned all flags on?
000696  1  F0 03 20 FF          trap_ne
00069A  1  FF           
00069B  1  BA                   tsx
00069C  1  E0 FF                cpx #$ff        ;sp after php?
00069E  1  F0 03 20 FF          trap_ne
0006A2  1  FF           
0006A3  1  A9 00 48 28          set_stat 0      ;all off
0006A7  1  30 1A                bmi nbr11       ;branches should not be taken
0006A9  1  70 1B                bvs nbr12
0006AB  1  B0 1C                bcs nbr13
0006AD  1  F0 1D                beq nbr14
0006AF  1  10 03                bpl br11        ;branches should be taken
0006B1  1  20 FF FF             trap
0006B4  1  50 03        br11:   bvc br12
0006B6  1  20 FF FF             trap
0006B9  1  90 03        br12:   bcc br13
0006BB  1  20 FF FF             trap
0006BE  1  D0 0F        br13:   bne br14
0006C0  1  20 FF FF             trap
0006C3  1               nbr11:
0006C3  1  20 FF FF             trap            ;previous bmi taken
0006C6  1               nbr12:
0006C6  1  20 FF FF             trap            ;previous bvs taken
0006C9  1               nbr13:
0006C9  1  20 FF FF             trap            ;previous bcs taken
0006CC  1               nbr14:
0006CC  1  20 FF FF             trap            ;previous beq taken
0006CF  1  08           br14:   php
0006D0  1  68                   pla
0006D1  1  09 08 C9 38          cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
0006D5  1  F0 03 20 FF          trap_ne
0006D9  1  FF           
0006DA  1                       ;crosscheck flags
0006DA  1  A9 02 48 28          set_stat zero
0006DE  1  D0 02                bne brzs1
0006E0  1  F0 03                beq brzs2
0006E2  1               brzs1:
0006E2  1  20 FF FF             trap            ;branch zero/non zero
0006E5  1  B0 02        brzs2:  bcs brzs3
0006E7  1  90 03                bcc brzs4
0006E9  1               brzs3:
0006E9  1  20 FF FF             trap            ;branch carry/no carry
0006EC  1  30 02        brzs4:  bmi brzs5
0006EE  1  10 03                bpl brzs6
0006F0  1               brzs5:
0006F0  1  20 FF FF             trap            ;branch minus/plus
0006F3  1  70 02        brzs6:  bvs brzs7
0006F5  1  50 03                bvc brzs8
0006F7  1               brzs7:
0006F7  1  20 FF FF             trap            ;branch overflow/no overflow
0006FA  1               brzs8:
0006FA  1  A9 01 48 28          set_stat carry
0006FE  1  F0 02                beq brcs1
000700  1  D0 03                bne brcs2
000702  1               brcs1:
000702  1  20 FF FF             trap            ;branch zero/non zero
000705  1  90 02        brcs2:  bcc brcs3
000707  1  B0 03                bcs brcs4
000709  1               brcs3:
000709  1  20 FF FF             trap            ;branch carry/no carry
00070C  1  30 02        brcs4:  bmi brcs5
00070E  1  10 03                bpl brcs6
000710  1               brcs5:
000710  1  20 FF FF             trap            ;branch minus/plus
000713  1  70 02        brcs6:  bvs brcs7
000715  1  50 03                bvc brcs8
000717  1               brcs7:
000717  1  20 FF FF             trap            ;branch overflow/no overflow
00071A  1               
00071A  1               brcs8:
00071A  1  A9 80 48 28          set_stat minus
00071E  1  F0 02                beq brmi1
000720  1  D0 03                bne brmi2
000722  1               brmi1:
000722  1  20 FF FF             trap            ;branch zero/non zero
000725  1  B0 02        brmi2:  bcs brmi3
000727  1  90 03                bcc brmi4
000729  1               brmi3:
000729  1  20 FF FF             trap            ;branch carry/no carry
00072C  1  10 02        brmi4:  bpl brmi5
00072E  1  30 03                bmi brmi6
000730  1               brmi5:
000730  1  20 FF FF             trap            ;branch minus/plus
000733  1  70 02        brmi6:  bvs brmi7
000735  1  50 03                bvc brmi8
000737  1               brmi7:
000737  1  20 FF FF             trap            ;branch overflow/no overflow
00073A  1               brmi8:
00073A  1  A9 40 48 28          set_stat overfl
00073E  1  F0 02                beq brvs1
000740  1  D0 03                bne brvs2
000742  1               brvs1:
000742  1  20 FF FF             trap            ;branch zero/non zero
000745  1  B0 02        brvs2:  bcs brvs3
000747  1  90 03                bcc brvs4
000749  1               brvs3:
000749  1  20 FF FF             trap            ;branch carry/no carry
00074C  1  30 02        brvs4:  bmi brvs5
00074E  1  10 03                bpl brvs6
000750  1               brvs5:
000750  1  20 FF FF             trap            ;branch minus/plus
000753  1  50 02        brvs6:  bvc brvs7
000755  1  70 03                bvs brvs8
000757  1               brvs7:
000757  1  20 FF FF             trap            ;branch overflow/no overflow
00075A  1               brvs8:
00075A  1  A9 FD 48 28          set_stat $ff-zero
00075E  1  F0 02                beq brzc1
000760  1  D0 03                bne brzc2
000762  1               brzc1:
000762  1  20 FF FF             trap            ;branch zero/non zero
000765  1  90 02        brzc2:  bcc brzc3
000767  1  B0 03                bcs brzc4
000769  1               brzc3:
000769  1  20 FF FF             trap            ;branch carry/no carry
00076C  1  10 02        brzc4:  bpl brzc5
00076E  1  30 03                bmi brzc6
000770  1               brzc5:
000770  1  20 FF FF             trap            ;branch minus/plus
000773  1  50 02        brzc6:  bvc brzc7
000775  1  70 03                bvs brzc8
000777  1               brzc7:
000777  1  20 FF FF             trap            ;branch overflow/no overflow
00077A  1               brzc8:
00077A  1  A9 FE 48 28          set_stat $ff-carry
00077E  1  D0 02                bne brcc1
000780  1  F0 03                beq brcc2
000782  1               brcc1:
000782  1  20 FF FF             trap            ;branch zero/non zero
000785  1  B0 02        brcc2:  bcs brcc3
000787  1  90 03                bcc brcc4
000789  1               brcc3:
000789  1  20 FF FF             trap            ;branch carry/no carry
00078C  1  10 02        brcc4:  bpl brcc5
00078E  1  30 03                bmi brcc6
000790  1               brcc5:
000790  1  20 FF FF             trap            ;branch minus/plus
000793  1  50 02        brcc6:  bvc brcc7
000795  1  70 03                bvs brcc8
000797  1               brcc7:
000797  1  20 FF FF             trap            ;branch overflow/no overflow
00079A  1               brcc8:
00079A  1  A9 7F 48 28          set_stat $ff-minus
00079E  1  D0 02                bne brpl1
0007A0  1  F0 03                beq brpl2
0007A2  1               brpl1:
0007A2  1  20 FF FF             trap            ;branch zero/non zero
0007A5  1  90 02        brpl2:  bcc brpl3
0007A7  1  B0 03                bcs brpl4
0007A9  1               brpl3:
0007A9  1  20 FF FF             trap            ;branch carry/no carry
0007AC  1  30 02        brpl4:  bmi brpl5
0007AE  1  10 03                bpl brpl6
0007B0  1               brpl5:
0007B0  1  20 FF FF             trap            ;branch minus/plus
0007B3  1  50 02        brpl6:  bvc brpl7
0007B5  1  70 03                bvs brpl8
0007B7  1               brpl7:
0007B7  1  20 FF FF             trap            ;branch overflow/no overflow
0007BA  1               brpl8:
0007BA  1  A9 BF 48 28          set_stat $ff-overfl
0007BE  1  D0 02                bne brvc1
0007C0  1  F0 03                beq brvc2
0007C2  1               brvc1:
0007C2  1  20 FF FF             trap            ;branch zero/non zero
0007C5  1  90 02        brvc2:  bcc brvc3
0007C7  1  B0 03                bcs brvc4
0007C9  1               brvc3:
0007C9  1  20 FF FF             trap            ;branch carry/no carry
0007CC  1  10 02        brvc4:  bpl brvc5
0007CE  1  30 03                bmi brvc6
0007D0  1               brvc5:
0007D0  1  20 FF FF             trap            ;branch minus/plus
0007D3  1  70 02        brvc6:  bvs brvc7
0007D5  1  50 03                bvc brvc8
0007D7  1               brvc7:
0007D7  1  20 FF FF             trap            ;branch overflow/no overflow
0007DA  1               brvc8:
0007DA  1  AD 00 02 C9          next_test
0007DE  1  04 F0 03 20  
0007E2  1  FF FF A9 05  
0007E9  1               
0007E9  1               ; test PHA does not alter flags or accumulator but PLA does
0007E9  1  A2 55                ldx #$55        ;x & y protected
0007EB  1  A0 AA                ldy #$aa
0007ED  1  A9 FF 48 A9          set_a 1,$ff     ;push
0007F1  1  01 28        
0007F3  1  48                   pha
0007F4  1  08 C9 01 F0          tst_a 1,$ff
0007F8  1  03 20 FF FF  
0007FC  1  68 48 09 08  
000808  1  A9 00 48 A9          set_a 0,0
00080C  1  00 28        
00080E  1  48                   pha
00080F  1  08 C9 00 F0          tst_a 0,0
000813  1  03 20 FF FF  
000817  1  68 48 09 08  
000823  1  A9 FF 48 A9          set_a $ff,$ff
000827  1  FF 28        
000829  1  48                   pha
00082A  1  08 C9 FF F0          tst_a $ff,$ff
00082E  1  03 20 FF FF  
000832  1  68 48 09 08  
00083E  1  A9 00 48 A9          set_a 1,0
000842  1  01 28        
000844  1  48                   pha
000845  1  08 C9 01 F0          tst_a 1,0
000849  1  03 20 FF FF  
00084D  1  68 48 09 08  
000859  1  A9 FF 48 A9          set_a 0,$ff
00085D  1  00 28        
00085F  1  48                   pha
000860  1  08 C9 00 F0          tst_a 0,$ff
000864  1  03 20 FF FF  
000868  1  68 48 09 08  
000874  1  A9 00 48 A9          set_a $ff,0
000878  1  FF 28        
00087A  1  48                   pha
00087B  1  08 C9 FF F0          tst_a $ff,0
00087F  1  03 20 FF FF  
000883  1  68 48 09 08  
00088F  1  A9 FF 48 A9          set_a 0,$ff     ;pull
000893  1  00 28        
000895  1  68                   pla
000896  1  08 C9 FF F0          tst_a $ff,$ff-zero
00089A  1  03 20 FF FF  
00089E  1  68 48 09 08  
0008AA  1  A9 00 48 A9          set_a $ff,0
0008AE  1  FF 28        
0008B0  1  68                   pla
0008B1  1  08 C9 00 F0          tst_a 0,zero
0008B5  1  03 20 FF FF  
0008B9  1  68 48 09 08  
0008C5  1  A9 FF 48 A9          set_a $fe,$ff
0008C9  1  FE 28        
0008CB  1  68                   pla
0008CC  1  08 C9 01 F0          tst_a 1,$ff-zero-minus
0008D0  1  03 20 FF FF  
0008D4  1  68 48 09 08  
0008E0  1  A9 00 48 A9          set_a 0,0
0008E4  1  00 28        
0008E6  1  68                   pla
0008E7  1  08 C9 FF F0          tst_a $ff,minus
0008EB  1  03 20 FF FF  
0008EF  1  68 48 09 08  
0008FB  1  A9 FF 48 A9          set_a $ff,$ff
0008FF  1  FF 28        
000901  1  68                   pla
000902  1  08 C9 00 F0          tst_a 0,$ff-minus
000906  1  03 20 FF FF  
00090A  1  68 48 09 08  
000916  1  A9 00 48 A9          set_a $fe,0
00091A  1  FE 28        
00091C  1  68                   pla
00091D  1  08 C9 01 F0          tst_a 1,0
000921  1  03 20 FF FF  
000925  1  68 48 09 08  
000931  1  E0 55                cpx #$55        ;x & y unchanged?
000933  1  F0 03 20 FF          trap_ne
000937  1  FF           
000938  1  C0 AA                cpy #$aa
00093A  1  F0 03 20 FF          trap_ne
00093E  1  FF           
00093F  1  AD 00 02 C9          next_test
000943  1  05 F0 03 20  
000947  1  FF FF A9 06  
00094E  1               
00094E  1               ; partial pretest EOR #
00094E  1  A9 00 48 A9          set_a $3c,0
000952  1  3C 28        
000954  1  49 C3                eor #$c3
000956  1  08 C9 FF F0          tst_a $ff,fn
00095A  1  03 20 FF FF  
00095E  1  68 48 09 08  
00096A  1  A9 00 48 A9          set_a $c3,0
00096E  1  C3 28        
000970  1  49 C3                eor #$c3
000972  1  08 C9 00 F0          tst_a 0,fz
000976  1  03 20 FF FF  
00097A  1  68 48 09 08  
000986  1  AD 00 02 C9          next_test
00098A  1  06 F0 03 20  
00098E  1  FF FF A9 07  
000995  1               
000995  1               ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
000995  1               ; testing NOP
000995  1  A2 24                ldx #$24
000997  1  A0 42                ldy #$42
000999  1  A9 00 48 A9          set_a $18,0
00099D  1  18 28        
00099F  1  EA                   nop
0009A0  1  08 C9 18 F0          tst_a $18,0
0009A4  1  03 20 FF FF  
0009A8  1  68 48 09 08  
0009B4  1  E0 24                cpx #$24
0009B6  1  F0 03 20 FF          trap_ne
0009BA  1  FF           
0009BB  1  C0 42                cpy #$42
0009BD  1  F0 03 20 FF          trap_ne
0009C1  1  FF           
0009C2  1  A2 DB                ldx #$db
0009C4  1  A0 BD                ldy #$bd
0009C6  1  A9 FF 48 A9          set_a $e7,$ff
0009CA  1  E7 28        
0009CC  1  EA                   nop
0009CD  1  08 C9 E7 F0          tst_a $e7,$ff
0009D1  1  03 20 FF FF  
0009D5  1  68 48 09 08  
0009E1  1  E0 DB                cpx #$db
0009E3  1  F0 03 20 FF          trap_ne
0009E7  1  FF           
0009E8  1  C0 BD                cpy #$bd
0009EA  1  F0 03 20 FF          trap_ne
0009EE  1  FF           
0009EF  1  AD 00 02 C9          next_test
0009F3  1  07 F0 03 20  
0009F7  1  FF FF A9 08  
0009FE  1               
0009FE  1               ; jump absolute
0009FE  1  A9 00 48 28          set_stat $0
000A02  1  A9 46                lda #'F'
000A04  1  A2 41                ldx #'A'
000A06  1  A0 52                ldy #'R'        ;N=0, V=0, Z=0, C=0
000A08  1  4C 0E 43             jmp test_far
000A0B  1  EA                   nop
000A0C  1  EA                   nop
000A0D  1  F0 03 20 FF          trap_ne         ;runover protection
000A11  1  FF           
000A12  1  E8                   inx
000A13  1  E8                   inx
000A14  1               far_ret:
000A14  1  D0 03 20 FF          trap_eq         ;returned flags OK?
000A18  1  FF           
000A19  1  30 03 20 FF          trap_pl
000A1D  1  FF           
000A1E  1  B0 03 20 FF          trap_cc
000A22  1  FF           
000A23  1  70 03 20 FF          trap_vc
000A27  1  FF           
000A28  1  C9 EC                cmp #('F'^$aa)  ;returned registers OK?
000A2A  1  F0 03 20 FF          trap_ne
000A2E  1  FF           
000A2F  1  E0 42                cpx #('A'+1)
000A31  1  F0 03 20 FF          trap_ne
000A35  1  FF           
000A36  1  C0 4F                cpy #('R'-3)
000A38  1  F0 03 20 FF          trap_ne
000A3C  1  FF           
000A3D  1  CA                   dex
000A3E  1  C8                   iny
000A3F  1  C8                   iny
000A40  1  C8                   iny
000A41  1  49 AA                eor #$aa        ;N=0, V=1, Z=0, C=1
000A43  1  4C 4F 0A             jmp test_near
000A46  1  EA                   nop
000A47  1  EA                   nop
000A48  1  F0 03 20 FF          trap_ne         ;runover protection
000A4C  1  FF           
000A4D  1  E8                   inx
000A4E  1  E8                   inx
000A4F  1               test_near:
000A4F  1  D0 03 20 FF          trap_eq         ;passed flags OK?
000A53  1  FF           
000A54  1  10 03 20 FF          trap_mi
000A58  1  FF           
000A59  1  B0 03 20 FF          trap_cc
000A5D  1  FF           
000A5E  1  70 03 20 FF          trap_vc
000A62  1  FF           
000A63  1  C9 46                cmp #'F'        ;passed registers OK?
000A65  1  F0 03 20 FF          trap_ne
000A69  1  FF           
000A6A  1  E0 41                cpx #'A'
000A6C  1  F0 03 20 FF          trap_ne
000A70  1  FF           
000A71  1  C0 52                cpy #'R'
000A73  1  F0 03 20 FF          trap_ne
000A77  1  FF           
000A78  1  AD 00 02 C9          next_test
000A7C  1  08 F0 03 20  
000A80  1  FF FF A9 09  
000A87  1               
000A87  1               ; jump indirect
000A87  1  A9 00 48 28          set_stat 0
000A8B  1  A9 49                lda #'I'
000A8D  1  A2 4E                ldx #'N'
000A8F  1  A0 44                ldy #'D'        ;N=0, V=0, Z=0, C=0
000A91  1  6C 54 43             jmp (ptr_tst_ind)
000A94  1  EA                   nop
000A95  1  F0 03 20 FF          trap_ne         ;runover protection
000A99  1  FF           
000A9A  1  88                   dey
000A9B  1  88                   dey
000A9C  1               ind_ret:
000A9C  1  08                   php             ;either SP or Y count will fail, if we do not hit
000A9D  1  88                   dey
000A9E  1  88                   dey
000A9F  1  88                   dey
000AA0  1  28                   plp
000AA1  1  D0 03 20 FF          trap_eq         ;returned flags OK?
000AA5  1  FF           
000AA6  1  30 03 20 FF          trap_pl
000AAA  1  FF           
000AAB  1  B0 03 20 FF          trap_cc
000AAF  1  FF           
000AB0  1  70 03 20 FF          trap_vc
000AB4  1  FF           
000AB5  1  C9 E3                cmp #('I'^$aa)  ;returned registers OK?
000AB7  1  F0 03 20 FF          trap_ne
000ABB  1  FF           
000ABC  1  E0 4F                cpx #('N'+1)
000ABE  1  F0 03 20 FF          trap_ne
000AC2  1  FF           
000AC3  1  C0 3E                cpy #('D'-6)
000AC5  1  F0 03 20 FF          trap_ne
000AC9  1  FF           
000ACA  1  BA                   tsx             ;SP check
000ACB  1  E0 FF                cpx #$ff
000ACD  1  F0 03 20 FF          trap_ne
000AD1  1  FF           
000AD2  1  AD 00 02 C9          next_test
000AD6  1  09 F0 03 20  
000ADA  1  FF FF A9 0A  
000AE1  1               
000AE1  1               ; jump subroutine & return from subroutine
000AE1  1  A9 00 48 28          set_stat 0
000AE5  1  A9 4A                lda #'J'
000AE7  1  A2 53                ldx #'S'
000AE9  1  A0 52                ldy #'R'        ;N=0, V=0, Z=0, C=0
000AEB  1  20 AB 43             jsr test_jsr
000AEE  1               jsr_ret = *-1           ;last address of jsr = return address
000AEE  1  08                   php             ;either SP or Y count will fail, if we do not hit
000AEF  1  88                   dey
000AF0  1  88                   dey
000AF1  1  88                   dey
000AF2  1  28                   plp
000AF3  1  D0 03 20 FF          trap_eq         ;returned flags OK?
000AF7  1  FF           
000AF8  1  30 03 20 FF          trap_pl
000AFC  1  FF           
000AFD  1  B0 03 20 FF          trap_cc
000B01  1  FF           
000B02  1  70 03 20 FF          trap_vc
000B06  1  FF           
000B07  1  C9 E0                cmp #('J'^$aa)  ;returned registers OK?
000B09  1  F0 03 20 FF          trap_ne
000B0D  1  FF           
000B0E  1  E0 54                cpx #('S'+1)
000B10  1  F0 03 20 FF          trap_ne
000B14  1  FF           
000B15  1  C0 4C                cpy #('R'-6)
000B17  1  F0 03 20 FF          trap_ne
000B1B  1  FF           
000B1C  1  BA                   tsx             ;sp?
000B1D  1  E0 FF                cpx #$ff
000B1F  1  F0 03 20 FF          trap_ne
000B23  1  FF           
000B24  1  AD 00 02 C9          next_test
000B28  1  0A F0 03 20  
000B2C  1  FF FF A9 0B  
000B33  1               
000B33  1               ; break & return from interrupt
000B33  1                   .if ROM_vectors = 1
000B33  1  A9 00                load_flag 0     ;with interrupts enabled if allowed!
000B35  1  48                   pha
000B36  1  A9 42                lda #'B'
000B38  1  A2 52                ldx #'R'
000B3A  1  A0 4B                ldy #'K'
000B3C  1  28                   plp             ;N=0, V=0, Z=0, C=0
000B3D  1  00                   brk
000B3E  1                   .else
000B3E  1                       lda #>brk_ret0 ;emulated break
000B3E  1                       pha
000B3E  1                       lda #<brk_ret0
000B3E  1                       pha
000B3E  1                       load_flag fao    ;set break & unused on stack
000B3E  1                       pha
000B3E  1                       load_flag intdis ;during interrupt
000B3E  1                       pha
000B3E  1                       lda #'B'
000B3E  1                       ldx #'R'
000B3E  1                       ldy #'K'
000B3E  1                       plp             ;N=0, V=0, Z=0, C=0
000B3E  1                       jmp irq_trap
000B3E  1                   .endif
000B3E  1  88                   dey             ;should not be executed
000B3F  1               brk_ret0:               ;address of break return
000B3F  1  08                   php             ;either SP or Y count will fail, if we do not hit
000B40  1  88                   dey
000B41  1  88                   dey
000B42  1  88                   dey
000B43  1  C9 E8                cmp #'B'^$aa    ;returned registers OK?
000B45  1                       ;the IRQ vector was never executed if A & X stay unmodified
000B45  1  F0 03 20 FF          trap_ne
000B49  1  FF           
000B4A  1  E0 53                cpx #'R'+1
000B4C  1  F0 03 20 FF          trap_ne
000B50  1  FF           
000B51  1  C0 45                cpy #'K'-6
000B53  1  F0 03 20 FF          trap_ne
000B57  1  FF           
000B58  1  68                   pla             ;returned flags OK (unchanged)?
000B59  1  09 08 C9 38          cmp_flag 0
000B5D  1  F0 03 20 FF          trap_ne
000B61  1  FF           
000B62  1  BA                   tsx             ;sp?
000B63  1  E0 FF                cpx #$ff
000B65  1  F0 03 20 FF          trap_ne
000B69  1  FF           
000B6A  1                   .if ROM_vectors = 1
000B6A  1  A9 FF                load_flag $ff   ;with interrupts disabled if allowed!
000B6C  1  48                   pha
000B6D  1  A9 BD                lda #$ff-'B'
000B6F  1  A2 AD                ldx #$ff-'R'
000B71  1  A0 B4                ldy #$ff-'K'
000B73  1  28                   plp             ;N=1, V=1, Z=1, C=1
000B74  1  00                   brk
000B75  1                   .else
000B75  1                       lda #>brk_ret1 ;emulated break
000B75  1                       pha
000B75  1                       lda #<brk_ret1
000B75  1                       pha
000B75  1                       load_flag $ff
000B75  1                       pha             ;set break & unused on stack
000B75  1                       pha             ;actual flags
000B75  1                       lda #$ff-'B'
000B75  1                       ldx #$ff-'R'
000B75  1                       ldy #$ff-'K'
000B75  1                       plp             ;N=1, V=1, Z=1, C=1
000B75  1                       jmp irq_trap
000B75  1                   .endif
000B75  1  88                   dey             ;should not be executed
000B76  1               brk_ret1:               ;address of break return
000B76  1  08                   php             ;either SP or Y count will fail, if we do not hit
000B77  1  88                   dey
000B78  1  88                   dey
000B79  1  88                   dey
000B7A  1  C9 17                cmp #($ff-'B')^$aa  ;returned registers OK?
000B7C  1                       ;the IRQ vector was never executed if A & X stay unmodified
000B7C  1  F0 03 20 FF          trap_ne
000B80  1  FF           
000B81  1  E0 AE                cpx #$ff-'R'+1
000B83  1  F0 03 20 FF          trap_ne
000B87  1  FF           
000B88  1  C0 AE                cpy #$ff-'K'-6
000B8A  1  F0 03 20 FF          trap_ne
000B8E  1  FF           
000B8F  1  68                   pla             ;returned flags OK (unchanged)?
000B90  1  09 08 C9 FF          cmp_flag $ff
000B94  1  F0 03 20 FF          trap_ne
000B98  1  FF           
000B99  1  BA                   tsx             ;sp?
000B9A  1  E0 FF                cpx #$ff
000B9C  1  F0 03 20 FF          trap_ne
000BA0  1  FF           
000BA1  1  AD 00 02 C9          next_test
000BA5  1  0B F0 03 20  
000BA9  1  FF FF A9 0C  
000BB0  1               
000BB0  1               ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
000BB0  1  A9 FF 48 28          set_stat $ff
000BB4  1  18                   clc
000BB5  1  08 68 48 09          tst_stat $ff-carry
000BB9  1  08 C9 FE F0  
000BBD  1  03 20 FF FF  
000BC2  1  38                   sec
000BC3  1  08 68 48 09          tst_stat $ff
000BC7  1  08 C9 FF F0  
000BCB  1  03 20 FF FF  
000BD0  1                   .if I_flag = 3
000BD0  1  58                   cli
000BD1  1  08 68 48 09          tst_stat $ff-intdis
000BD5  1  08 C9 FB F0  
000BD9  1  03 20 FF FF  
000BDE  1  78                   sei
000BDF  1  08 68 48 09          tst_stat $ff
000BE3  1  08 C9 FF F0  
000BE7  1  03 20 FF FF  
000BEC  1                   .endif
000BEC  1  D8                   cld
000BED  1  08 68 48 09          tst_stat $ff-decmode
000BF1  1  08 C9 FF F0  
000BF5  1  03 20 FF FF  
000BFA  1  F8                   sed
000BFB  1  08 68 48 09          tst_stat $ff
000BFF  1  08 C9 FF F0  
000C03  1  03 20 FF FF  
000C08  1  B8                   clv
000C09  1  08 68 48 09          tst_stat $ff-overfl
000C0D  1  08 C9 BF F0  
000C11  1  03 20 FF FF  
000C16  1  A9 00 48 28          set_stat 0
000C1A  1  08 68 48 09          tst_stat 0
000C1E  1  08 C9 38 F0  
000C22  1  03 20 FF FF  
000C27  1  38                   sec
000C28  1  08 68 48 09          tst_stat carry
000C2C  1  08 C9 39 F0  
000C30  1  03 20 FF FF  
000C35  1  18                   clc
000C36  1  08 68 48 09          tst_stat 0
000C3A  1  08 C9 38 F0  
000C3E  1  03 20 FF FF  
000C43  1                   .if I_flag = 3
000C43  1  78                   sei
000C44  1  08 68 48 09          tst_stat intdis
000C48  1  08 C9 3C F0  
000C4C  1  03 20 FF FF  
000C51  1  58                   cli
000C52  1  08 68 48 09          tst_stat 0
000C56  1  08 C9 38 F0  
000C5A  1  03 20 FF FF  
000C5F  1                   .endif
000C5F  1  F8                   sed
000C60  1  08 68 48 09          tst_stat decmode
000C64  1  08 C9 38 F0  
000C68  1  03 20 FF FF  
000C6D  1  D8                   cld
000C6E  1  08 68 48 09          tst_stat 0
000C72  1  08 C9 38 F0  
000C76  1  03 20 FF FF  
000C7B  1  A9 40 48 28          set_stat overfl
000C7F  1  08 68 48 09          tst_stat overfl
000C83  1  08 C9 78 F0  
000C87  1  03 20 FF FF  
000C8C  1  B8                   clv
000C8D  1  08 68 48 09          tst_stat 0
000C91  1  08 C9 38 F0  
000C95  1  03 20 FF FF  
000C9A  1  AD 00 02 C9          next_test
000C9E  1  0C F0 03 20  
000CA2  1  FF FF A9 0D  
000CA9  1               ; testing index register increment/decrement and transfer
000CA9  1               ; INX INY DEX DEY TAX TXA TAY TYA
000CA9  1  A2 FE                ldx #$fe
000CAB  1  A9 FF 48 28          set_stat $ff
000CAF  1  E8                   inx             ;ff
000CB0  1  08 E0 FF F0          tst_x $ff,$ff-zero
000CB4  1  03 20 FF FF  
000CB8  1  68 48 09 08  
000CC4  1  E8                   inx             ;00
000CC5  1  08 E0 00 F0          tst_x 0,$ff-minus
000CC9  1  03 20 FF FF  
000CCD  1  68 48 09 08  
000CD9  1  E8                   inx             ;01
000CDA  1  08 E0 01 F0          tst_x 1,$ff-minus-zero
000CDE  1  03 20 FF FF  
000CE2  1  68 48 09 08  
000CEE  1  CA                   dex             ;00
000CEF  1  08 E0 00 F0          tst_x 0,$ff-minus
000CF3  1  03 20 FF FF  
000CF7  1  68 48 09 08  
000D03  1  CA                   dex             ;ff
000D04  1  08 E0 FF F0          tst_x $ff,$ff-zero
000D08  1  03 20 FF FF  
000D0C  1  68 48 09 08  
000D18  1  CA                   dex             ;fe
000D19  1  A9 00 48 28          set_stat 0
000D1D  1  E8                   inx             ;ff
000D1E  1  08 E0 FF F0          tst_x $ff,minus
000D22  1  03 20 FF FF  
000D26  1  68 48 09 08  
000D32  1  E8                   inx             ;00
000D33  1  08 E0 00 F0          tst_x 0,zero
000D37  1  03 20 FF FF  
000D3B  1  68 48 09 08  
000D47  1  E8                   inx             ;01
000D48  1  08 E0 01 F0          tst_x 1,0
000D4C  1  03 20 FF FF  
000D50  1  68 48 09 08  
000D5C  1  CA                   dex             ;00
000D5D  1  08 E0 00 F0          tst_x 0,zero
000D61  1  03 20 FF FF  
000D65  1  68 48 09 08  
000D71  1  CA                   dex             ;ff
000D72  1  08 E0 FF F0          tst_x $ff,minus
000D76  1  03 20 FF FF  
000D7A  1  68 48 09 08  
000D86  1               
000D86  1  A0 FE                ldy #$fe
000D88  1  A9 FF 48 28          set_stat $ff
000D8C  1  C8                   iny             ;ff
000D8D  1  08 C0 FF F0          tst_y $ff,$ff-zero
000D91  1  03 20 FF FF  
000D95  1  68 48 09 08  
000DA1  1  C8                   iny             ;00
000DA2  1  08 C0 00 F0          tst_y 0,$ff-minus
000DA6  1  03 20 FF FF  
000DAA  1  68 48 09 08  
000DB6  1  C8                   iny             ;01
000DB7  1  08 C0 01 F0          tst_y 1,$ff-minus-zero
000DBB  1  03 20 FF FF  
000DBF  1  68 48 09 08  
000DCB  1  88                   dey             ;00
000DCC  1  08 C0 00 F0          tst_y 0,$ff-minus
000DD0  1  03 20 FF FF  
000DD4  1  68 48 09 08  
000DE0  1  88                   dey             ;ff
000DE1  1  08 C0 FF F0          tst_y $ff,$ff-zero
000DE5  1  03 20 FF FF  
000DE9  1  68 48 09 08  
000DF5  1  88                   dey             ;fe
000DF6  1  A9 00 48 28          set_stat 0
000DFA  1  C8                   iny             ;ff
000DFB  1  08 C0 FF F0          tst_y $ff,0+minus
000DFF  1  03 20 FF FF  
000E03  1  68 48 09 08  
000E0F  1  C8                   iny             ;00
000E10  1  08 C0 00 F0          tst_y 0,zero
000E14  1  03 20 FF FF  
000E18  1  68 48 09 08  
000E24  1  C8                   iny             ;01
000E25  1  08 C0 01 F0          tst_y 1,0
000E29  1  03 20 FF FF  
000E2D  1  68 48 09 08  
000E39  1  88                   dey             ;00
000E3A  1  08 C0 00 F0          tst_y 0,zero
000E3E  1  03 20 FF FF  
000E42  1  68 48 09 08  
000E4E  1  88                   dey             ;ff
000E4F  1  08 C0 FF F0          tst_y $ff,minus
000E53  1  03 20 FF FF  
000E57  1  68 48 09 08  
000E63  1               
000E63  1  A2 FF                ldx #$ff
000E65  1  A9 FF 48 28          set_stat $ff
000E69  1  8A                   txa
000E6A  1  08 C9 FF F0          tst_a $ff,$ff-zero
000E6E  1  03 20 FF FF  
000E72  1  68 48 09 08  
000E7E  1  08                   php
000E7F  1  E8                   inx             ;00
000E80  1  28                   plp
000E81  1  8A                   txa
000E82  1  08 C9 00 F0          tst_a 0,$ff-minus
000E86  1  03 20 FF FF  
000E8A  1  68 48 09 08  
000E96  1  08                   php
000E97  1  E8                   inx             ;01
000E98  1  28                   plp
000E99  1  8A                   txa
000E9A  1  08 C9 01 F0          tst_a 1,$ff-minus-zero
000E9E  1  03 20 FF FF  
000EA2  1  68 48 09 08  
000EAE  1  A9 00 48 28          set_stat 0
000EB2  1  8A                   txa
000EB3  1  08 C9 01 F0          tst_a 1,0
000EB7  1  03 20 FF FF  
000EBB  1  68 48 09 08  
000EC7  1  08                   php
000EC8  1  CA                   dex             ;00
000EC9  1  28                   plp
000ECA  1  8A                   txa
000ECB  1  08 C9 00 F0          tst_a 0,zero
000ECF  1  03 20 FF FF  
000ED3  1  68 48 09 08  
000EDF  1  08                   php
000EE0  1  CA                   dex             ;ff
000EE1  1  28                   plp
000EE2  1  8A                   txa
000EE3  1  08 C9 FF F0          tst_a $ff,minus
000EE7  1  03 20 FF FF  
000EEB  1  68 48 09 08  
000EF7  1               
000EF7  1  A0 FF                ldy #$ff
000EF9  1  A9 FF 48 28          set_stat $ff
000EFD  1  98                   tya
000EFE  1  08 C9 FF F0          tst_a $ff,$ff-zero
000F02  1  03 20 FF FF  
000F06  1  68 48 09 08  
000F12  1  08                   php
000F13  1  C8                   iny             ;00
000F14  1  28                   plp
000F15  1  98                   tya
000F16  1  08 C9 00 F0          tst_a 0,$ff-minus
000F1A  1  03 20 FF FF  
000F1E  1  68 48 09 08  
000F2A  1  08                   php
000F2B  1  C8                   iny             ;01
000F2C  1  28                   plp
000F2D  1  98                   tya
000F2E  1  08 C9 01 F0          tst_a 1,$ff-minus-zero
000F32  1  03 20 FF FF  
000F36  1  68 48 09 08  
000F42  1  A9 00 48 28          set_stat 0
000F46  1  98                   tya
000F47  1  08 C9 01 F0          tst_a 1,0
000F4B  1  03 20 FF FF  
000F4F  1  68 48 09 08  
000F5B  1  08                   php
000F5C  1  88                   dey             ;00
000F5D  1  28                   plp
000F5E  1  98                   tya
000F5F  1  08 C9 00 F0          tst_a 0,zero
000F63  1  03 20 FF FF  
000F67  1  68 48 09 08  
000F73  1  08                   php
000F74  1  88                   dey             ;ff
000F75  1  28                   plp
000F76  1  98                   tya
000F77  1  08 C9 FF F0          tst_a $ff,minus
000F7B  1  03 20 FF FF  
000F7F  1  68 48 09 08  
000F8B  1               
000F8B  1  A9 FF                load_flag $ff
000F8D  1  48                   pha
000F8E  1  A2 FF                ldx #$ff        ;ff
000F90  1  8A                   txa
000F91  1  28                   plp
000F92  1  A8                   tay
000F93  1  08 C0 FF F0          tst_y $ff,$ff-zero
000F97  1  03 20 FF FF  
000F9B  1  68 48 09 08  
000FA7  1  08                   php
000FA8  1  E8                   inx             ;00
000FA9  1  8A                   txa
000FAA  1  28                   plp
000FAB  1  A8                   tay
000FAC  1  08 C0 00 F0          tst_y 0,$ff-minus
000FB0  1  03 20 FF FF  
000FB4  1  68 48 09 08  
000FC0  1  08                   php
000FC1  1  E8                   inx             ;01
000FC2  1  8A                   txa
000FC3  1  28                   plp
000FC4  1  A8                   tay
000FC5  1  08 C0 01 F0          tst_y 1,$ff-minus-zero
000FC9  1  03 20 FF FF  
000FCD  1  68 48 09 08  
000FD9  1  A9 00                load_flag 0
000FDB  1  48                   pha
000FDC  1  A9 00                lda #0
000FDE  1  8A                   txa
000FDF  1  28                   plp
000FE0  1  A8                   tay
000FE1  1  08 C0 01 F0          tst_y 1,0
000FE5  1  03 20 FF FF  
000FE9  1  68 48 09 08  
000FF5  1  08                   php
000FF6  1  CA                   dex             ;00
000FF7  1  8A                   txa
000FF8  1  28                   plp
000FF9  1  A8                   tay
000FFA  1  08 C0 00 F0          tst_y 0,zero
000FFE  1  03 20 FF FF  
001002  1  68 48 09 08  
00100E  1  08                   php
00100F  1  CA                   dex             ;ff
001010  1  8A                   txa
001011  1  28                   plp
001012  1  A8                   tay
001013  1  08 C0 FF F0          tst_y $ff,minus
001017  1  03 20 FF FF  
00101B  1  68 48 09 08  
001027  1               
001027  1               
001027  1  A9 FF                load_flag $ff
001029  1  48                   pha
00102A  1  A0 FF                ldy #$ff        ;ff
00102C  1  98                   tya
00102D  1  28                   plp
00102E  1  AA                   tax
00102F  1  08 E0 FF F0          tst_x $ff,$ff-zero
001033  1  03 20 FF FF  
001037  1  68 48 09 08  
001043  1  08                   php
001044  1  C8                   iny             ;00
001045  1  98                   tya
001046  1  28                   plp
001047  1  AA                   tax
001048  1  08 E0 00 F0          tst_x 0,$ff-minus
00104C  1  03 20 FF FF  
001050  1  68 48 09 08  
00105C  1  08                   php
00105D  1  C8                   iny             ;01
00105E  1  98                   tya
00105F  1  28                   plp
001060  1  AA                   tax
001061  1  08 E0 01 F0          tst_x 1,$ff-minus-zero
001065  1  03 20 FF FF  
001069  1  68 48 09 08  
001075  1  A9 00                load_flag 0
001077  1  48                   pha
001078  1  A9 00                lda #0          ;preset status
00107A  1  98                   tya
00107B  1  28                   plp
00107C  1  AA                   tax
00107D  1  08 E0 01 F0          tst_x 1,0
001081  1  03 20 FF FF  
001085  1  68 48 09 08  
001091  1  08                   php
001092  1  88                   dey             ;00
001093  1  98                   tya
001094  1  28                   plp
001095  1  AA                   tax
001096  1  08 E0 00 F0          tst_x 0,zero
00109A  1  03 20 FF FF  
00109E  1  68 48 09 08  
0010AA  1  08                   php
0010AB  1  88                   dey             ;ff
0010AC  1  98                   tya
0010AD  1  28                   plp
0010AE  1  AA                   tax
0010AF  1  08 E0 FF F0          tst_x $ff,minus
0010B3  1  03 20 FF FF  
0010B7  1  68 48 09 08  
0010C3  1  AD 00 02 C9          next_test
0010C7  1  0D F0 03 20  
0010CB  1  FF FF A9 0E  
0010D2  1               
0010D2  1               ;TSX sets NZ - TXS does not
0010D2  1               ;  This section also tests for proper stack wrap around.
0010D2  1  A2 01                ldx #1          ;01
0010D4  1  A9 FF 48 28          set_stat $ff
0010D8  1  9A                   txs
0010D9  1  08                   php
0010DA  1  AD 01 01             lda $101
0010DD  1  09 08 C9 FF          cmp_flag $ff
0010E1  1  F0 03 20 FF          trap_ne
0010E5  1  FF           
0010E6  1  A9 00 48 28          set_stat 0
0010EA  1  9A                   txs
0010EB  1  08                   php
0010EC  1  AD 01 01             lda $101
0010EF  1  09 08 C9 38          cmp_flag 0
0010F3  1  F0 03 20 FF          trap_ne
0010F7  1  FF           
0010F8  1  CA                   dex             ;00
0010F9  1  A9 FF 48 28          set_stat $ff
0010FD  1  9A                   txs
0010FE  1  08                   php
0010FF  1  AD 00 01             lda $100
001102  1  09 08 C9 FF          cmp_flag $ff
001106  1  F0 03 20 FF          trap_ne
00110A  1  FF           
00110B  1  A9 00 48 28          set_stat 0
00110F  1  9A                   txs
001110  1  08                   php
001111  1  AD 00 01             lda $100
001114  1  09 08 C9 38          cmp_flag 0
001118  1  F0 03 20 FF          trap_ne
00111C  1  FF           
00111D  1  CA                   dex             ;ff
00111E  1  A9 FF 48 28          set_stat $ff
001122  1  9A                   txs
001123  1  08                   php
001124  1  AD FF 01             lda $1ff
001127  1  09 08 C9 FF          cmp_flag $ff
00112B  1  F0 03 20 FF          trap_ne
00112F  1  FF           
001130  1  A9 00 48 28          set_stat 0
001134  1  9A                   txs
001135  1  08                   php
001136  1  AD FF 01             lda $1ff
001139  1  09 08 C9 38          cmp_flag 0
00113D  1               
00113D  1  A2 01                ldx #1
00113F  1  9A                   txs             ;sp=01
001140  1  A9 FF 48 28          set_stat $ff
001144  1  BA                   tsx             ;clears Z, N
001145  1  08                   php             ;sp=00
001146  1  E0 01                cpx #1
001148  1  F0 03 20 FF          trap_ne
00114C  1  FF           
00114D  1  AD 01 01             lda $101
001150  1  09 08 C9 7D          cmp_flag $ff-minus-zero
001154  1  F0 03 20 FF          trap_ne
001158  1  FF           
001159  1  A9 FF 48 28          set_stat $ff
00115D  1  BA                   tsx             ;clears N, sets Z
00115E  1  08                   php             ;sp=ff
00115F  1  E0 00                cpx #0
001161  1  F0 03 20 FF          trap_ne
001165  1  FF           
001166  1  AD 00 01             lda $100
001169  1  09 08 C9 7F          cmp_flag $ff-minus
00116D  1  F0 03 20 FF          trap_ne
001171  1  FF           
001172  1  A9 FF 48 28          set_stat $ff
001176  1  BA                   tsx             ;clears N, sets Z
001177  1  08                   php             ;sp=fe
001178  1  E0 FF                cpx #$ff
00117A  1  F0 03 20 FF          trap_ne
00117E  1  FF           
00117F  1  AD FF 01             lda $1ff
001182  1  09 08 C9 FD          cmp_flag $ff-zero
001186  1  F0 03 20 FF          trap_ne
00118A  1  FF           
00118B  1               
00118B  1  A2 01                ldx #1
00118D  1  9A                   txs             ;sp=01
00118E  1  A9 00 48 28          set_stat 0
001192  1  BA                   tsx             ;clears Z, N
001193  1  08                   php             ;sp=00
001194  1  E0 01                cpx #1
001196  1  F0 03 20 FF          trap_ne
00119A  1  FF           
00119B  1  AD 01 01             lda $101
00119E  1  09 08 C9 38          cmp_flag 0
0011A2  1  F0 03 20 FF          trap_ne
0011A6  1  FF           
0011A7  1  A9 00 48 28          set_stat 0
0011AB  1  BA                   tsx             ;clears N, sets Z
0011AC  1  08                   php             ;sp=ff
0011AD  1  E0 00                cpx #0
0011AF  1  F0 03 20 FF          trap_ne
0011B3  1  FF           
0011B4  1  AD 00 01             lda $100
0011B7  1  09 08 C9 3A          cmp_flag zero
0011BB  1  F0 03 20 FF          trap_ne
0011BF  1  FF           
0011C0  1  A9 00 48 28          set_stat 0
0011C4  1  BA                   tsx             ;clears N, sets Z
0011C5  1  08                   php             ;sp=fe
0011C6  1  E0 FF                cpx #$ff
0011C8  1  F0 03 20 FF          trap_ne
0011CC  1  FF           
0011CD  1  AD FF 01             lda $1ff
0011D0  1  09 08 C9 B8          cmp_flag minus
0011D4  1  F0 03 20 FF          trap_ne
0011D8  1  FF           
0011D9  1  68                   pla             ;sp=ff
0011DA  1  AD 00 02 C9          next_test
0011DE  1  0E F0 03 20  
0011E2  1  FF FF A9 0F  
0011E9  1               
0011E9  1               ; testing index register load & store LDY LDX STY STX all addressing modes
0011E9  1               ; LDX / STX - zp,y / abs,y
0011E9  1  A0 03                ldy #3
0011EB  1               tldx:
0011EB  1  A9 00 48 28          set_stat 0
0011EF  1  B6 13                ldx zp1,y
0011F1  1  08                   php         ;test stores do not alter flags
0011F2  1  8A                   txa
0011F3  1  49 C3                eor #$c3
0011F5  1  28                   plp
0011F6  1  99 03 02             sta abst,y
0011F9  1  08                   php         ;flags after load/store sequence
0011FA  1  49 C3                eor #$c3
0011FC  1  D9 17 02             cmp abs1,y  ;test result
0011FF  1  F0 03 20 FF          trap_ne
001203  1  FF           
001204  1  68                   pla         ;load status
001205  1  09 08 49 38          eor_flag 0
001209  1  D9 1C 02             cmp fLDx,y  ;test flags
00120C  1  F0 03 20 FF          trap_ne
001210  1  FF           
001211  1  88                   dey
001212  1  10 D7                bpl tldx
001214  1               
001214  1  A0 03                ldy #3
001216  1               tldx1:
001216  1  A9 FF 48 28          set_stat $ff
00121A  1  B6 13                ldx zp1,y
00121C  1  08                   php         ;test stores do not alter flags
00121D  1  8A                   txa
00121E  1  49 C3                eor #$c3
001220  1  28                   plp
001221  1  99 03 02             sta abst,y
001224  1  08                   php         ;flags after load/store sequence
001225  1  49 C3                eor #$c3
001227  1  D9 17 02             cmp abs1,y  ;test result
00122A  1  F0 03 20 FF          trap_ne
00122E  1  FF           
00122F  1  68                   pla         ;load status
001230  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001234  1  D9 1C 02             cmp fLDx,y  ;test flags
001237  1  F0 03 20 FF          trap_ne
00123B  1  FF           
00123C  1  88                   dey
00123D  1  10 D7                bpl tldx1
00123F  1               
00123F  1  A0 03                ldy #3
001241  1               tldx2:
001241  1  A9 00 48 28          set_stat 0
001245  1  BE 17 02             ldx abs1,y
001248  1  08                   php         ;test stores do not alter flags
001249  1  8A                   txa
00124A  1  49 C3                eor #$c3
00124C  1  AA                   tax
00124D  1  28                   plp
00124E  1  96 0C                stx zpt,y
001250  1  08                   php         ;flags after load/store sequence
001251  1  49 C3                eor #$c3
001253  1  D9 13 00             cmp zp1,y   ;test result
001256  1  F0 03 20 FF          trap_ne
00125A  1  FF           
00125B  1  68                   pla         ;load status
00125C  1  09 08 49 38          eor_flag 0
001260  1  D9 1C 02             cmp fLDx,y  ;test flags
001263  1  F0 03 20 FF          trap_ne
001267  1  FF           
001268  1  88                   dey
001269  1  10 D6                bpl tldx2
00126B  1               
00126B  1  A0 03                ldy #3
00126D  1               tldx3:
00126D  1  A9 FF 48 28          set_stat $ff
001271  1  BE 17 02             ldx abs1,y
001274  1  08                   php         ;test stores do not alter flags
001275  1  8A                   txa
001276  1  49 C3                eor #$c3
001278  1  AA                   tax
001279  1  28                   plp
00127A  1  96 0C                stx zpt,y
00127C  1  08                   php         ;flags after load/store sequence
00127D  1  49 C3                eor #$c3
00127F  1  D9 13 00             cmp zp1,y   ;test result
001282  1  F0 03 20 FF          trap_ne
001286  1  FF           
001287  1  68                   pla         ;load status
001288  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
00128C  1  D9 1C 02             cmp fLDx,y  ;test flags
00128F  1  F0 03 20 FF          trap_ne
001293  1  FF           
001294  1  88                   dey
001295  1  10 D6                bpl tldx3
001297  1               
001297  1  A0 03                ldy #3      ;testing store result
001299  1  A2 00                ldx #0
00129B  1  B9 0C 00     tstx:   lda zpt,y
00129E  1  49 C3                eor #$c3
0012A0  1  D9 13 00             cmp zp1,y
0012A3  1  F0 03 20 FF          trap_ne     ;store to zp data
0012A7  1  FF           
0012A8  1  96 0C                stx zpt,y   ;clear
0012AA  1  B9 03 02             lda abst,y
0012AD  1  49 C3                eor #$c3
0012AF  1  D9 17 02             cmp abs1,y
0012B2  1  F0 03 20 FF          trap_ne     ;store to abs data
0012B6  1  FF           
0012B7  1  8A                   txa
0012B8  1  99 03 02             sta abst,y  ;clear
0012BB  1  88                   dey
0012BC  1  10 DD                bpl tstx
0012BE  1  AD 00 02 C9          next_test
0012C2  1  0F F0 03 20  
0012C6  1  FF FF A9 10  
0012CD  1               
0012CD  1               ; indexed wraparound test (only zp should wrap)
0012CD  1  A0 FD                ldy #3+$fa
0012CF  1  B6 19        tldx4:  ldx <(zp1-$fa),y   ;wrap on indexed zp
0012D1  1  8A                   txa
0012D2  1  99 09 01             sta abst-$fa,y      ;no STX abs,y!
0012D5  1  88                   dey
0012D6  1  C0 FA                cpy #$fa
0012D8  1  B0 F5                bcs tldx4
0012DA  1  A0 FD                ldy #3+$fa
0012DC  1  BE 1D 01     tldx5:  ldx abs1-$fa,y      ;no wrap on indexed abs
0012DF  1  96 12                stx <(zpt-$fa),y
0012E1  1  88                   dey
0012E2  1  C0 FA                cpy #$fa
0012E4  1  B0 F6                bcs tldx5
0012E6  1  A0 03                ldy #3      ;testing wraparound result
0012E8  1  A2 00                ldx #0
0012EA  1  B9 0C 00     tstx1:  lda zpt,y
0012ED  1  D9 13 00             cmp zp1,y
0012F0  1  F0 03 20 FF          trap_ne     ;store to zp data
0012F4  1  FF           
0012F5  1  96 0C                stx zpt,y   ;clear
0012F7  1  B9 03 02             lda abst,y
0012FA  1  D9 17 02             cmp abs1,y
0012FD  1  F0 03 20 FF          trap_ne     ;store to abs data
001301  1  FF           
001302  1  8A                   txa
001303  1  99 03 02             sta abst,y  ;clear
001306  1  88                   dey
001307  1  10 E1                bpl tstx1
001309  1  AD 00 02 C9          next_test
00130D  1  10 F0 03 20  
001311  1  FF FF A9 11  
001318  1               
001318  1               ; LDY / STY - zp,x / abs,x
001318  1  A2 03                ldx #3
00131A  1               tldy:
00131A  1  A9 00 48 28          set_stat 0
00131E  1  B4 13                ldy zp1,x
001320  1  08                   php         ;test stores do not alter flags
001321  1  98                   tya
001322  1  49 C3                eor #$c3
001324  1  28                   plp
001325  1  9D 03 02             sta abst,x
001328  1  08                   php         ;flags after load/store sequence
001329  1  49 C3                eor #$c3
00132B  1  DD 17 02             cmp abs1,x  ;test result
00132E  1  F0 03 20 FF          trap_ne
001332  1  FF           
001333  1  68                   pla         ;load status
001334  1  09 08 49 38          eor_flag 0
001338  1  DD 1C 02             cmp fLDx,x  ;test flags
00133B  1  F0 03 20 FF          trap_ne
00133F  1  FF           
001340  1  CA                   dex
001341  1  10 D7                bpl tldy
001343  1               
001343  1  A2 03                ldx #3
001345  1               tldy1:
001345  1  A9 FF 48 28          set_stat $ff
001349  1  B4 13                ldy zp1,x
00134B  1  08                   php         ;test stores do not alter flags
00134C  1  98                   tya
00134D  1  49 C3                eor #$c3
00134F  1  28                   plp
001350  1  9D 03 02             sta abst,x
001353  1  08                   php         ;flags after load/store sequence
001354  1  49 C3                eor #$c3
001356  1  DD 17 02             cmp abs1,x  ;test result
001359  1  F0 03 20 FF          trap_ne
00135D  1  FF           
00135E  1  68                   pla         ;load status
00135F  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001363  1  DD 1C 02             cmp fLDx,x  ;test flags
001366  1  F0 03 20 FF          trap_ne
00136A  1  FF           
00136B  1  CA                   dex
00136C  1  10 D7                bpl tldy1
00136E  1               
00136E  1  A2 03                ldx #3
001370  1               tldy2:
001370  1  A9 00 48 28          set_stat 0
001374  1  BC 17 02             ldy abs1,x
001377  1  08                   php         ;test stores do not alter flags
001378  1  98                   tya
001379  1  49 C3                eor #$c3
00137B  1  A8                   tay
00137C  1  28                   plp
00137D  1  94 0C                sty zpt,x
00137F  1  08                   php         ;flags after load/store sequence
001380  1  49 C3                eor #$c3
001382  1  D5 13                cmp zp1,x   ;test result
001384  1  F0 03 20 FF          trap_ne
001388  1  FF           
001389  1  68                   pla         ;load status
00138A  1  09 08 49 38          eor_flag 0
00138E  1  DD 1C 02             cmp fLDx,x  ;test flags
001391  1  F0 03 20 FF          trap_ne
001395  1  FF           
001396  1  CA                   dex
001397  1  10 D7                bpl tldy2
001399  1               
001399  1  A2 03                ldx #3
00139B  1               tldy3:
00139B  1  A9 FF 48 28          set_stat $ff
00139F  1  BC 17 02             ldy abs1,x
0013A2  1  08                   php         ;test stores do not alter flags
0013A3  1  98                   tya
0013A4  1  49 C3                eor #$c3
0013A6  1  A8                   tay
0013A7  1  28                   plp
0013A8  1  94 0C                sty zpt,x
0013AA  1  08                   php         ;flags after load/store sequence
0013AB  1  49 C3                eor #$c3
0013AD  1  D5 13                cmp zp1,x   ;test result
0013AF  1  F0 03 20 FF          trap_ne
0013B3  1  FF           
0013B4  1  68                   pla         ;load status
0013B5  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0013B9  1  DD 1C 02             cmp fLDx,x  ;test flags
0013BC  1  F0 03 20 FF          trap_ne
0013C0  1  FF           
0013C1  1  CA                   dex
0013C2  1  10 D7                bpl tldy3
0013C4  1               
0013C4  1  A2 03                ldx #3      ;testing store result
0013C6  1  A0 00                ldy #0
0013C8  1  B5 0C        tsty:   lda zpt,x
0013CA  1  49 C3                eor #$c3
0013CC  1  D5 13                cmp zp1,x
0013CE  1  F0 03 20 FF          trap_ne     ;store to zp,x data
0013D2  1  FF           
0013D3  1  94 0C                sty zpt,x   ;clear
0013D5  1  BD 03 02             lda abst,x
0013D8  1  49 C3                eor #$c3
0013DA  1  DD 17 02             cmp abs1,x
0013DD  1  F0 03 20 FF          trap_ne     ;store to abs,x data
0013E1  1  FF           
0013E2  1  8A                   txa
0013E3  1  9D 03 02             sta abst,x  ;clear
0013E6  1  CA                   dex
0013E7  1  10 DF                bpl tsty
0013E9  1  AD 00 02 C9          next_test
0013ED  1  11 F0 03 20  
0013F1  1  FF FF A9 12  
0013F8  1               
0013F8  1               ; indexed wraparound test (only zp should wrap)
0013F8  1  A2 FD                ldx #3+$fa
0013FA  1  B4 19        tldy4:  ldy <(zp1-$fa),x   ;wrap on indexed zp
0013FC  1  98                   tya
0013FD  1  9D 09 01             sta abst-$fa,x      ;no STX abs,x!
001400  1  CA                   dex
001401  1  E0 FA                cpx #$fa
001403  1  B0 F5                bcs tldy4
001405  1  A2 FD                ldx #3+$fa
001407  1  BC 1D 01     tldy5:  ldy abs1-$fa,x      ;no wrap on indexed abs
00140A  1  94 12                sty <(zpt-$fa),x
00140C  1  CA                   dex
00140D  1  E0 FA                cpx #$fa
00140F  1  B0 F6                bcs tldy5
001411  1  A2 03                ldx #3      ;testing wraparound result
001413  1  A0 00                ldy #0
001415  1  B5 0C        tsty1:  lda zpt,x
001417  1  D5 13                cmp zp1,x
001419  1  F0 03 20 FF          trap_ne     ;store to zp,x data
00141D  1  FF           
00141E  1  94 0C                sty zpt,x   ;clear
001420  1  BD 03 02             lda abst,x
001423  1  DD 17 02             cmp abs1,x
001426  1  F0 03 20 FF          trap_ne     ;store to abs,x data
00142A  1  FF           
00142B  1  8A                   txa
00142C  1  9D 03 02             sta abst,x  ;clear
00142F  1  CA                   dex
001430  1  10 E3                bpl tsty1
001432  1  AD 00 02 C9          next_test
001436  1  12 F0 03 20  
00143A  1  FF FF A9 13  
001441  1               
001441  1               ; LDX / STX - zp / abs / #
001441  1  A9 00 48 28          set_stat 0
001445  1  A6 13                ldx zp1
001447  1  08                   php         ;test stores do not alter flags
001448  1  8A                   txa
001449  1  49 C3                eor #$c3
00144B  1  AA                   tax
00144C  1  28                   plp
00144D  1  8E 03 02             stx abst
001450  1  08                   php         ;flags after load/store sequence
001451  1  49 C3                eor #$c3
001453  1  AA                   tax
001454  1  E0 C3                cpx #$c3    ;test result
001456  1  F0 03 20 FF          trap_ne
00145A  1  FF           
00145B  1  68                   pla         ;load status
00145C  1  09 08 49 38          eor_flag 0
001460  1  CD 1C 02             cmp fLDx    ;test flags
001463  1  F0 03 20 FF          trap_ne
001467  1  FF           
001468  1  A9 00 48 28          set_stat 0
00146C  1  A6 14                ldx zp1+1
00146E  1  08                   php         ;test stores do not alter flags
00146F  1  8A                   txa
001470  1  49 C3                eor #$c3
001472  1  AA                   tax
001473  1  28                   plp
001474  1  8E 04 02             stx abst+1
001477  1  08                   php         ;flags after load/store sequence
001478  1  49 C3                eor #$c3
00147A  1  AA                   tax
00147B  1  E0 82                cpx #$82    ;test result
00147D  1  F0 03 20 FF          trap_ne
001481  1  FF           
001482  1  68                   pla         ;load status
001483  1  09 08 49 38          eor_flag 0
001487  1  CD 1D 02             cmp fLDx+1  ;test flags
00148A  1  F0 03 20 FF          trap_ne
00148E  1  FF           
00148F  1  A9 00 48 28          set_stat 0
001493  1  A6 15                ldx zp1+2
001495  1  08                   php         ;test stores do not alter flags
001496  1  8A                   txa
001497  1  49 C3                eor #$c3
001499  1  AA                   tax
00149A  1  28                   plp
00149B  1  8E 05 02             stx abst+2
00149E  1  08                   php         ;flags after load/store sequence
00149F  1  49 C3                eor #$c3
0014A1  1  AA                   tax
0014A2  1  E0 41                cpx #$41    ;test result
0014A4  1  F0 03 20 FF          trap_ne
0014A8  1  FF           
0014A9  1  68                   pla         ;load status
0014AA  1  09 08 49 38          eor_flag 0
0014AE  1  CD 1E 02             cmp fLDx+2  ;test flags
0014B1  1  F0 03 20 FF          trap_ne
0014B5  1  FF           
0014B6  1  A9 00 48 28          set_stat 0
0014BA  1  A6 16                ldx zp1+3
0014BC  1  08                   php         ;test stores do not alter flags
0014BD  1  8A                   txa
0014BE  1  49 C3                eor #$c3
0014C0  1  AA                   tax
0014C1  1  28                   plp
0014C2  1  8E 06 02             stx abst+3
0014C5  1  08                   php         ;flags after load/store sequence
0014C6  1  49 C3                eor #$c3
0014C8  1  AA                   tax
0014C9  1  E0 00                cpx #0      ;test result
0014CB  1  F0 03 20 FF          trap_ne
0014CF  1  FF           
0014D0  1  68                   pla         ;load status
0014D1  1  09 08 49 38          eor_flag 0
0014D5  1  CD 1F 02             cmp fLDx+3  ;test flags
0014D8  1  F0 03 20 FF          trap_ne
0014DC  1  FF           
0014DD  1               
0014DD  1  A9 FF 48 28          set_stat $ff
0014E1  1  A6 13                ldx zp1
0014E3  1  08                   php         ;test stores do not alter flags
0014E4  1  8A                   txa
0014E5  1  49 C3                eor #$c3
0014E7  1  AA                   tax
0014E8  1  28                   plp
0014E9  1  8E 03 02             stx abst
0014EC  1  08                   php         ;flags after load/store sequence
0014ED  1  49 C3                eor #$c3
0014EF  1  AA                   tax
0014F0  1  E0 C3                cpx #$c3    ;test result
0014F2  1  F0 03 20 FF          trap_ne     ;
0014F6  1  FF           
0014F7  1  68                   pla         ;load status
0014F8  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0014FC  1  CD 1C 02             cmp fLDx    ;test flags
0014FF  1  F0 03 20 FF          trap_ne
001503  1  FF           
001504  1  A9 FF 48 28          set_stat $ff
001508  1  A6 14                ldx zp1+1
00150A  1  08                   php         ;test stores do not alter flags
00150B  1  8A                   txa
00150C  1  49 C3                eor #$c3
00150E  1  AA                   tax
00150F  1  28                   plp
001510  1  8E 04 02             stx abst+1
001513  1  08                   php         ;flags after load/store sequence
001514  1  49 C3                eor #$c3
001516  1  AA                   tax
001517  1  E0 82                cpx #$82    ;test result
001519  1  F0 03 20 FF          trap_ne
00151D  1  FF           
00151E  1  68                   pla         ;load status
00151F  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001523  1  CD 1D 02             cmp fLDx+1  ;test flags
001526  1  F0 03 20 FF          trap_ne
00152A  1  FF           
00152B  1  A9 FF 48 28          set_stat $ff
00152F  1  A6 15                ldx zp1+2
001531  1  08                   php         ;test stores do not alter flags
001532  1  8A                   txa
001533  1  49 C3                eor #$c3
001535  1  AA                   tax
001536  1  28                   plp
001537  1  8E 05 02             stx abst+2
00153A  1  08                   php         ;flags after load/store sequence
00153B  1  49 C3                eor #$c3
00153D  1  AA                   tax
00153E  1  E0 41                cpx #$41    ;test result
001540  1  F0 03 20 FF          trap_ne     ;
001544  1  FF           
001545  1  68                   pla         ;load status
001546  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
00154A  1  CD 1E 02             cmp fLDx+2  ;test flags
00154D  1  F0 03 20 FF          trap_ne
001551  1  FF           
001552  1  A9 FF 48 28          set_stat $ff
001556  1  A6 16                ldx zp1+3
001558  1  08                   php         ;test stores do not alter flags
001559  1  8A                   txa
00155A  1  49 C3                eor #$c3
00155C  1  AA                   tax
00155D  1  28                   plp
00155E  1  8E 06 02             stx abst+3
001561  1  08                   php         ;flags after load/store sequence
001562  1  49 C3                eor #$c3
001564  1  AA                   tax
001565  1  E0 00                cpx #0      ;test result
001567  1  F0 03 20 FF          trap_ne
00156B  1  FF           
00156C  1  68                   pla         ;load status
00156D  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001571  1  CD 1F 02             cmp fLDx+3  ;test flags
001574  1  F0 03 20 FF          trap_ne
001578  1  FF           
001579  1               
001579  1  A9 00 48 28          set_stat 0
00157D  1  AE 17 02             ldx abs1
001580  1  08                   php         ;test stores do not alter flags
001581  1  8A                   txa
001582  1  49 C3                eor #$c3
001584  1  AA                   tax
001585  1  28                   plp
001586  1  86 0C                stx zpt
001588  1  08                   php         ;flags after load/store sequence
001589  1  49 C3                eor #$c3
00158B  1  C5 13                cmp zp1     ;test result
00158D  1  F0 03 20 FF          trap_ne
001591  1  FF           
001592  1  68                   pla         ;load status
001593  1  09 08 49 38          eor_flag 0
001597  1  CD 1C 02             cmp fLDx    ;test flags
00159A  1  F0 03 20 FF          trap_ne
00159E  1  FF           
00159F  1  A9 00 48 28          set_stat 0
0015A3  1  AE 18 02             ldx abs1+1
0015A6  1  08                   php         ;test stores do not alter flags
0015A7  1  8A                   txa
0015A8  1  49 C3                eor #$c3
0015AA  1  AA                   tax
0015AB  1  28                   plp
0015AC  1  86 0D                stx zpt+1
0015AE  1  08                   php         ;flags after load/store sequence
0015AF  1  49 C3                eor #$c3
0015B1  1  C5 14                cmp zp1+1   ;test result
0015B3  1  F0 03 20 FF          trap_ne
0015B7  1  FF           
0015B8  1  68                   pla         ;load status
0015B9  1  09 08 49 38          eor_flag 0
0015BD  1  CD 1D 02             cmp fLDx+1  ;test flags
0015C0  1  F0 03 20 FF          trap_ne
0015C4  1  FF           
0015C5  1  A9 00 48 28          set_stat 0
0015C9  1  AE 19 02             ldx abs1+2
0015CC  1  08                   php         ;test stores do not alter flags
0015CD  1  8A                   txa
0015CE  1  49 C3                eor #$c3
0015D0  1  AA                   tax
0015D1  1  28                   plp
0015D2  1  86 0E                stx zpt+2
0015D4  1  08                   php         ;flags after load/store sequence
0015D5  1  49 C3                eor #$c3
0015D7  1  C5 15                cmp zp1+2   ;test result
0015D9  1  F0 03 20 FF          trap_ne
0015DD  1  FF           
0015DE  1  68                   pla         ;load status
0015DF  1  09 08 49 38          eor_flag 0
0015E3  1  CD 1E 02             cmp fLDx+2  ;test flags
0015E6  1  F0 03 20 FF          trap_ne
0015EA  1  FF           
0015EB  1  A9 00 48 28          set_stat 0
0015EF  1  AE 1A 02             ldx abs1+3
0015F2  1  08                   php         ;test stores do not alter flags
0015F3  1  8A                   txa
0015F4  1  49 C3                eor #$c3
0015F6  1  AA                   tax
0015F7  1  28                   plp
0015F8  1  86 0F                stx zpt+3
0015FA  1  08                   php         ;flags after load/store sequence
0015FB  1  49 C3                eor #$c3
0015FD  1  C5 16                cmp zp1+3   ;test result
0015FF  1  F0 03 20 FF          trap_ne
001603  1  FF           
001604  1  68                   pla         ;load status
001605  1  09 08 49 38          eor_flag 0
001609  1  CD 1F 02             cmp fLDx+3  ;test flags
00160C  1  F0 03 20 FF          trap_ne
001610  1  FF           
001611  1               
001611  1  A9 FF 48 28          set_stat $ff
001615  1  AE 17 02             ldx abs1
001618  1  08                   php         ;test stores do not alter flags
001619  1  8A                   txa
00161A  1  49 C3                eor #$c3
00161C  1  AA                   tax
00161D  1  28                   plp
00161E  1  86 0C                stx zpt
001620  1  08                   php         ;flags after load/store sequence
001621  1  49 C3                eor #$c3
001623  1  AA                   tax
001624  1  E4 13                cpx zp1     ;test result
001626  1  F0 03 20 FF          trap_ne
00162A  1  FF           
00162B  1  68                   pla         ;load status
00162C  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001630  1  CD 1C 02             cmp fLDx    ;test flags
001633  1  F0 03 20 FF          trap_ne
001637  1  FF           
001638  1  A9 FF 48 28          set_stat $ff
00163C  1  AE 18 02             ldx abs1+1
00163F  1  08                   php         ;test stores do not alter flags
001640  1  8A                   txa
001641  1  49 C3                eor #$c3
001643  1  AA                   tax
001644  1  28                   plp
001645  1  86 0D                stx zpt+1
001647  1  08                   php         ;flags after load/store sequence
001648  1  49 C3                eor #$c3
00164A  1  AA                   tax
00164B  1  E4 14                cpx zp1+1   ;test result
00164D  1  F0 03 20 FF          trap_ne
001651  1  FF           
001652  1  68                   pla         ;load status
001653  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001657  1  CD 1D 02             cmp fLDx+1  ;test flags
00165A  1  F0 03 20 FF          trap_ne
00165E  1  FF           
00165F  1  A9 FF 48 28          set_stat $ff
001663  1  AE 19 02             ldx abs1+2
001666  1  08                   php         ;test stores do not alter flags
001667  1  8A                   txa
001668  1  49 C3                eor #$c3
00166A  1  AA                   tax
00166B  1  28                   plp
00166C  1  86 0E                stx zpt+2
00166E  1  08                   php         ;flags after load/store sequence
00166F  1  49 C3                eor #$c3
001671  1  AA                   tax
001672  1  E4 15                cpx zp1+2   ;test result
001674  1  F0 03 20 FF          trap_ne
001678  1  FF           
001679  1  68                   pla         ;load status
00167A  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
00167E  1  CD 1E 02             cmp fLDx+2  ;test flags
001681  1  F0 03 20 FF          trap_ne
001685  1  FF           
001686  1  A9 FF 48 28          set_stat $ff
00168A  1  AE 1A 02             ldx abs1+3
00168D  1  08                   php         ;test stores do not alter flags
00168E  1  8A                   txa
00168F  1  49 C3                eor #$c3
001691  1  AA                   tax
001692  1  28                   plp
001693  1  86 0F                stx zpt+3
001695  1  08                   php         ;flags after load/store sequence
001696  1  49 C3                eor #$c3
001698  1  AA                   tax
001699  1  E4 16                cpx zp1+3   ;test result
00169B  1  F0 03 20 FF          trap_ne
00169F  1  FF           
0016A0  1  68                   pla         ;load status
0016A1  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0016A5  1  CD 1F 02             cmp fLDx+3  ;test flags
0016A8  1  F0 03 20 FF          trap_ne
0016AC  1  FF           
0016AD  1               
0016AD  1  A9 00 48 28          set_stat 0
0016B1  1  A2 C3                ldx #$c3
0016B3  1  08                   php
0016B4  1  EC 17 02             cpx abs1    ;test result
0016B7  1  F0 03 20 FF          trap_ne
0016BB  1  FF           
0016BC  1  68                   pla         ;load status
0016BD  1  09 08 49 38          eor_flag 0
0016C1  1  CD 1C 02             cmp fLDx    ;test flags
0016C4  1  F0 03 20 FF          trap_ne
0016C8  1  FF           
0016C9  1  A9 00 48 28          set_stat 0
0016CD  1  A2 82                ldx #$82
0016CF  1  08                   php
0016D0  1  EC 18 02             cpx abs1+1  ;test result
0016D3  1  F0 03 20 FF          trap_ne
0016D7  1  FF           
0016D8  1  68                   pla         ;load status
0016D9  1  09 08 49 38          eor_flag 0
0016DD  1  CD 1D 02             cmp fLDx+1  ;test flags
0016E0  1  F0 03 20 FF          trap_ne
0016E4  1  FF           
0016E5  1  A9 00 48 28          set_stat 0
0016E9  1  A2 41                ldx #$41
0016EB  1  08                   php
0016EC  1  EC 19 02             cpx abs1+2  ;test result
0016EF  1  F0 03 20 FF          trap_ne
0016F3  1  FF           
0016F4  1  68                   pla         ;load status
0016F5  1  09 08 49 38          eor_flag 0
0016F9  1  CD 1E 02             cmp fLDx+2  ;test flags
0016FC  1  F0 03 20 FF          trap_ne
001700  1  FF           
001701  1  A9 00 48 28          set_stat 0
001705  1  A2 00                ldx #0
001707  1  08                   php
001708  1  EC 1A 02             cpx abs1+3  ;test result
00170B  1  F0 03 20 FF          trap_ne
00170F  1  FF           
001710  1  68                   pla         ;load status
001711  1  09 08 49 38          eor_flag 0
001715  1  CD 1F 02             cmp fLDx+3  ;test flags
001718  1  F0 03 20 FF          trap_ne
00171C  1  FF           
00171D  1               
00171D  1  A9 FF 48 28          set_stat $ff
001721  1  A2 C3                ldx #$c3
001723  1  08                   php
001724  1  EC 17 02             cpx abs1    ;test result
001727  1  F0 03 20 FF          trap_ne
00172B  1  FF           
00172C  1  68                   pla         ;load status
00172D  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001731  1  CD 1C 02             cmp fLDx    ;test flags
001734  1  F0 03 20 FF          trap_ne
001738  1  FF           
001739  1  A9 FF 48 28          set_stat $ff
00173D  1  A2 82                ldx #$82
00173F  1  08                   php
001740  1  EC 18 02             cpx abs1+1  ;test result
001743  1  F0 03 20 FF          trap_ne
001747  1  FF           
001748  1  68                   pla         ;load status
001749  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
00174D  1  CD 1D 02             cmp fLDx+1  ;test flags
001750  1  F0 03 20 FF          trap_ne
001754  1  FF           
001755  1  A9 FF 48 28          set_stat $ff
001759  1  A2 41                ldx #$41
00175B  1  08                   php
00175C  1  EC 19 02             cpx abs1+2  ;test result
00175F  1  F0 03 20 FF          trap_ne
001763  1  FF           
001764  1  68                   pla         ;load status
001765  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001769  1  CD 1E 02             cmp fLDx+2  ;test flags
00176C  1  F0 03 20 FF          trap_ne
001770  1  FF           
001771  1  A9 FF 48 28          set_stat $ff
001775  1  A2 00                ldx #0
001777  1  08                   php
001778  1  EC 1A 02             cpx abs1+3  ;test result
00177B  1  F0 03 20 FF          trap_ne
00177F  1  FF           
001780  1  68                   pla         ;load status
001781  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001785  1  CD 1F 02             cmp fLDx+3  ;test flags
001788  1  F0 03 20 FF          trap_ne
00178C  1  FF           
00178D  1               
00178D  1  A2 00                ldx #0
00178F  1  A5 0C                lda zpt
001791  1  49 C3                eor #$c3
001793  1  C5 13                cmp zp1
001795  1  F0 03 20 FF          trap_ne     ;store to zp data
001799  1  FF           
00179A  1  86 0C                stx zpt     ;clear
00179C  1  AD 03 02             lda abst
00179F  1  49 C3                eor #$c3
0017A1  1  CD 17 02             cmp abs1
0017A4  1  F0 03 20 FF          trap_ne     ;store to abs data
0017A8  1  FF           
0017A9  1  8E 03 02             stx abst    ;clear
0017AC  1  A5 0D                lda zpt+1
0017AE  1  49 C3                eor #$c3
0017B0  1  C5 14                cmp zp1+1
0017B2  1  F0 03 20 FF          trap_ne     ;store to zp data
0017B6  1  FF           
0017B7  1  86 0D                stx zpt+1   ;clear
0017B9  1  AD 04 02             lda abst+1
0017BC  1  49 C3                eor #$c3
0017BE  1  CD 18 02             cmp abs1+1
0017C1  1  F0 03 20 FF          trap_ne     ;store to abs data
0017C5  1  FF           
0017C6  1  8E 04 02             stx abst+1  ;clear
0017C9  1  A5 0E                lda zpt+2
0017CB  1  49 C3                eor #$c3
0017CD  1  C5 15                cmp zp1+2
0017CF  1  F0 03 20 FF          trap_ne     ;store to zp data
0017D3  1  FF           
0017D4  1  86 0E                stx zpt+2   ;clear
0017D6  1  AD 05 02             lda abst+2
0017D9  1  49 C3                eor #$c3
0017DB  1  CD 19 02             cmp abs1+2
0017DE  1  F0 03 20 FF          trap_ne     ;store to abs data
0017E2  1  FF           
0017E3  1  8E 05 02             stx abst+2  ;clear
0017E6  1  A5 0F                lda zpt+3
0017E8  1  49 C3                eor #$c3
0017EA  1  C5 16                cmp zp1+3
0017EC  1  F0 03 20 FF          trap_ne     ;store to zp data
0017F0  1  FF           
0017F1  1  86 0F                stx zpt+3   ;clear
0017F3  1  AD 06 02             lda abst+3
0017F6  1  49 C3                eor #$c3
0017F8  1  CD 1A 02             cmp abs1+3
0017FB  1  F0 03 20 FF          trap_ne     ;store to abs data
0017FF  1  FF           
001800  1  8E 06 02             stx abst+3  ;clear
001803  1  AD 00 02 C9          next_test
001807  1  13 F0 03 20  
00180B  1  FF FF A9 14  
001812  1               
001812  1               ; LDY / STY - zp / abs / #
001812  1  A9 00 48 28          set_stat 0
001816  1  A4 13                ldy zp1
001818  1  08                   php         ;test stores do not alter flags
001819  1  98                   tya
00181A  1  49 C3                eor #$c3
00181C  1  A8                   tay
00181D  1  28                   plp
00181E  1  8C 03 02             sty abst
001821  1  08                   php         ;flags after load/store sequence
001822  1  49 C3                eor #$c3
001824  1  A8                   tay
001825  1  C0 C3                cpy #$c3    ;test result
001827  1  F0 03 20 FF          trap_ne
00182B  1  FF           
00182C  1  68                   pla         ;load status
00182D  1  09 08 49 38          eor_flag 0
001831  1  CD 1C 02             cmp fLDx    ;test flags
001834  1  F0 03 20 FF          trap_ne
001838  1  FF           
001839  1  A9 00 48 28          set_stat 0
00183D  1  A4 14                ldy zp1+1
00183F  1  08                   php         ;test stores do not alter flags
001840  1  98                   tya
001841  1  49 C3                eor #$c3
001843  1  A8                   tay
001844  1  28                   plp
001845  1  8C 04 02             sty abst+1
001848  1  08                   php         ;flags after load/store sequence
001849  1  49 C3                eor #$c3
00184B  1  A8                   tay
00184C  1  C0 82                cpy #$82    ;test result
00184E  1  F0 03 20 FF          trap_ne
001852  1  FF           
001853  1  68                   pla         ;load status
001854  1  09 08 49 38          eor_flag 0
001858  1  CD 1D 02             cmp fLDx+1  ;test flags
00185B  1  F0 03 20 FF          trap_ne
00185F  1  FF           
001860  1  A9 00 48 28          set_stat 0
001864  1  A4 15                ldy zp1+2
001866  1  08                   php         ;test stores do not alter flags
001867  1  98                   tya
001868  1  49 C3                eor #$c3
00186A  1  A8                   tay
00186B  1  28                   plp
00186C  1  8C 05 02             sty abst+2
00186F  1  08                   php         ;flags after load/store sequence
001870  1  49 C3                eor #$c3
001872  1  A8                   tay
001873  1  C0 41                cpy #$41    ;test result
001875  1  F0 03 20 FF          trap_ne
001879  1  FF           
00187A  1  68                   pla         ;load status
00187B  1  09 08 49 38          eor_flag 0
00187F  1  CD 1E 02             cmp fLDx+2  ;test flags
001882  1  F0 03 20 FF          trap_ne
001886  1  FF           
001887  1  A9 00 48 28          set_stat 0
00188B  1  A4 16                ldy zp1+3
00188D  1  08                   php         ;test stores do not alter flags
00188E  1  98                   tya
00188F  1  49 C3                eor #$c3
001891  1  A8                   tay
001892  1  28                   plp
001893  1  8C 06 02             sty abst+3
001896  1  08                   php         ;flags after load/store sequence
001897  1  49 C3                eor #$c3
001899  1  A8                   tay
00189A  1  C0 00                cpy #0      ;test result
00189C  1  F0 03 20 FF          trap_ne
0018A0  1  FF           
0018A1  1  68                   pla         ;load status
0018A2  1  09 08 49 38          eor_flag 0
0018A6  1  CD 1F 02             cmp fLDx+3  ;test flags
0018A9  1  F0 03 20 FF          trap_ne
0018AD  1  FF           
0018AE  1               
0018AE  1  A9 FF 48 28          set_stat $ff
0018B2  1  A4 13                ldy zp1
0018B4  1  08                   php         ;test stores do not alter flags
0018B5  1  98                   tya
0018B6  1  49 C3                eor #$c3
0018B8  1  A8                   tay
0018B9  1  28                   plp
0018BA  1  8C 03 02             sty abst
0018BD  1  08                   php         ;flags after load/store sequence
0018BE  1  49 C3                eor #$c3
0018C0  1  A8                   tay
0018C1  1  C0 C3                cpy #$c3    ;test result
0018C3  1  F0 03 20 FF          trap_ne
0018C7  1  FF           
0018C8  1  68                   pla         ;load status
0018C9  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0018CD  1  CD 1C 02             cmp fLDx    ;test flags
0018D0  1  F0 03 20 FF          trap_ne
0018D4  1  FF           
0018D5  1  A9 FF 48 28          set_stat $ff
0018D9  1  A4 14                ldy zp1+1
0018DB  1  08                   php         ;test stores do not alter flags
0018DC  1  98                   tya
0018DD  1  49 C3                eor #$c3
0018DF  1  A8                   tay
0018E0  1  28                   plp
0018E1  1  8C 04 02             sty abst+1
0018E4  1  08                   php         ;flags after load/store sequence
0018E5  1  49 C3                eor #$c3
0018E7  1  A8                   tay
0018E8  1  C0 82                cpy #$82   ;test result
0018EA  1  F0 03 20 FF          trap_ne
0018EE  1  FF           
0018EF  1  68                   pla         ;load status
0018F0  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0018F4  1  CD 1D 02             cmp fLDx+1  ;test flags
0018F7  1  F0 03 20 FF          trap_ne
0018FB  1  FF           
0018FC  1  A9 FF 48 28          set_stat $ff
001900  1  A4 15                ldy zp1+2
001902  1  08                   php         ;test stores do not alter flags
001903  1  98                   tya
001904  1  49 C3                eor #$c3
001906  1  A8                   tay
001907  1  28                   plp
001908  1  8C 05 02             sty abst+2
00190B  1  08                   php         ;flags after load/store sequence
00190C  1  49 C3                eor #$c3
00190E  1  A8                   tay
00190F  1  C0 41                cpy #$41    ;test result
001911  1  F0 03 20 FF          trap_ne
001915  1  FF           
001916  1  68                   pla         ;load status
001917  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
00191B  1  CD 1E 02             cmp fLDx+2  ;test flags
00191E  1  F0 03 20 FF          trap_ne
001922  1  FF           
001923  1  A9 FF 48 28          set_stat $ff
001927  1  A4 16                ldy zp1+3
001929  1  08                   php         ;test stores do not alter flags
00192A  1  98                   tya
00192B  1  49 C3                eor #$c3
00192D  1  A8                   tay
00192E  1  28                   plp
00192F  1  8C 06 02             sty abst+3
001932  1  08                   php         ;flags after load/store sequence
001933  1  49 C3                eor #$c3
001935  1  A8                   tay
001936  1  C0 00                cpy #0      ;test result
001938  1  F0 03 20 FF          trap_ne
00193C  1  FF           
00193D  1  68                   pla         ;load status
00193E  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001942  1  CD 1F 02             cmp fLDx+3  ;test flags
001945  1  F0 03 20 FF          trap_ne
001949  1  FF           
00194A  1               
00194A  1  A9 00 48 28          set_stat 0
00194E  1  AC 17 02             ldy abs1
001951  1  08                   php         ;test stores do not alter flags
001952  1  98                   tya
001953  1  49 C3                eor #$c3
001955  1  A8                   tay
001956  1  28                   plp
001957  1  84 0C                sty zpt
001959  1  08                   php         ;flags after load/store sequence
00195A  1  49 C3                eor #$c3
00195C  1  A8                   tay
00195D  1  C4 13                cpy zp1     ;test result
00195F  1  F0 03 20 FF          trap_ne
001963  1  FF           
001964  1  68                   pla         ;load status
001965  1  09 08 49 38          eor_flag 0
001969  1  CD 1C 02             cmp fLDx    ;test flags
00196C  1  F0 03 20 FF          trap_ne
001970  1  FF           
001971  1  A9 00 48 28          set_stat 0
001975  1  AC 18 02             ldy abs1+1
001978  1  08                   php         ;test stores do not alter flags
001979  1  98                   tya
00197A  1  49 C3                eor #$c3
00197C  1  A8                   tay
00197D  1  28                   plp
00197E  1  84 0D                sty zpt+1
001980  1  08                   php         ;flags after load/store sequence
001981  1  49 C3                eor #$c3
001983  1  A8                   tay
001984  1  C4 14                cpy zp1+1   ;test result
001986  1  F0 03 20 FF          trap_ne
00198A  1  FF           
00198B  1  68                   pla         ;load status
00198C  1  09 08 49 38          eor_flag 0
001990  1  CD 1D 02             cmp fLDx+1  ;test flags
001993  1  F0 03 20 FF          trap_ne
001997  1  FF           
001998  1  A9 00 48 28          set_stat 0
00199C  1  AC 19 02             ldy abs1+2
00199F  1  08                   php         ;test stores do not alter flags
0019A0  1  98                   tya
0019A1  1  49 C3                eor #$c3
0019A3  1  A8                   tay
0019A4  1  28                   plp
0019A5  1  84 0E                sty zpt+2
0019A7  1  08                   php         ;flags after load/store sequence
0019A8  1  49 C3                eor #$c3
0019AA  1  A8                   tay
0019AB  1  C4 15                cpy zp1+2   ;test result
0019AD  1  F0 03 20 FF          trap_ne
0019B1  1  FF           
0019B2  1  68                   pla         ;load status
0019B3  1  09 08 49 38          eor_flag 0
0019B7  1  CD 1E 02             cmp fLDx+2  ;test flags
0019BA  1  F0 03 20 FF          trap_ne
0019BE  1  FF           
0019BF  1  A9 00 48 28          set_stat 0
0019C3  1  AC 1A 02             ldy abs1+3
0019C6  1  08                   php         ;test stores do not alter flags
0019C7  1  98                   tya
0019C8  1  49 C3                eor #$c3
0019CA  1  A8                   tay
0019CB  1  28                   plp
0019CC  1  84 0F                sty zpt+3
0019CE  1  08                   php         ;flags after load/store sequence
0019CF  1  49 C3                eor #$c3
0019D1  1  A8                   tay
0019D2  1  C4 16                cpy zp1+3   ;test result
0019D4  1  F0 03 20 FF          trap_ne
0019D8  1  FF           
0019D9  1  68                   pla         ;load status
0019DA  1  09 08 49 38          eor_flag 0
0019DE  1  CD 1F 02             cmp fLDx+3  ;test flags
0019E1  1  F0 03 20 FF          trap_ne
0019E5  1  FF           
0019E6  1               
0019E6  1  A9 FF 48 28          set_stat $ff
0019EA  1  AC 17 02             ldy abs1
0019ED  1  08                   php         ;test stores do not alter flags
0019EE  1  98                   tya
0019EF  1  49 C3                eor #$c3
0019F1  1  A8                   tay
0019F2  1  28                   plp
0019F3  1  84 0C                sty zpt
0019F5  1  08                   php         ;flags after load/store sequence
0019F6  1  49 C3                eor #$c3
0019F8  1  A8                   tay
0019F9  1  C5 13                cmp zp1     ;test result
0019FB  1  F0 03 20 FF          trap_ne
0019FF  1  FF           
001A00  1  68                   pla         ;load status
001A01  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001A05  1  CD 1C 02             cmp fLDx    ;test flags
001A08  1  F0 03 20 FF          trap_ne
001A0C  1  FF           
001A0D  1  A9 FF 48 28          set_stat $ff
001A11  1  AC 18 02             ldy abs1+1
001A14  1  08                   php         ;test stores do not alter flags
001A15  1  98                   tya
001A16  1  49 C3                eor #$c3
001A18  1  A8                   tay
001A19  1  28                   plp
001A1A  1  84 0D                sty zpt+1
001A1C  1  08                   php         ;flags after load/store sequence
001A1D  1  49 C3                eor #$c3
001A1F  1  A8                   tay
001A20  1  C5 14                cmp zp1+1   ;test result
001A22  1  F0 03 20 FF          trap_ne
001A26  1  FF           
001A27  1  68                   pla         ;load status
001A28  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001A2C  1  CD 1D 02             cmp fLDx+1  ;test flags
001A2F  1  F0 03 20 FF          trap_ne
001A33  1  FF           
001A34  1  A9 FF 48 28          set_stat $ff
001A38  1  AC 19 02             ldy abs1+2
001A3B  1  08                   php         ;test stores do not alter flags
001A3C  1  98                   tya
001A3D  1  49 C3                eor #$c3
001A3F  1  A8                   tay
001A40  1  28                   plp
001A41  1  84 0E                sty zpt+2
001A43  1  08                   php         ;flags after load/store sequence
001A44  1  49 C3                eor #$c3
001A46  1  A8                   tay
001A47  1  C5 15                cmp zp1+2   ;test result
001A49  1  F0 03 20 FF          trap_ne
001A4D  1  FF           
001A4E  1  68                   pla         ;load status
001A4F  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001A53  1  CD 1E 02             cmp fLDx+2  ;test flags
001A56  1  F0 03 20 FF          trap_ne
001A5A  1  FF           
001A5B  1  A9 FF 48 28          set_stat $ff
001A5F  1  AC 1A 02             ldy abs1+3
001A62  1  08                   php         ;test stores do not alter flags
001A63  1  98                   tya
001A64  1  49 C3                eor #$c3
001A66  1  A8                   tay
001A67  1  28                   plp
001A68  1  84 0F                sty zpt+3
001A6A  1  08                   php         ;flags after load/store sequence
001A6B  1  49 C3                eor #$c3
001A6D  1  A8                   tay
001A6E  1  C5 16                cmp zp1+3   ;test result
001A70  1  F0 03 20 FF          trap_ne
001A74  1  FF           
001A75  1  68                   pla         ;load status
001A76  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001A7A  1  CD 1F 02             cmp fLDx+3  ;test flags
001A7D  1  F0 03 20 FF          trap_ne
001A81  1  FF           
001A82  1               
001A82  1               
001A82  1  A9 00 48 28          set_stat 0
001A86  1  A0 C3                ldy #$c3
001A88  1  08                   php
001A89  1  CC 17 02             cpy abs1    ;test result
001A8C  1  F0 03 20 FF          trap_ne
001A90  1  FF           
001A91  1  68                   pla         ;load status
001A92  1  09 08 49 38          eor_flag 0
001A96  1  CD 1C 02             cmp fLDx    ;test flags
001A99  1  F0 03 20 FF          trap_ne
001A9D  1  FF           
001A9E  1  A9 00 48 28          set_stat 0
001AA2  1  A0 82                ldy #$82
001AA4  1  08                   php
001AA5  1  CC 18 02             cpy abs1+1  ;test result
001AA8  1  F0 03 20 FF          trap_ne
001AAC  1  FF           
001AAD  1  68                   pla         ;load status
001AAE  1  09 08 49 38          eor_flag 0
001AB2  1  CD 1D 02             cmp fLDx+1  ;test flags
001AB5  1  F0 03 20 FF          trap_ne
001AB9  1  FF           
001ABA  1  A9 00 48 28          set_stat 0
001ABE  1  A0 41                ldy #$41
001AC0  1  08                   php
001AC1  1  CC 19 02             cpy abs1+2  ;test result
001AC4  1  F0 03 20 FF          trap_ne
001AC8  1  FF           
001AC9  1  68                   pla         ;load status
001ACA  1  09 08 49 38          eor_flag 0
001ACE  1  CD 1E 02             cmp fLDx+2  ;test flags
001AD1  1  F0 03 20 FF          trap_ne
001AD5  1  FF           
001AD6  1  A9 00 48 28          set_stat 0
001ADA  1  A0 00                ldy #0
001ADC  1  08                   php
001ADD  1  CC 1A 02             cpy abs1+3  ;test result
001AE0  1  F0 03 20 FF          trap_ne
001AE4  1  FF           
001AE5  1  68                   pla         ;load status
001AE6  1  09 08 49 38          eor_flag 0
001AEA  1  CD 1F 02             cmp fLDx+3  ;test flags
001AED  1  F0 03 20 FF          trap_ne
001AF1  1  FF           
001AF2  1               
001AF2  1  A9 FF 48 28          set_stat $ff
001AF6  1  A0 C3                ldy #$c3
001AF8  1  08                   php
001AF9  1  CC 17 02             cpy abs1    ;test result
001AFC  1  F0 03 20 FF          trap_ne
001B00  1  FF           
001B01  1  68                   pla         ;load status
001B02  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001B06  1  CD 1C 02             cmp fLDx    ;test flags
001B09  1  F0 03 20 FF          trap_ne
001B0D  1  FF           
001B0E  1  A9 FF 48 28          set_stat $ff
001B12  1  A0 82                ldy #$82
001B14  1  08                   php
001B15  1  CC 18 02             cpy abs1+1  ;test result
001B18  1  F0 03 20 FF          trap_ne
001B1C  1  FF           
001B1D  1  68                   pla         ;load status
001B1E  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001B22  1  CD 1D 02             cmp fLDx+1  ;test flags
001B25  1  F0 03 20 FF          trap_ne
001B29  1  FF           
001B2A  1  A9 FF 48 28          set_stat $ff
001B2E  1  A0 41                ldy #$41
001B30  1  08                   php
001B31  1  CC 19 02             cpy abs1+2   ;test result
001B34  1  F0 03 20 FF          trap_ne
001B38  1  FF           
001B39  1  68                   pla         ;load status
001B3A  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001B3E  1  CD 1E 02             cmp fLDx+2  ;test flags
001B41  1  F0 03 20 FF          trap_ne
001B45  1  FF           
001B46  1  A9 FF 48 28          set_stat $ff
001B4A  1  A0 00                ldy #0
001B4C  1  08                   php
001B4D  1  CC 1A 02             cpy abs1+3  ;test result
001B50  1  F0 03 20 FF          trap_ne
001B54  1  FF           
001B55  1  68                   pla         ;load status
001B56  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001B5A  1  CD 1F 02             cmp fLDx+3  ;test flags
001B5D  1  F0 03 20 FF          trap_ne
001B61  1  FF           
001B62  1               
001B62  1  A0 00                ldy #0
001B64  1  A5 0C                lda zpt
001B66  1  49 C3                eor #$c3
001B68  1  C5 13                cmp zp1
001B6A  1  F0 03 20 FF          trap_ne     ;store to zp   data
001B6E  1  FF           
001B6F  1  84 0C                sty zpt     ;clear
001B71  1  AD 03 02             lda abst
001B74  1  49 C3                eor #$c3
001B76  1  CD 17 02             cmp abs1
001B79  1  F0 03 20 FF          trap_ne     ;store to abs   data
001B7D  1  FF           
001B7E  1  8C 03 02             sty abst    ;clear
001B81  1  A5 0D                lda zpt+1
001B83  1  49 C3                eor #$c3
001B85  1  C5 14                cmp zp1+1
001B87  1  F0 03 20 FF          trap_ne     ;store to zp+1 data
001B8B  1  FF           
001B8C  1  84 0D                sty zpt+1   ;clear
001B8E  1  AD 04 02             lda abst+1
001B91  1  49 C3                eor #$c3
001B93  1  CD 18 02             cmp abs1+1
001B96  1  F0 03 20 FF          trap_ne     ;store to abs+1 data
001B9A  1  FF           
001B9B  1  8C 04 02             sty abst+1  ;clear
001B9E  1  A5 0E                lda zpt+2
001BA0  1  49 C3                eor #$c3
001BA2  1  C5 15                cmp zp1+2
001BA4  1  F0 03 20 FF          trap_ne     ;store to zp+2 data
001BA8  1  FF           
001BA9  1  84 0E                sty zpt+2   ;clear
001BAB  1  AD 05 02             lda abst+2
001BAE  1  49 C3                eor #$c3
001BB0  1  CD 19 02             cmp abs1+2
001BB3  1  F0 03 20 FF          trap_ne     ;store to abs+2 data
001BB7  1  FF           
001BB8  1  8C 05 02             sty abst+2  ;clear
001BBB  1  A5 0F                lda zpt+3
001BBD  1  49 C3                eor #$c3
001BBF  1  C5 16                cmp zp1+3
001BC1  1  F0 03 20 FF          trap_ne     ;store to zp+3 data
001BC5  1  FF           
001BC6  1  84 0F                sty zpt+3   ;clear
001BC8  1  AD 06 02             lda abst+3
001BCB  1  49 C3                eor #$c3
001BCD  1  CD 1A 02             cmp abs1+3
001BD0  1  F0 03 20 FF          trap_ne     ;store to abs+3 data
001BD4  1  FF           
001BD5  1  8C 06 02             sty abst+3  ;clear
001BD8  1  AD 00 02 C9          next_test
001BDC  1  14 F0 03 20  
001BE0  1  FF FF A9 15  
001BE7  1               
001BE7  1               ; testing load / store accumulator LDA / STA all addressing modes
001BE7  1               ; LDA / STA - zp,x / abs,x
001BE7  1  A2 03                ldx #3
001BE9  1               tldax:
001BE9  1  A9 00 48 28          set_stat 0
001BED  1  B5 13                lda zp1,x
001BEF  1  08                   php         ;test stores do not alter flags
001BF0  1  49 C3                eor #$c3
001BF2  1  28                   plp
001BF3  1  9D 03 02             sta abst,x
001BF6  1  08                   php         ;flags after load/store sequence
001BF7  1  49 C3                eor #$c3
001BF9  1  DD 17 02             cmp abs1,x  ;test result
001BFC  1  F0 03 20 FF          trap_ne
001C00  1  FF           
001C01  1  68                   pla         ;load status
001C02  1  09 08 49 38          eor_flag 0
001C06  1  DD 1C 02             cmp fLDx,x  ;test flags
001C09  1  F0 03 20 FF          trap_ne
001C0D  1  FF           
001C0E  1  CA                   dex
001C0F  1  10 D8                bpl tldax
001C11  1               
001C11  1  A2 03                ldx #3
001C13  1               tldax1:
001C13  1  A9 FF 48 28          set_stat $ff
001C17  1  B5 13                lda zp1,x
001C19  1  08                   php         ;test stores do not alter flags
001C1A  1  49 C3                eor #$c3
001C1C  1  28                   plp
001C1D  1  9D 03 02             sta abst,x
001C20  1  08                   php         ;flags after load/store sequence
001C21  1  49 C3                eor #$c3
001C23  1  DD 17 02             cmp abs1,x   ;test result
001C26  1  F0 03 20 FF          trap_ne
001C2A  1  FF           
001C2B  1  68                   pla         ;load status
001C2C  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001C30  1  DD 1C 02             cmp fLDx,x  ;test flags
001C33  1  F0 03 20 FF          trap_ne
001C37  1  FF           
001C38  1  CA                   dex
001C39  1  10 D8                bpl tldax1
001C3B  1               
001C3B  1  A2 03                ldx #3
001C3D  1               tldax2:
001C3D  1  A9 00 48 28          set_stat 0
001C41  1  BD 17 02             lda abs1,x
001C44  1  08                   php         ;test stores do not alter flags
001C45  1  49 C3                eor #$c3
001C47  1  28                   plp
001C48  1  95 0C                sta zpt,x
001C4A  1  08                   php         ;flags after load/store sequence
001C4B  1  49 C3                eor #$c3
001C4D  1  D5 13                cmp zp1,x   ;test result
001C4F  1  F0 03 20 FF          trap_ne
001C53  1  FF           
001C54  1  68                   pla         ;load status
001C55  1  09 08 49 38          eor_flag 0
001C59  1  DD 1C 02             cmp fLDx,x  ;test flags
001C5C  1  F0 03 20 FF          trap_ne
001C60  1  FF           
001C61  1  CA                   dex
001C62  1  10 D9                bpl tldax2
001C64  1               
001C64  1  A2 03                ldx #3
001C66  1               tldax3:
001C66  1  A9 FF 48 28          set_stat $ff
001C6A  1  BD 17 02             lda abs1,x
001C6D  1  08                   php         ;test stores do not alter flags
001C6E  1  49 C3                eor #$c3
001C70  1  28                   plp
001C71  1  95 0C                sta zpt,x
001C73  1  08                   php         ;flags after load/store sequence
001C74  1  49 C3                eor #$c3
001C76  1  D5 13                cmp zp1,x   ;test result
001C78  1  F0 03 20 FF          trap_ne
001C7C  1  FF           
001C7D  1  68                   pla         ;load status
001C7E  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001C82  1  DD 1C 02             cmp fLDx,x  ;test flags
001C85  1  F0 03 20 FF          trap_ne
001C89  1  FF           
001C8A  1  CA                   dex
001C8B  1  10 D9                bpl tldax3
001C8D  1               
001C8D  1  A2 03                ldx #3      ;testing store result
001C8F  1  A0 00                ldy #0
001C91  1  B5 0C        tstax:  lda zpt,x
001C93  1  49 C3                eor #$c3
001C95  1  D5 13                cmp zp1,x
001C97  1  F0 03 20 FF          trap_ne     ;store to zp,x data
001C9B  1  FF           
001C9C  1  94 0C                sty zpt,x   ;clear
001C9E  1  BD 03 02             lda abst,x
001CA1  1  49 C3                eor #$c3
001CA3  1  DD 17 02             cmp abs1,x
001CA6  1  F0 03 20 FF          trap_ne     ;store to abs,x data
001CAA  1  FF           
001CAB  1  8A                   txa
001CAC  1  9D 03 02             sta abst,x  ;clear
001CAF  1  CA                   dex
001CB0  1  10 DF                bpl tstax
001CB2  1  AD 00 02 C9          next_test
001CB6  1  15 F0 03 20  
001CBA  1  FF FF A9 16  
001CC1  1               
001CC1  1               ; LDA / STA - (zp),y / abs,y / (zp,x)
001CC1  1  A0 03                ldy #3
001CC3  1               tlday:
001CC3  1  A9 00 48 28          set_stat 0
001CC7  1  B1 24                lda (ind1),y
001CC9  1  08                   php         ;test stores do not alter flags
001CCA  1  49 C3                eor #$c3
001CCC  1  28                   plp
001CCD  1  99 03 02             sta abst,y
001CD0  1  08                   php         ;flags after load/store sequence
001CD1  1  49 C3                eor #$c3
001CD3  1  D9 17 02             cmp abs1,y  ;test result
001CD6  1  F0 03 20 FF          trap_ne
001CDA  1  FF           
001CDB  1  68                   pla         ;load status
001CDC  1  09 08 49 38          eor_flag 0
001CE0  1  D9 1C 02             cmp fLDx,y  ;test flags
001CE3  1  F0 03 20 FF          trap_ne
001CE7  1  FF           
001CE8  1  88                   dey
001CE9  1  10 D8                bpl tlday
001CEB  1               
001CEB  1  A0 03                ldy #3
001CED  1               tlday1:
001CED  1  A9 FF 48 28          set_stat $ff
001CF1  1  B1 24                lda (ind1),y
001CF3  1  08                   php         ;test stores do not alter flags
001CF4  1  49 C3                eor #$c3
001CF6  1  28                   plp
001CF7  1  99 03 02             sta abst,y
001CFA  1  08                   php         ;flags after load/store sequence
001CFB  1  49 C3                eor #$c3
001CFD  1  D9 17 02             cmp abs1,y  ;test result
001D00  1  F0 03 20 FF          trap_ne
001D04  1  FF           
001D05  1  68                   pla         ;load status
001D06  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001D0A  1  D9 1C 02             cmp fLDx,y  ;test flags
001D0D  1  F0 03 20 FF          trap_ne
001D11  1  FF           
001D12  1  88                   dey
001D13  1  10 D8                bpl tlday1
001D15  1               
001D15  1  A0 03                ldy #3      ;testing store result
001D17  1  A2 00                ldx #0
001D19  1  B9 03 02     tstay:  lda abst,y
001D1C  1  49 C3                eor #$c3
001D1E  1  D9 17 02             cmp abs1,y
001D21  1  F0 03 20 FF          trap_ne     ;store to abs data
001D25  1  FF           
001D26  1  8A                   txa
001D27  1  99 03 02             sta abst,y  ;clear
001D2A  1  88                   dey
001D2B  1  10 EC                bpl tstay
001D2D  1               
001D2D  1  A0 03                ldy #3
001D2F  1               tlday2:
001D2F  1  A9 00 48 28          set_stat 0
001D33  1  B9 17 02             lda abs1,y
001D36  1  08                   php         ;test stores do not alter flags
001D37  1  49 C3                eor #$c3
001D39  1  28                   plp
001D3A  1  91 30                sta (indt),y
001D3C  1  08                   php         ;flags after load/store sequence
001D3D  1  49 C3                eor #$c3
001D3F  1  D1 24                cmp (ind1),y    ;test result
001D41  1  F0 03 20 FF          trap_ne
001D45  1  FF           
001D46  1  68                   pla         ;load status
001D47  1  09 08 49 38          eor_flag 0
001D4B  1  D9 1C 02             cmp fLDx,y  ;test flags
001D4E  1  F0 03 20 FF          trap_ne
001D52  1  FF           
001D53  1  88                   dey
001D54  1  10 D9                bpl tlday2
001D56  1               
001D56  1  A0 03                ldy #3
001D58  1               tlday3:
001D58  1  A9 FF 48 28          set_stat $ff
001D5C  1  B9 17 02             lda abs1,y
001D5F  1  08                   php         ;test stores do not alter flags
001D60  1  49 C3                eor #$c3
001D62  1  28                   plp
001D63  1  91 30                sta (indt),y
001D65  1  08                   php         ;flags after load/store sequence
001D66  1  49 C3                eor #$c3
001D68  1  D1 24                cmp (ind1),y   ;test result
001D6A  1  F0 03 20 FF          trap_ne
001D6E  1  FF           
001D6F  1  68                   pla         ;load status
001D70  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001D74  1  D9 1C 02             cmp fLDx,y  ;test flags
001D77  1  F0 03 20 FF          trap_ne
001D7B  1  FF           
001D7C  1  88                   dey
001D7D  1  10 D9                bpl tlday3
001D7F  1               
001D7F  1  A0 03                ldy #3      ;testing store result
001D81  1  A2 00                ldx #0
001D83  1  B9 03 02     tstay1: lda abst,y
001D86  1  49 C3                eor #$c3
001D88  1  D9 17 02             cmp abs1,y
001D8B  1  F0 03 20 FF          trap_ne     ;store to abs data
001D8F  1  FF           
001D90  1  8A                   txa
001D91  1  99 03 02             sta abst,y  ;clear
001D94  1  88                   dey
001D95  1  10 EC                bpl tstay1
001D97  1               
001D97  1  A2 06                ldx #6
001D99  1  A0 03                ldy #3
001D9B  1               tldax4:
001D9B  1  A9 00 48 28          set_stat 0
001D9F  1  A1 24                lda (ind1,x)
001DA1  1  08                   php         ;test stores do not alter flags
001DA2  1  49 C3                eor #$c3
001DA4  1  28                   plp
001DA5  1  81 30                sta (indt,x)
001DA7  1  08                   php         ;flags after load/store sequence
001DA8  1  49 C3                eor #$c3
001DAA  1  D9 17 02             cmp abs1,y  ;test result
001DAD  1  F0 03 20 FF          trap_ne
001DB1  1  FF           
001DB2  1  68                   pla         ;load status
001DB3  1  09 08 49 38          eor_flag 0
001DB7  1  D9 1C 02             cmp fLDx,y  ;test flags
001DBA  1  F0 03 20 FF          trap_ne
001DBE  1  FF           
001DBF  1  CA                   dex
001DC0  1  CA                   dex
001DC1  1  88                   dey
001DC2  1  10 D7                bpl tldax4
001DC4  1               
001DC4  1  A2 06                ldx #6
001DC6  1  A0 03                ldy #3
001DC8  1               tldax5:
001DC8  1  A9 FF 48 28          set_stat $ff
001DCC  1  A1 24                lda (ind1,x)
001DCE  1  08                   php         ;test stores do not alter flags
001DCF  1  49 C3                eor #$c3
001DD1  1  28                   plp
001DD2  1  81 30                sta (indt,x)
001DD4  1  08                   php         ;flags after load/store sequence
001DD5  1  49 C3                eor #$c3
001DD7  1  D9 17 02             cmp abs1,y  ;test result
001DDA  1  F0 03 20 FF          trap_ne
001DDE  1  FF           
001DDF  1  68                   pla         ;load status
001DE0  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001DE4  1  D9 1C 02             cmp fLDx,y  ;test flags
001DE7  1  F0 03 20 FF          trap_ne
001DEB  1  FF           
001DEC  1  CA                   dex
001DED  1  CA                   dex
001DEE  1  88                   dey
001DEF  1  10 D7                bpl tldax5
001DF1  1               
001DF1  1  A0 03                ldy #3      ;testing store result
001DF3  1  A2 00                ldx #0
001DF5  1  B9 03 02     tstay2: lda abst,y
001DF8  1  49 C3                eor #$c3
001DFA  1  D9 17 02             cmp abs1,y
001DFD  1  F0 03 20 FF          trap_ne     ;store to abs data
001E01  1  FF           
001E02  1  8A                   txa
001E03  1  99 03 02             sta abst,y  ;clear
001E06  1  88                   dey
001E07  1  10 EC                bpl tstay2
001E09  1  AD 00 02 C9          next_test
001E0D  1  16 F0 03 20  
001E11  1  FF FF A9 17  
001E18  1               
001E18  1               ; indexed wraparound test (only zp should wrap)
001E18  1  A2 FD                ldx #3+$fa
001E1A  1  B5 19        tldax6: lda <(zp1-$fa),x   ;wrap on indexed zp
001E1C  1  9D 09 01             sta abst-$fa,x      ;no STX abs,x!
001E1F  1  CA                   dex
001E20  1  E0 FA                cpx #$fa
001E22  1  B0 F6                bcs tldax6
001E24  1  A2 FD                ldx #3+$fa
001E26  1  BD 1D 01     tldax7: lda abs1-$fa,x      ;no wrap on indexed abs
001E29  1  95 12                sta <(zpt-$fa),x
001E2B  1  CA                   dex
001E2C  1  E0 FA                cpx #$fa
001E2E  1  B0 F6                bcs tldax7
001E30  1               
001E30  1  A2 03                ldx #3      ;testing wraparound result
001E32  1  A0 00                ldy #0
001E34  1  B5 0C        tstax1: lda zpt,x
001E36  1  D5 13                cmp zp1,x
001E38  1  F0 03 20 FF          trap_ne     ;store to zp,x data
001E3C  1  FF           
001E3D  1  94 0C                sty zpt,x   ;clear
001E3F  1  BD 03 02             lda abst,x
001E42  1  DD 17 02             cmp abs1,x
001E45  1  F0 03 20 FF          trap_ne     ;store to abs,x data
001E49  1  FF           
001E4A  1  8A                   txa
001E4B  1  9D 03 02             sta abst,x  ;clear
001E4E  1  CA                   dex
001E4F  1  10 E3                bpl tstax1
001E51  1               
001E51  1  A0 FB                ldy #3+$f8
001E53  1  A2 FE                ldx #6+$f8
001E55  1  A1 2C        tlday4: lda (<(ind1-$f8),x) ;wrap on indexed zp indirect
001E57  1  99 0B 01             sta abst-$f8,y
001E5A  1  CA                   dex
001E5B  1  CA                   dex
001E5C  1  88                   dey
001E5D  1  C0 F8                cpy #$f8
001E5F  1  B0 F4                bcs tlday4
001E61  1  A0 03                ldy #3      ;testing wraparound result
001E63  1  A2 00                ldx #0
001E65  1  B9 03 02     tstay4: lda abst,y
001E68  1  D9 17 02             cmp abs1,y
001E6B  1  F0 03 20 FF          trap_ne     ;store to abs data
001E6F  1  FF           
001E70  1  8A                   txa
001E71  1  99 03 02             sta abst,y  ;clear
001E74  1  88                   dey
001E75  1  10 EE                bpl tstay4
001E77  1               
001E77  1  A0 FB                ldy #3+$f8
001E79  1  B9 1F 01     tlday5: lda abs1-$f8,y  ;no wrap on indexed abs
001E7C  1  91 38                sta (inwt),y
001E7E  1  88                   dey
001E7F  1  C0 F8                cpy #$f8
001E81  1  B0 F6                bcs tlday5
001E83  1  A0 03                ldy #3      ;testing wraparound result
001E85  1  A2 00                ldx #0
001E87  1  B9 03 02     tstay5: lda abst,y
001E8A  1  D9 17 02             cmp abs1,y
001E8D  1  F0 03 20 FF          trap_ne     ;store to abs data
001E91  1  FF           
001E92  1  8A                   txa
001E93  1  99 03 02             sta abst,y  ;clear
001E96  1  88                   dey
001E97  1  10 EE                bpl tstay5
001E99  1               
001E99  1  A0 FB                ldy #3+$f8
001E9B  1  A2 FE                ldx #6+$f8
001E9D  1  B1 2E        tlday6: lda (inw1),y    ;no wrap on zp indirect indexed
001E9F  1  81 38                sta (<(indt-$f8),x)
001EA1  1  CA                   dex
001EA2  1  CA                   dex
001EA3  1  88                   dey
001EA4  1  C0 F8                cpy #$f8
001EA6  1  B0 F5                bcs tlday6
001EA8  1  A0 03                ldy #3      ;testing wraparound result
001EAA  1  A2 00                ldx #0
001EAC  1  B9 03 02     tstay6: lda abst,y
001EAF  1  D9 17 02             cmp abs1,y
001EB2  1  F0 03 20 FF          trap_ne     ;store to abs data
001EB6  1  FF           
001EB7  1  8A                   txa
001EB8  1  99 03 02             sta abst,y  ;clear
001EBB  1  88                   dey
001EBC  1  10 EE                bpl tstay6
001EBE  1  AD 00 02 C9          next_test
001EC2  1  17 F0 03 20  
001EC6  1  FF FF A9 18  
001ECD  1               
001ECD  1               ; LDA / STA - zp / abs / #
001ECD  1  A9 00 48 28          set_stat 0
001ED1  1  A5 13                lda zp1
001ED3  1  08                   php         ;test stores do not alter flags
001ED4  1  49 C3                eor #$c3
001ED6  1  28                   plp
001ED7  1  8D 03 02             sta abst
001EDA  1  08                   php         ;flags after load/store sequence
001EDB  1  49 C3                eor #$c3
001EDD  1  C9 C3                cmp #$c3    ;test result
001EDF  1  F0 03 20 FF          trap_ne
001EE3  1  FF           
001EE4  1  68                   pla         ;load status
001EE5  1  09 08 49 38          eor_flag 0
001EE9  1  CD 1C 02             cmp fLDx    ;test flags
001EEC  1  F0 03 20 FF          trap_ne
001EF0  1  FF           
001EF1  1  A9 00 48 28          set_stat 0
001EF5  1  A5 14                lda zp1+1
001EF7  1  08                   php         ;test stores do not alter flags
001EF8  1  49 C3                eor #$c3
001EFA  1  28                   plp
001EFB  1  8D 04 02             sta abst+1
001EFE  1  08                   php         ;flags after load/store sequence
001EFF  1  49 C3                eor #$c3
001F01  1  C9 82                cmp #$82    ;test result
001F03  1  F0 03 20 FF          trap_ne
001F07  1  FF           
001F08  1  68                   pla         ;load status
001F09  1  09 08 49 38          eor_flag 0
001F0D  1  CD 1D 02             cmp fLDx+1  ;test flags
001F10  1  F0 03 20 FF          trap_ne
001F14  1  FF           
001F15  1  A9 00 48 28          set_stat 0
001F19  1  A5 15                lda zp1+2
001F1B  1  08                   php         ;test stores do not alter flags
001F1C  1  49 C3                eor #$c3
001F1E  1  28                   plp
001F1F  1  8D 05 02             sta abst+2
001F22  1  08                   php         ;flags after load/store sequence
001F23  1  49 C3                eor #$c3
001F25  1  C9 41                cmp #$41    ;test result
001F27  1  F0 03 20 FF          trap_ne
001F2B  1  FF           
001F2C  1  68                   pla         ;load status
001F2D  1  09 08 49 38          eor_flag 0
001F31  1  CD 1E 02             cmp fLDx+2  ;test flags
001F34  1  F0 03 20 FF          trap_ne
001F38  1  FF           
001F39  1  A9 00 48 28          set_stat 0
001F3D  1  A5 16                lda zp1+3
001F3F  1  08                   php         ;test stores do not alter flags
001F40  1  49 C3                eor #$c3
001F42  1  28                   plp
001F43  1  8D 06 02             sta abst+3
001F46  1  08                   php         ;flags after load/store sequence
001F47  1  49 C3                eor #$c3
001F49  1  C9 00                cmp #0      ;test result
001F4B  1  F0 03 20 FF          trap_ne
001F4F  1  FF           
001F50  1  68                   pla         ;load status
001F51  1  09 08 49 38          eor_flag 0
001F55  1  CD 1F 02             cmp fLDx+3  ;test flags
001F58  1  F0 03 20 FF          trap_ne
001F5C  1  FF           
001F5D  1  A9 FF 48 28          set_stat $ff
001F61  1  A5 13                lda zp1
001F63  1  08                   php         ;test stores do not alter flags
001F64  1  49 C3                eor #$c3
001F66  1  28                   plp
001F67  1  8D 03 02             sta abst
001F6A  1  08                   php         ;flags after load/store sequence
001F6B  1  49 C3                eor #$c3
001F6D  1  C9 C3                cmp #$c3    ;test result
001F6F  1  F0 03 20 FF          trap_ne
001F73  1  FF           
001F74  1  68                   pla         ;load status
001F75  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001F79  1  CD 1C 02             cmp fLDx    ;test flags
001F7C  1  F0 03 20 FF          trap_ne
001F80  1  FF           
001F81  1  A9 FF 48 28          set_stat $ff
001F85  1  A5 14                lda zp1+1
001F87  1  08                   php         ;test stores do not alter flags
001F88  1  49 C3                eor #$c3
001F8A  1  28                   plp
001F8B  1  8D 04 02             sta abst+1
001F8E  1  08                   php         ;flags after load/store sequence
001F8F  1  49 C3                eor #$c3
001F91  1  C9 82                cmp #$82    ;test result
001F93  1  F0 03 20 FF          trap_ne
001F97  1  FF           
001F98  1  68                   pla         ;load status
001F99  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001F9D  1  CD 1D 02             cmp fLDx+1  ;test flags
001FA0  1  F0 03 20 FF          trap_ne
001FA4  1  FF           
001FA5  1  A9 FF 48 28          set_stat $ff
001FA9  1  A5 15                lda zp1+2
001FAB  1  08                   php         ;test stores do not alter flags
001FAC  1  49 C3                eor #$c3
001FAE  1  28                   plp
001FAF  1  8D 05 02             sta abst+2
001FB2  1  08                   php         ;flags after load/store sequence
001FB3  1  49 C3                eor #$c3
001FB5  1  C9 41                cmp #$41    ;test result
001FB7  1  F0 03 20 FF          trap_ne
001FBB  1  FF           
001FBC  1  68                   pla         ;load status
001FBD  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001FC1  1  CD 1E 02             cmp fLDx+2  ;test flags
001FC4  1  F0 03 20 FF          trap_ne
001FC8  1  FF           
001FC9  1  A9 FF 48 28          set_stat $ff
001FCD  1  A5 16                lda zp1+3
001FCF  1  08                   php         ;test stores do not alter flags
001FD0  1  49 C3                eor #$c3
001FD2  1  28                   plp
001FD3  1  8D 06 02             sta abst+3
001FD6  1  08                   php         ;flags after load/store sequence
001FD7  1  49 C3                eor #$c3
001FD9  1  C9 00                cmp #0      ;test result
001FDB  1  F0 03 20 FF          trap_ne
001FDF  1  FF           
001FE0  1  68                   pla         ;load status
001FE1  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
001FE5  1  CD 1F 02             cmp fLDx+3  ;test flags
001FE8  1  F0 03 20 FF          trap_ne
001FEC  1  FF           
001FED  1  A9 00 48 28          set_stat 0
001FF1  1  AD 17 02             lda abs1
001FF4  1  08                   php         ;test stores do not alter flags
001FF5  1  49 C3                eor #$c3
001FF7  1  28                   plp
001FF8  1  85 0C                sta zpt
001FFA  1  08                   php         ;flags after load/store sequence
001FFB  1  49 C3                eor #$c3
001FFD  1  C5 13                cmp zp1     ;test result
001FFF  1  F0 03 20 FF          trap_ne
002003  1  FF           
002004  1  68                   pla         ;load status
002005  1  09 08 49 38          eor_flag 0
002009  1  CD 1C 02             cmp fLDx    ;test flags
00200C  1  F0 03 20 FF          trap_ne
002010  1  FF           
002011  1  A9 00 48 28          set_stat 0
002015  1  AD 18 02             lda abs1+1
002018  1  08                   php         ;test stores do not alter flags
002019  1  49 C3                eor #$c3
00201B  1  28                   plp
00201C  1  85 0D                sta zpt+1
00201E  1  08                   php         ;flags after load/store sequence
00201F  1  49 C3                eor #$c3
002021  1  C5 14                cmp zp1+1   ;test result
002023  1  F0 03 20 FF          trap_ne
002027  1  FF           
002028  1  68                   pla         ;load status
002029  1  09 08 49 38          eor_flag 0
00202D  1  CD 1D 02             cmp fLDx+1  ;test flags
002030  1  F0 03 20 FF          trap_ne
002034  1  FF           
002035  1  A9 00 48 28          set_stat 0
002039  1  AD 19 02             lda abs1+2
00203C  1  08                   php         ;test stores do not alter flags
00203D  1  49 C3                eor #$c3
00203F  1  28                   plp
002040  1  85 0E                sta zpt+2
002042  1  08                   php         ;flags after load/store sequence
002043  1  49 C3                eor #$c3
002045  1  C5 15                cmp zp1+2   ;test result
002047  1  F0 03 20 FF          trap_ne
00204B  1  FF           
00204C  1  68                   pla         ;load status
00204D  1  09 08 49 38          eor_flag 0
002051  1  CD 1E 02             cmp fLDx+2  ;test flags
002054  1  F0 03 20 FF          trap_ne
002058  1  FF           
002059  1  A9 00 48 28          set_stat 0
00205D  1  AD 1A 02             lda abs1+3
002060  1  08                   php         ;test stores do not alter flags
002061  1  49 C3                eor #$c3
002063  1  28                   plp
002064  1  85 0F                sta zpt+3
002066  1  08                   php         ;flags after load/store sequence
002067  1  49 C3                eor #$c3
002069  1  C5 16                cmp zp1+3   ;test result
00206B  1  F0 03 20 FF          trap_ne
00206F  1  FF           
002070  1  68                   pla         ;load status
002071  1  09 08 49 38          eor_flag 0
002075  1  CD 1F 02             cmp fLDx+3  ;test flags
002078  1  F0 03 20 FF          trap_ne
00207C  1  FF           
00207D  1  A9 FF 48 28          set_stat $ff
002081  1  AD 17 02             lda abs1
002084  1  08                   php         ;test stores do not alter flags
002085  1  49 C3                eor #$c3
002087  1  28                   plp
002088  1  85 0C                sta zpt
00208A  1  08                   php         ;flags after load/store sequence
00208B  1  49 C3                eor #$c3
00208D  1  C5 13                cmp zp1     ;test result
00208F  1  F0 03 20 FF          trap_ne
002093  1  FF           
002094  1  68                   pla         ;load status
002095  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
002099  1  CD 1C 02             cmp fLDx    ;test flags
00209C  1  F0 03 20 FF          trap_ne
0020A0  1  FF           
0020A1  1  A9 FF 48 28          set_stat $ff
0020A5  1  AD 18 02             lda abs1+1
0020A8  1  08                   php         ;test stores do not alter flags
0020A9  1  49 C3                eor #$c3
0020AB  1  28                   plp
0020AC  1  85 0D                sta zpt+1
0020AE  1  08                   php         ;flags after load/store sequence
0020AF  1  49 C3                eor #$c3
0020B1  1  C5 14                cmp zp1+1   ;test result
0020B3  1  F0 03 20 FF          trap_ne
0020B7  1  FF           
0020B8  1  68                   pla         ;load status
0020B9  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0020BD  1  CD 1D 02             cmp fLDx+1  ;test flags
0020C0  1  F0 03 20 FF          trap_ne
0020C4  1  FF           
0020C5  1  A9 FF 48 28          set_stat $ff
0020C9  1  AD 19 02             lda abs1+2
0020CC  1  08                   php         ;test stores do not alter flags
0020CD  1  49 C3                eor #$c3
0020CF  1  28                   plp
0020D0  1  85 0E                sta zpt+2
0020D2  1  08                   php         ;flags after load/store sequence
0020D3  1  49 C3                eor #$c3
0020D5  1  C5 15                cmp zp1+2   ;test result
0020D7  1  F0 03 20 FF          trap_ne
0020DB  1  FF           
0020DC  1  68                   pla         ;load status
0020DD  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0020E1  1  CD 1E 02             cmp fLDx+2  ;test flags
0020E4  1  F0 03 20 FF          trap_ne
0020E8  1  FF           
0020E9  1  A9 FF 48 28          set_stat $ff
0020ED  1  AD 1A 02             lda abs1+3
0020F0  1  08                   php         ;test stores do not alter flags
0020F1  1  49 C3                eor #$c3
0020F3  1  28                   plp
0020F4  1  85 0F                sta zpt+3
0020F6  1  08                   php         ;flags after load/store sequence
0020F7  1  49 C3                eor #$c3
0020F9  1  C5 16                cmp zp1+3   ;test result
0020FB  1  F0 03 20 FF          trap_ne
0020FF  1  FF           
002100  1  68                   pla         ;load status
002101  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
002105  1  CD 1F 02             cmp fLDx+3  ;test flags
002108  1  F0 03 20 FF          trap_ne
00210C  1  FF           
00210D  1  A9 00 48 28          set_stat 0
002111  1  A9 C3                lda #$c3
002113  1  08                   php
002114  1  CD 17 02             cmp abs1    ;test result
002117  1  F0 03 20 FF          trap_ne
00211B  1  FF           
00211C  1  68                   pla         ;load status
00211D  1  09 08 49 38          eor_flag 0
002121  1  CD 1C 02             cmp fLDx    ;test flags
002124  1  F0 03 20 FF          trap_ne
002128  1  FF           
002129  1  A9 00 48 28          set_stat 0
00212D  1  A9 82                lda #$82
00212F  1  08                   php
002130  1  CD 18 02             cmp abs1+1  ;test result
002133  1  F0 03 20 FF          trap_ne
002137  1  FF           
002138  1  68                   pla         ;load status
002139  1  09 08 49 38          eor_flag 0
00213D  1  CD 1D 02             cmp fLDx+1  ;test flags
002140  1  F0 03 20 FF          trap_ne
002144  1  FF           
002145  1  A9 00 48 28          set_stat 0
002149  1  A9 41                lda #$41
00214B  1  08                   php
00214C  1  CD 19 02             cmp abs1+2  ;test result
00214F  1  F0 03 20 FF          trap_ne
002153  1  FF           
002154  1  68                   pla         ;load status
002155  1  09 08 49 38          eor_flag 0
002159  1  CD 1E 02             cmp fLDx+2  ;test flags
00215C  1  F0 03 20 FF          trap_ne
002160  1  FF           
002161  1  A9 00 48 28          set_stat 0
002165  1  A9 00                lda #0
002167  1  08                   php
002168  1  CD 1A 02             cmp abs1+3  ;test result
00216B  1  F0 03 20 FF          trap_ne
00216F  1  FF           
002170  1  68                   pla         ;load status
002171  1  09 08 49 38          eor_flag 0
002175  1  CD 1F 02             cmp fLDx+3  ;test flags
002178  1  F0 03 20 FF          trap_ne
00217C  1  FF           
00217D  1               
00217D  1  A9 FF 48 28          set_stat $ff
002181  1  A9 C3                lda #$c3
002183  1  08                   php
002184  1  CD 17 02             cmp abs1    ;test result
002187  1  F0 03 20 FF          trap_ne
00218B  1  FF           
00218C  1  68                   pla         ;load status
00218D  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
002191  1  CD 1C 02             cmp fLDx    ;test flags
002194  1  F0 03 20 FF          trap_ne
002198  1  FF           
002199  1  A9 FF 48 28          set_stat $ff
00219D  1  A9 82                lda #$82
00219F  1  08                   php
0021A0  1  CD 18 02             cmp abs1+1  ;test result
0021A3  1  F0 03 20 FF          trap_ne
0021A7  1  FF           
0021A8  1  68                   pla         ;load status
0021A9  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0021AD  1  CD 1D 02             cmp fLDx+1  ;test flags
0021B0  1  F0 03 20 FF          trap_ne
0021B4  1  FF           
0021B5  1  A9 FF 48 28          set_stat $ff
0021B9  1  A9 41                lda #$41
0021BB  1  08                   php
0021BC  1  CD 19 02             cmp abs1+2  ;test result
0021BF  1  F0 03 20 FF          trap_ne
0021C3  1  FF           
0021C4  1  68                   pla         ;load status
0021C5  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0021C9  1  CD 1E 02             cmp fLDx+2  ;test flags
0021CC  1  F0 03 20 FF          trap_ne
0021D0  1  FF           
0021D1  1  A9 FF 48 28          set_stat $ff
0021D5  1  A9 00                lda #0
0021D7  1  08                   php
0021D8  1  CD 1A 02             cmp abs1+3  ;test result
0021DB  1  F0 03 20 FF          trap_ne
0021DF  1  FF           
0021E0  1  68                   pla         ;load status
0021E1  1  09 08 49 7D          eor_flag <~fnz ;mask bits not altered
0021E5  1  CD 1F 02             cmp fLDx+3  ;test flags
0021E8  1  F0 03 20 FF          trap_ne
0021EC  1  FF           
0021ED  1               
0021ED  1  A2 00                ldx #0
0021EF  1  A5 0C                lda zpt
0021F1  1  49 C3                eor #$c3
0021F3  1  C5 13                cmp zp1
0021F5  1  F0 03 20 FF          trap_ne     ;store to zp data
0021F9  1  FF           
0021FA  1  86 0C                stx zpt     ;clear
0021FC  1  AD 03 02             lda abst
0021FF  1  49 C3                eor #$c3
002201  1  CD 17 02             cmp abs1
002204  1  F0 03 20 FF          trap_ne     ;store to abs data
002208  1  FF           
002209  1  8E 03 02             stx abst    ;clear
00220C  1  A5 0D                lda zpt+1
00220E  1  49 C3                eor #$c3
002210  1  C5 14                cmp zp1+1
002212  1  F0 03 20 FF          trap_ne     ;store to zp data
002216  1  FF           
002217  1  86 0D                stx zpt+1   ;clear
002219  1  AD 04 02             lda abst+1
00221C  1  49 C3                eor #$c3
00221E  1  CD 18 02             cmp abs1+1
002221  1  F0 03 20 FF          trap_ne     ;store to abs data
002225  1  FF           
002226  1  8E 04 02             stx abst+1  ;clear
002229  1  A5 0E                lda zpt+2
00222B  1  49 C3                eor #$c3
00222D  1  C5 15                cmp zp1+2
00222F  1  F0 03 20 FF          trap_ne     ;store to zp data
002233  1  FF           
002234  1  86 0E                stx zpt+2   ;clear
002236  1  AD 05 02             lda abst+2
002239  1  49 C3                eor #$c3
00223B  1  CD 19 02             cmp abs1+2
00223E  1  F0 03 20 FF          trap_ne     ;store to abs data
002242  1  FF           
002243  1  8E 05 02             stx abst+2  ;clear
002246  1  A5 0F                lda zpt+3
002248  1  49 C3                eor #$c3
00224A  1  C5 16                cmp zp1+3
00224C  1  F0 03 20 FF          trap_ne     ;store to zp data
002250  1  FF           
002251  1  86 0F                stx zpt+3   ;clear
002253  1  AD 06 02             lda abst+3
002256  1  49 C3                eor #$c3
002258  1  CD 1A 02             cmp abs1+3
00225B  1  F0 03 20 FF          trap_ne     ;store to abs data
00225F  1  FF           
002260  1  8E 06 02             stx abst+3  ;clear
002263  1  AD 00 02 C9          next_test
002267  1  18 F0 03 20  
00226B  1  FF FF A9 19  
002272  1               
002272  1               ; testing bit test & compares BIT CPX CPY CMP all addressing modes
002272  1               ; BIT - zp / abs
002272  1  A9 00 48 A9          set_a $ff,0
002276  1  FF 28        
002278  1  24 16                bit zp1+3   ;00 - should set Z / clear  NV
00227A  1  08 C9 FF F0          tst_a $ff,fz
00227E  1  03 20 FF FF  
002282  1  68 48 09 08  
00228E  1  A9 00 48 A9          set_a 1,0
002292  1  01 28        
002294  1  24 15                bit zp1+2   ;41 - should set V (M6) / clear NZ
002296  1  08 C9 01 F0          tst_a 1,fv
00229A  1  03 20 FF FF  
00229E  1  68 48 09 08  
0022AA  1  A9 00 48 A9          set_a 1,0
0022AE  1  01 28        
0022B0  1  24 14                bit zp1+1   ;82 - should set N (M7) & Z / clear V
0022B2  1  08 C9 01 F0          tst_a 1,fnz
0022B6  1  03 20 FF FF  
0022BA  1  68 48 09 08  
0022C6  1  A9 00 48 A9          set_a 1,0
0022CA  1  01 28        
0022CC  1  24 13                bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
0022CE  1  08 C9 01 F0          tst_a 1,fnv
0022D2  1  03 20 FF FF  
0022D6  1  68 48 09 08  
0022E2  1               
0022E2  1  A9 FF 48 A9          set_a $ff,$ff
0022E6  1  FF 28        
0022E8  1  24 16                bit zp1+3   ;00 - should set Z / clear  NV
0022EA  1  08 C9 FF F0          tst_a $ff,~fnv
0022EE  1  03 20 FF FF  
0022F2  1  68 48 09 08  
0022FE  1  A9 FF 48 A9          set_a 1,$ff
002302  1  01 28        
002304  1  24 15                bit zp1+2   ;41 - should set V (M6) / clear NZ
002306  1  08 C9 01 F0          tst_a 1,~fnz
00230A  1  03 20 FF FF  
00230E  1  68 48 09 08  
00231A  1  A9 FF 48 A9          set_a 1,$ff
00231E  1  01 28        
002320  1  24 14                bit zp1+1   ;82 - should set N (M7) & Z / clear V
002322  1  08 C9 01 F0          tst_a 1,~fv
002326  1  03 20 FF FF  
00232A  1  68 48 09 08  
002336  1  A9 FF 48 A9          set_a 1,$ff
00233A  1  01 28        
00233C  1  24 13                bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
00233E  1  08 C9 01 F0          tst_a 1,~fz
002342  1  03 20 FF FF  
002346  1  68 48 09 08  
002352  1               
002352  1  A9 00 48 A9          set_a $ff,0
002356  1  FF 28        
002358  1  2C 1A 02             bit abs1+3  ;00 - should set Z / clear  NV
00235B  1  08 C9 FF F0          tst_a $ff,fz
00235F  1  03 20 FF FF  
002363  1  68 48 09 08  
00236F  1  A9 00 48 A9          set_a 1,0
002373  1  01 28        
002375  1  2C 19 02             bit abs1+2  ;41 - should set V (M6) / clear NZ
002378  1  08 C9 01 F0          tst_a 1,fv
00237C  1  03 20 FF FF  
002380  1  68 48 09 08  
00238C  1  A9 00 48 A9          set_a 1,0
002390  1  01 28        
002392  1  2C 18 02             bit abs1+1  ;82 - should set N (M7) & Z / clear V
002395  1  08 C9 01 F0          tst_a 1,fnz
002399  1  03 20 FF FF  
00239D  1  68 48 09 08  
0023A9  1  A9 00 48 A9          set_a 1,0
0023AD  1  01 28        
0023AF  1  2C 17 02             bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
0023B2  1  08 C9 01 F0          tst_a 1,fnv
0023B6  1  03 20 FF FF  
0023BA  1  68 48 09 08  
0023C6  1               
0023C6  1  A9 FF 48 A9          set_a $ff,$ff
0023CA  1  FF 28        
0023CC  1  2C 1A 02             bit abs1+3  ;00 - should set Z / clear  NV
0023CF  1  08 C9 FF F0          tst_a $ff,~fnv
0023D3  1  03 20 FF FF  
0023D7  1  68 48 09 08  
0023E3  1  A9 FF 48 A9          set_a 1,$ff
0023E7  1  01 28        
0023E9  1  2C 19 02             bit abs1+2  ;41 - should set V (M6) / clear NZ
0023EC  1  08 C9 01 F0          tst_a 1,~fnz
0023F0  1  03 20 FF FF  
0023F4  1  68 48 09 08  
002400  1  A9 FF 48 A9          set_a 1,$ff
002404  1  01 28        
002406  1  2C 18 02             bit abs1+1  ;82 - should set N (M7) & Z / clear V
002409  1  08 C9 01 F0          tst_a 1,~fv
00240D  1  03 20 FF FF  
002411  1  68 48 09 08  
00241D  1  A9 FF 48 A9          set_a 1,$ff
002421  1  01 28        
002423  1  2C 17 02             bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
002426  1  08 C9 01 F0          tst_a 1,~fz
00242A  1  03 20 FF FF  
00242E  1  68 48 09 08  
00243A  1  AD 00 02 C9          next_test
00243E  1  19 F0 03 20  
002442  1  FF FF A9 1A  
002449  1               
002449  1               ; CPX - zp / abs / #
002449  1  A9 00 48 A2          set_x $80,0
00244D  1  80 28        
00244F  1  E4 17                cpx zp7f
002451  1  08 68 48 09          tst_stat fc
002455  1  08 C9 39 F0  
002459  1  03 20 FF FF  
00245E  1  CA                   dex
00245F  1  E4 17                cpx zp7f
002461  1  08 68 48 09          tst_stat fzc
002465  1  08 C9 3B F0  
002469  1  03 20 FF FF  
00246E  1  CA                   dex
00246F  1  E4 17                cpx zp7f
002471  1  08 E0 7E F0          tst_x $7e,fn
002475  1  03 20 FF FF  
002479  1  68 48 09 08  
002485  1  A9 FF 48 A2          set_x $80,$ff
002489  1  80 28        
00248B  1  E4 17                cpx zp7f
00248D  1  08 68 48 09          tst_stat ~fnz
002491  1  08 C9 7D F0  
002495  1  03 20 FF FF  
00249A  1  CA                   dex
00249B  1  E4 17                cpx zp7f
00249D  1  08 68 48 09          tst_stat ~fn
0024A1  1  08 C9 7F F0  
0024A5  1  03 20 FF FF  
0024AA  1  CA                   dex
0024AB  1  E4 17                cpx zp7f
0024AD  1  08 E0 7E F0          tst_x $7e,~fzc
0024B1  1  03 20 FF FF  
0024B5  1  68 48 09 08  
0024C1  1               
0024C1  1  A9 00 48 A2          set_x $80,0
0024C5  1  80 28        
0024C7  1  EC 1B 02             cpx abs7f
0024CA  1  08 68 48 09          tst_stat fc
0024CE  1  08 C9 39 F0  
0024D2  1  03 20 FF FF  
0024D7  1  CA                   dex
0024D8  1  EC 1B 02             cpx abs7f
0024DB  1  08 68 48 09          tst_stat fzc
0024DF  1  08 C9 3B F0  
0024E3  1  03 20 FF FF  
0024E8  1  CA                   dex
0024E9  1  EC 1B 02             cpx abs7f
0024EC  1  08 E0 7E F0          tst_x $7e,fn
0024F0  1  03 20 FF FF  
0024F4  1  68 48 09 08  
002500  1  A9 FF 48 A2          set_x $80,$ff
002504  1  80 28        
002506  1  EC 1B 02             cpx abs7f
002509  1  08 68 48 09          tst_stat ~fnz
00250D  1  08 C9 7D F0  
002511  1  03 20 FF FF  
002516  1  CA                   dex
002517  1  EC 1B 02             cpx abs7f
00251A  1  08 68 48 09          tst_stat ~fn
00251E  1  08 C9 7F F0  
002522  1  03 20 FF FF  
002527  1  CA                   dex
002528  1  EC 1B 02             cpx abs7f
00252B  1  08 E0 7E F0          tst_x $7e,~fzc
00252F  1  03 20 FF FF  
002533  1  68 48 09 08  
00253F  1               
00253F  1  A9 00 48 A2          set_x $80,0
002543  1  80 28        
002545  1  E0 7F                cpx #$7f
002547  1  08 68 48 09          tst_stat fc
00254B  1  08 C9 39 F0  
00254F  1  03 20 FF FF  
002554  1  CA                   dex
002555  1  E0 7F                cpx #$7f
002557  1  08 68 48 09          tst_stat fzc
00255B  1  08 C9 3B F0  
00255F  1  03 20 FF FF  
002564  1  CA                   dex
002565  1  E0 7F                cpx #$7f
002567  1  08 E0 7E F0          tst_x $7e,fn
00256B  1  03 20 FF FF  
00256F  1  68 48 09 08  
00257B  1  A9 FF 48 A2          set_x $80,$ff
00257F  1  80 28        
002581  1  E0 7F                cpx #$7f
002583  1  08 68 48 09          tst_stat ~fnz
002587  1  08 C9 7D F0  
00258B  1  03 20 FF FF  
002590  1  CA                   dex
002591  1  E0 7F                cpx #$7f
002593  1  08 68 48 09          tst_stat ~fn
002597  1  08 C9 7F F0  
00259B  1  03 20 FF FF  
0025A0  1  CA                   dex
0025A1  1  E0 7F                cpx #$7f
0025A3  1  08 E0 7E F0          tst_x $7e,~fzc
0025A7  1  03 20 FF FF  
0025AB  1  68 48 09 08  
0025B7  1  AD 00 02 C9          next_test
0025BB  1  1A F0 03 20  
0025BF  1  FF FF A9 1B  
0025C6  1               
0025C6  1               ; CPY - zp / abs / #
0025C6  1  A9 00 48 A0          set_y $80,0
0025CA  1  80 28        
0025CC  1  C4 17                cpy zp7f
0025CE  1  08 68 48 09          tst_stat fc
0025D2  1  08 C9 39 F0  
0025D6  1  03 20 FF FF  
0025DB  1  88                   dey
0025DC  1  C4 17                cpy zp7f
0025DE  1  08 68 48 09          tst_stat fzc
0025E2  1  08 C9 3B F0  
0025E6  1  03 20 FF FF  
0025EB  1  88                   dey
0025EC  1  C4 17                cpy zp7f
0025EE  1  08 C0 7E F0          tst_y $7e,fn
0025F2  1  03 20 FF FF  
0025F6  1  68 48 09 08  
002602  1  A9 FF 48 A0          set_y $80,$ff
002606  1  80 28        
002608  1  C4 17                cpy zp7f
00260A  1  08 68 48 09          tst_stat ~fnz
00260E  1  08 C9 7D F0  
002612  1  03 20 FF FF  
002617  1  88                   dey
002618  1  C4 17                cpy zp7f
00261A  1  08 68 48 09          tst_stat ~fn
00261E  1  08 C9 7F F0  
002622  1  03 20 FF FF  
002627  1  88                   dey
002628  1  C4 17                cpy zp7f
00262A  1  08 C0 7E F0          tst_y $7e,~fzc
00262E  1  03 20 FF FF  
002632  1  68 48 09 08  
00263E  1               
00263E  1  A9 00 48 A0          set_y $80,0
002642  1  80 28        
002644  1  CC 1B 02             cpy abs7f
002647  1  08 68 48 09          tst_stat fc
00264B  1  08 C9 39 F0  
00264F  1  03 20 FF FF  
002654  1  88                   dey
002655  1  CC 1B 02             cpy abs7f
002658  1  08 68 48 09          tst_stat fzc
00265C  1  08 C9 3B F0  
002660  1  03 20 FF FF  
002665  1  88                   dey
002666  1  CC 1B 02             cpy abs7f
002669  1  08 C0 7E F0          tst_y $7e,fn
00266D  1  03 20 FF FF  
002671  1  68 48 09 08  
00267D  1  A9 FF 48 A0          set_y $80,$ff
002681  1  80 28        
002683  1  CC 1B 02             cpy abs7f
002686  1  08 68 48 09          tst_stat ~fnz
00268A  1  08 C9 7D F0  
00268E  1  03 20 FF FF  
002693  1  88                   dey
002694  1  CC 1B 02             cpy abs7f
002697  1  08 68 48 09          tst_stat ~fn
00269B  1  08 C9 7F F0  
00269F  1  03 20 FF FF  
0026A4  1  88                   dey
0026A5  1  CC 1B 02             cpy abs7f
0026A8  1  08 C0 7E F0          tst_y $7e,~fzc
0026AC  1  03 20 FF FF  
0026B0  1  68 48 09 08  
0026BC  1               
0026BC  1  A9 00 48 A0          set_y $80,0
0026C0  1  80 28        
0026C2  1  C0 7F                cpy #$7f
0026C4  1  08 68 48 09          tst_stat fc
0026C8  1  08 C9 39 F0  
0026CC  1  03 20 FF FF  
0026D1  1  88                   dey
0026D2  1  C0 7F                cpy #$7f
0026D4  1  08 68 48 09          tst_stat fzc
0026D8  1  08 C9 3B F0  
0026DC  1  03 20 FF FF  
0026E1  1  88                   dey
0026E2  1  C0 7F                cpy #$7f
0026E4  1  08 C0 7E F0          tst_y $7e,fn
0026E8  1  03 20 FF FF  
0026EC  1  68 48 09 08  
0026F8  1  A9 FF 48 A0          set_y $80,$ff
0026FC  1  80 28        
0026FE  1  C0 7F                cpy #$7f
002700  1  08 68 48 09          tst_stat ~fnz
002704  1  08 C9 7D F0  
002708  1  03 20 FF FF  
00270D  1  88                   dey
00270E  1  C0 7F                cpy #$7f
002710  1  08 68 48 09          tst_stat ~fn
002714  1  08 C9 7F F0  
002718  1  03 20 FF FF  
00271D  1  88                   dey
00271E  1  C0 7F                cpy #$7f
002720  1  08 C0 7E F0          tst_y $7e,~fzc
002724  1  03 20 FF FF  
002728  1  68 48 09 08  
002734  1  AD 00 02 C9          next_test
002738  1  1B F0 03 20  
00273C  1  FF FF A9 1C  
002743  1               
002743  1               ; CMP - zp / abs / #
002743  1  A9 00 48 A9          set_a $80,0
002747  1  80 28        
002749  1  C5 17                cmp zp7f
00274B  1  08 C9 80 F0          tst_a $80,fc
00274F  1  03 20 FF FF  
002753  1  68 48 09 08  
00275F  1  A9 00 48 A9          set_a $7f,0
002763  1  7F 28        
002765  1  C5 17                cmp zp7f
002767  1  08 C9 7F F0          tst_a $7f,fzc
00276B  1  03 20 FF FF  
00276F  1  68 48 09 08  
00277B  1  A9 00 48 A9          set_a $7e,0
00277F  1  7E 28        
002781  1  C5 17                cmp zp7f
002783  1  08 C9 7E F0          tst_a $7e,fn
002787  1  03 20 FF FF  
00278B  1  68 48 09 08  
002797  1  A9 FF 48 A9          set_a $80,$ff
00279B  1  80 28        
00279D  1  C5 17                cmp zp7f
00279F  1  08 C9 80 F0          tst_a $80,~fnz
0027A3  1  03 20 FF FF  
0027A7  1  68 48 09 08  
0027B3  1  A9 FF 48 A9          set_a $7f,$ff
0027B7  1  7F 28        
0027B9  1  C5 17                cmp zp7f
0027BB  1  08 C9 7F F0          tst_a $7f,~fn
0027BF  1  03 20 FF FF  
0027C3  1  68 48 09 08  
0027CF  1  A9 FF 48 A9          set_a $7e,$ff
0027D3  1  7E 28        
0027D5  1  C5 17                cmp zp7f
0027D7  1  08 C9 7E F0          tst_a $7e,~fzc
0027DB  1  03 20 FF FF  
0027DF  1  68 48 09 08  
0027EB  1               
0027EB  1  A9 00 48 A9          set_a $80,0
0027EF  1  80 28        
0027F1  1  CD 1B 02             cmp abs7f
0027F4  1  08 C9 80 F0          tst_a $80,fc
0027F8  1  03 20 FF FF  
0027FC  1  68 48 09 08  
002808  1  A9 00 48 A9          set_a $7f,0
00280C  1  7F 28        
00280E  1  CD 1B 02             cmp abs7f
002811  1  08 C9 7F F0          tst_a $7f,fzc
002815  1  03 20 FF FF  
002819  1  68 48 09 08  
002825  1  A9 00 48 A9          set_a $7e,0
002829  1  7E 28        
00282B  1  CD 1B 02             cmp abs7f
00282E  1  08 C9 7E F0          tst_a $7e,fn
002832  1  03 20 FF FF  
002836  1  68 48 09 08  
002842  1  A9 FF 48 A9          set_a $80,$ff
002846  1  80 28        
002848  1  CD 1B 02             cmp abs7f
00284B  1  08 C9 80 F0          tst_a $80,~fnz
00284F  1  03 20 FF FF  
002853  1  68 48 09 08  
00285F  1  A9 FF 48 A9          set_a $7f,$ff
002863  1  7F 28        
002865  1  CD 1B 02             cmp abs7f
002868  1  08 C9 7F F0          tst_a $7f,~fn
00286C  1  03 20 FF FF  
002870  1  68 48 09 08  
00287C  1  A9 FF 48 A9          set_a $7e,$ff
002880  1  7E 28        
002882  1  CD 1B 02             cmp abs7f
002885  1  08 C9 7E F0          tst_a $7e,~fzc
002889  1  03 20 FF FF  
00288D  1  68 48 09 08  
002899  1               
002899  1  A9 00 48 A9          set_a $80,0
00289D  1  80 28        
00289F  1  C9 7F                cmp #$7f
0028A1  1  08 C9 80 F0          tst_a $80,fc
0028A5  1  03 20 FF FF  
0028A9  1  68 48 09 08  
0028B5  1  A9 00 48 A9          set_a $7f,0
0028B9  1  7F 28        
0028BB  1  C9 7F                cmp #$7f
0028BD  1  08 C9 7F F0          tst_a $7f,fzc
0028C1  1  03 20 FF FF  
0028C5  1  68 48 09 08  
0028D1  1  A9 00 48 A9          set_a $7e,0
0028D5  1  7E 28        
0028D7  1  C9 7F                cmp #$7f
0028D9  1  08 C9 7E F0          tst_a $7e,fn
0028DD  1  03 20 FF FF  
0028E1  1  68 48 09 08  
0028ED  1  A9 FF 48 A9          set_a $80,$ff
0028F1  1  80 28        
0028F3  1  C9 7F                cmp #$7f
0028F5  1  08 C9 80 F0          tst_a $80,~fnz
0028F9  1  03 20 FF FF  
0028FD  1  68 48 09 08  
002909  1  A9 FF 48 A9          set_a $7f,$ff
00290D  1  7F 28        
00290F  1  C9 7F                cmp #$7f
002911  1  08 C9 7F F0          tst_a $7f,~fn
002915  1  03 20 FF FF  
002919  1  68 48 09 08  
002925  1  A9 FF 48 A9          set_a $7e,$ff
002929  1  7E 28        
00292B  1  C9 7F                cmp #$7f
00292D  1  08 C9 7E F0          tst_a $7e,~fzc
002931  1  03 20 FF FF  
002935  1  68 48 09 08  
002941  1               
002941  1  A2 04                ldx #4          ;with indexing by X
002943  1  A9 00 48 A9          set_a $80,0
002947  1  80 28        
002949  1  D5 13                cmp zp1,x
00294B  1  08 C9 80 F0          tst_a $80,fc
00294F  1  03 20 FF FF  
002953  1  68 48 09 08  
00295F  1  A9 00 48 A9          set_a $7f,0
002963  1  7F 28        
002965  1  D5 13                cmp zp1,x
002967  1  08 C9 7F F0          tst_a $7f,fzc
00296B  1  03 20 FF FF  
00296F  1  68 48 09 08  
00297B  1  A9 00 48 A9          set_a $7e,0
00297F  1  7E 28        
002981  1  D5 13                cmp zp1,x
002983  1  08 C9 7E F0          tst_a $7e,fn
002987  1  03 20 FF FF  
00298B  1  68 48 09 08  
002997  1  A9 FF 48 A9          set_a $80,$ff
00299B  1  80 28        
00299D  1  D5 13                cmp zp1,x
00299F  1  08 C9 80 F0          tst_a $80,~fnz
0029A3  1  03 20 FF FF  
0029A7  1  68 48 09 08  
0029B3  1  A9 FF 48 A9          set_a $7f,$ff
0029B7  1  7F 28        
0029B9  1  D5 13                cmp zp1,x
0029BB  1  08 C9 7F F0          tst_a $7f,~fn
0029BF  1  03 20 FF FF  
0029C3  1  68 48 09 08  
0029CF  1  A9 FF 48 A9          set_a $7e,$ff
0029D3  1  7E 28        
0029D5  1  D5 13                cmp zp1,x
0029D7  1  08 C9 7E F0          tst_a $7e,~fzc
0029DB  1  03 20 FF FF  
0029DF  1  68 48 09 08  
0029EB  1               
0029EB  1  A9 00 48 A9          set_a $80,0
0029EF  1  80 28        
0029F1  1  DD 17 02             cmp abs1,x
0029F4  1  08 C9 80 F0          tst_a $80,fc
0029F8  1  03 20 FF FF  
0029FC  1  68 48 09 08  
002A08  1  A9 00 48 A9          set_a $7f,0
002A0C  1  7F 28        
002A0E  1  DD 17 02             cmp abs1,x
002A11  1  08 C9 7F F0          tst_a $7f,fzc
002A15  1  03 20 FF FF  
002A19  1  68 48 09 08  
002A25  1  A9 00 48 A9          set_a $7e,0
002A29  1  7E 28        
002A2B  1  DD 17 02             cmp abs1,x
002A2E  1  08 C9 7E F0          tst_a $7e,fn
002A32  1  03 20 FF FF  
002A36  1  68 48 09 08  
002A42  1  A9 FF 48 A9          set_a $80,$ff
002A46  1  80 28        
002A48  1  DD 17 02             cmp abs1,x
002A4B  1  08 C9 80 F0          tst_a $80,~fnz
002A4F  1  03 20 FF FF  
002A53  1  68 48 09 08  
002A5F  1  A9 FF 48 A9          set_a $7f,$ff
002A63  1  7F 28        
002A65  1  DD 17 02             cmp abs1,x
002A68  1  08 C9 7F F0          tst_a $7f,~fn
002A6C  1  03 20 FF FF  
002A70  1  68 48 09 08  
002A7C  1  A9 FF 48 A9          set_a $7e,$ff
002A80  1  7E 28        
002A82  1  DD 17 02             cmp abs1,x
002A85  1  08 C9 7E F0          tst_a $7e,~fzc
002A89  1  03 20 FF FF  
002A8D  1  68 48 09 08  
002A99  1               
002A99  1  A0 04                ldy #4          ;with indexing by Y
002A9B  1  A2 08                ldx #8          ;with indexed indirect
002A9D  1  A9 00 48 A9          set_a $80,0
002AA1  1  80 28        
002AA3  1  D9 17 02             cmp abs1,y
002AA6  1  08 C9 80 F0          tst_a $80,fc
002AAA  1  03 20 FF FF  
002AAE  1  68 48 09 08  
002ABA  1  A9 00 48 A9          set_a $7f,0
002ABE  1  7F 28        
002AC0  1  D9 17 02             cmp abs1,y
002AC3  1  08 C9 7F F0          tst_a $7f,fzc
002AC7  1  03 20 FF FF  
002ACB  1  68 48 09 08  
002AD7  1  A9 00 48 A9          set_a $7e,0
002ADB  1  7E 28        
002ADD  1  D9 17 02             cmp abs1,y
002AE0  1  08 C9 7E F0          tst_a $7e,fn
002AE4  1  03 20 FF FF  
002AE8  1  68 48 09 08  
002AF4  1  A9 FF 48 A9          set_a $80,$ff
002AF8  1  80 28        
002AFA  1  D9 17 02             cmp abs1,y
002AFD  1  08 C9 80 F0          tst_a $80,~fnz
002B01  1  03 20 FF FF  
002B05  1  68 48 09 08  
002B11  1  A9 FF 48 A9          set_a $7f,$ff
002B15  1  7F 28        
002B17  1  D9 17 02             cmp abs1,y
002B1A  1  08 C9 7F F0          tst_a $7f,~fn
002B1E  1  03 20 FF FF  
002B22  1  68 48 09 08  
002B2E  1  A9 FF 48 A9          set_a $7e,$ff
002B32  1  7E 28        
002B34  1  D9 17 02             cmp abs1,y
002B37  1  08 C9 7E F0          tst_a $7e,~fzc
002B3B  1  03 20 FF FF  
002B3F  1  68 48 09 08  
002B4B  1               
002B4B  1  A9 00 48 A9          set_a $80,0
002B4F  1  80 28        
002B51  1  C1 24                cmp (ind1,x)
002B53  1  08 C9 80 F0          tst_a $80,fc
002B57  1  03 20 FF FF  
002B5B  1  68 48 09 08  
002B67  1  A9 00 48 A9          set_a $7f,0
002B6B  1  7F 28        
002B6D  1  C1 24                cmp (ind1,x)
002B6F  1  08 C9 7F F0          tst_a $7f,fzc
002B73  1  03 20 FF FF  
002B77  1  68 48 09 08  
002B83  1  A9 00 48 A9          set_a $7e,0
002B87  1  7E 28        
002B89  1  C1 24                cmp (ind1,x)
002B8B  1  08 C9 7E F0          tst_a $7e,fn
002B8F  1  03 20 FF FF  
002B93  1  68 48 09 08  
002B9F  1  A9 FF 48 A9          set_a $80,$ff
002BA3  1  80 28        
002BA5  1  C1 24                cmp (ind1,x)
002BA7  1  08 C9 80 F0          tst_a $80,~fnz
002BAB  1  03 20 FF FF  
002BAF  1  68 48 09 08  
002BBB  1  A9 FF 48 A9          set_a $7f,$ff
002BBF  1  7F 28        
002BC1  1  C1 24                cmp (ind1,x)
002BC3  1  08 C9 7F F0          tst_a $7f,~fn
002BC7  1  03 20 FF FF  
002BCB  1  68 48 09 08  
002BD7  1  A9 FF 48 A9          set_a $7e,$ff
002BDB  1  7E 28        
002BDD  1  C1 24                cmp (ind1,x)
002BDF  1  08 C9 7E F0          tst_a $7e,~fzc
002BE3  1  03 20 FF FF  
002BE7  1  68 48 09 08  
002BF3  1               
002BF3  1  A9 00 48 A9          set_a $80,0
002BF7  1  80 28        
002BF9  1  D1 24                cmp (ind1),y
002BFB  1  08 C9 80 F0          tst_a $80,fc
002BFF  1  03 20 FF FF  
002C03  1  68 48 09 08  
002C0F  1  A9 00 48 A9          set_a $7f,0
002C13  1  7F 28        
002C15  1  D1 24                cmp (ind1),y
002C17  1  08 C9 7F F0          tst_a $7f,fzc
002C1B  1  03 20 FF FF  
002C1F  1  68 48 09 08  
002C2B  1  A9 00 48 A9          set_a $7e,0
002C2F  1  7E 28        
002C31  1  D1 24                cmp (ind1),y
002C33  1  08 C9 7E F0          tst_a $7e,fn
002C37  1  03 20 FF FF  
002C3B  1  68 48 09 08  
002C47  1  A9 FF 48 A9          set_a $80,$ff
002C4B  1  80 28        
002C4D  1  D1 24                cmp (ind1),y
002C4F  1  08 C9 80 F0          tst_a $80,~fnz
002C53  1  03 20 FF FF  
002C57  1  68 48 09 08  
002C63  1  A9 FF 48 A9          set_a $7f,$ff
002C67  1  7F 28        
002C69  1  D1 24                cmp (ind1),y
002C6B  1  08 C9 7F F0          tst_a $7f,~fn
002C6F  1  03 20 FF FF  
002C73  1  68 48 09 08  
002C7F  1  A9 FF 48 A9          set_a $7e,$ff
002C83  1  7E 28        
002C85  1  D1 24                cmp (ind1),y
002C87  1  08 C9 7E F0          tst_a $7e,~fzc
002C8B  1  03 20 FF FF  
002C8F  1  68 48 09 08  
002C9B  1  AD 00 02 C9          next_test
002C9F  1  1C F0 03 20  
002CA3  1  FF FF A9 1D  
002CAA  1               
002CAA  1               ; testing shifts - ASL LSR ROL ROR all addressing modes
002CAA  1               ; shifts - accumulator
002CAA  1  A2 03                ldx #3
002CAC  1               tasl:
002CAC  1  A9 00 48 B5          set_ax zp1,0
002CB0  1  13 28        
002CB2  1  0A                   asl a
002CB3  1  08 DD 20 02          tst_ax rASL,fASL,0
002CB7  1  F0 03 20 FF  
002CBB  1  FF 68 09 08  
002CC9  1  CA                   dex
002CCA  1  10 E0                bpl tasl
002CCC  1  A2 03                ldx #3
002CCE  1               tasl1:
002CCE  1  A9 FF 48 B5          set_ax zp1,$ff
002CD2  1  13 28        
002CD4  1  0A                   asl a
002CD5  1  08 DD 20 02          tst_ax rASL,fASL,$ff-fnzc
002CD9  1  F0 03 20 FF  
002CDD  1  FF 68 09 08  
002CEB  1  CA                   dex
002CEC  1  10 E0                bpl tasl1
002CEE  1               
002CEE  1  A2 03                ldx #3
002CF0  1               tlsr:
002CF0  1  A9 00 48 B5          set_ax zp1,0
002CF4  1  13 28        
002CF6  1  4A                   lsr a
002CF7  1  08 DD 28 02          tst_ax rLSR,fLSR,0
002CFB  1  F0 03 20 FF  
002CFF  1  FF 68 09 08  
002D0D  1  CA                   dex
002D0E  1  10 E0                bpl tlsr
002D10  1  A2 03                ldx #3
002D12  1               tlsr1:
002D12  1  A9 FF 48 B5          set_ax zp1,$ff
002D16  1  13 28        
002D18  1  4A                   lsr a
002D19  1  08 DD 28 02          tst_ax rLSR,fLSR,$ff-fnzc
002D1D  1  F0 03 20 FF  
002D21  1  FF 68 09 08  
002D2F  1  CA                   dex
002D30  1  10 E0                bpl tlsr1
002D32  1               
002D32  1  A2 03                ldx #3
002D34  1               trol:
002D34  1  A9 00 48 B5          set_ax zp1,0
002D38  1  13 28        
002D3A  1  2A                   rol a
002D3B  1  08 DD 20 02          tst_ax rROL,fROL,0
002D3F  1  F0 03 20 FF  
002D43  1  FF 68 09 08  
002D51  1  CA                   dex
002D52  1  10 E0                bpl trol
002D54  1  A2 03                ldx #3
002D56  1               trol1:
002D56  1  A9 FE 48 B5          set_ax zp1,$ff-fc
002D5A  1  13 28        
002D5C  1  2A                   rol a
002D5D  1  08 DD 20 02          tst_ax rROL,fROL,$ff-fnzc
002D61  1  F0 03 20 FF  
002D65  1  FF 68 09 08  
002D73  1  CA                   dex
002D74  1  10 E0                bpl trol1
002D76  1               
002D76  1  A2 03                ldx #3
002D78  1               trolc:
002D78  1  A9 01 48 B5          set_ax zp1,fc
002D7C  1  13 28        
002D7E  1  2A                   rol a
002D7F  1  08 DD 24 02          tst_ax rROLc,fROLc,0
002D83  1  F0 03 20 FF  
002D87  1  FF 68 09 08  
002D95  1  CA                   dex
002D96  1  10 E0                bpl trolc
002D98  1  A2 03                ldx #3
002D9A  1               trolc1:
002D9A  1  A9 FF 48 B5          set_ax zp1,$ff
002D9E  1  13 28        
002DA0  1  2A                   rol a
002DA1  1  08 DD 24 02          tst_ax rROLc,fROLc,$ff-fnzc
002DA5  1  F0 03 20 FF  
002DA9  1  FF 68 09 08  
002DB7  1  CA                   dex
002DB8  1  10 E0                bpl trolc1
002DBA  1               
002DBA  1  A2 03                ldx #3
002DBC  1               tror:
002DBC  1  A9 00 48 B5          set_ax zp1,0
002DC0  1  13 28        
002DC2  1  6A                   ror a
002DC3  1  08 DD 28 02          tst_ax rROR,fROR,0
002DC7  1  F0 03 20 FF  
002DCB  1  FF 68 09 08  
002DD9  1  CA                   dex
002DDA  1  10 E0                bpl tror
002DDC  1  A2 03                ldx #3
002DDE  1               tror1:
002DDE  1  A9 FE 48 B5          set_ax zp1,$ff-fc
002DE2  1  13 28        
002DE4  1  6A                   ror a
002DE5  1  08 DD 28 02          tst_ax rROR,fROR,$ff-fnzc
002DE9  1  F0 03 20 FF  
002DED  1  FF 68 09 08  
002DFB  1  CA                   dex
002DFC  1  10 E0                bpl tror1
002DFE  1               
002DFE  1  A2 03                ldx #3
002E00  1               trorc:
002E00  1  A9 01 48 B5          set_ax zp1,fc
002E04  1  13 28        
002E06  1  6A                   ror a
002E07  1  08 DD 2C 02          tst_ax rRORc,fRORc,0
002E0B  1  F0 03 20 FF  
002E0F  1  FF 68 09 08  
002E1D  1  CA                   dex
002E1E  1  10 E0                bpl trorc
002E20  1  A2 03                ldx #3
002E22  1               trorc1:
002E22  1  A9 FF 48 B5          set_ax zp1,$ff
002E26  1  13 28        
002E28  1  6A                   ror a
002E29  1  08 DD 2C 02          tst_ax rRORc,fRORc,$ff-fnzc
002E2D  1  F0 03 20 FF  
002E31  1  FF 68 09 08  
002E3F  1  CA                   dex
002E40  1  10 E0                bpl trorc1
002E42  1  AD 00 02 C9          next_test
002E46  1  1D F0 03 20  
002E4A  1  FF FF A9 1E  
002E51  1               
002E51  1               ; shifts - zeropage
002E51  1  A2 03                ldx #3
002E53  1               tasl2:
002E53  1  A9 00 48 B5          set_z zp1,0
002E57  1  13 85 0C 28  
002E5B  1  06 0C                asl zpt
002E5D  1  08 A5 0C DD          tst_z rASL,fASL,0
002E61  1  20 02 F0 03  
002E65  1  20 FF FF 68  
002E75  1  CA                   dex
002E76  1  10 DB                bpl tasl2
002E78  1  A2 03                ldx #3
002E7A  1               tasl3:
002E7A  1  A9 FF 48 B5          set_z zp1,$ff
002E7E  1  13 85 0C 28  
002E82  1  06 0C                asl zpt
002E84  1  08 A5 0C DD          tst_z rASL,fASL,$ff-fnzc
002E88  1  20 02 F0 03  
002E8C  1  20 FF FF 68  
002E9C  1  CA                   dex
002E9D  1  10 DB                bpl tasl3
002E9F  1               
002E9F  1  A2 03                ldx #3
002EA1  1               tlsr2:
002EA1  1  A9 00 48 B5          set_z zp1,0
002EA5  1  13 85 0C 28  
002EA9  1  46 0C                lsr zpt
002EAB  1  08 A5 0C DD          tst_z rLSR,fLSR,0
002EAF  1  28 02 F0 03  
002EB3  1  20 FF FF 68  
002EC3  1  CA                   dex
002EC4  1  10 DB                bpl tlsr2
002EC6  1  A2 03                ldx #3
002EC8  1               tlsr3:
002EC8  1  A9 FF 48 B5          set_z zp1,$ff
002ECC  1  13 85 0C 28  
002ED0  1  46 0C                lsr zpt
002ED2  1  08 A5 0C DD          tst_z rLSR,fLSR,$ff-fnzc
002ED6  1  28 02 F0 03  
002EDA  1  20 FF FF 68  
002EEA  1  CA                   dex
002EEB  1  10 DB                bpl tlsr3
002EED  1               
002EED  1  A2 03                ldx #3
002EEF  1               trol2:
002EEF  1  A9 00 48 B5          set_z zp1,0
002EF3  1  13 85 0C 28  
002EF7  1  26 0C                rol zpt
002EF9  1  08 A5 0C DD          tst_z rROL,fROL,0
002EFD  1  20 02 F0 03  
002F01  1  20 FF FF 68  
002F11  1  CA                   dex
002F12  1  10 DB                bpl trol2
002F14  1  A2 03                ldx #3
002F16  1               trol3:
002F16  1  A9 FE 48 B5          set_z zp1,$ff-fc
002F1A  1  13 85 0C 28  
002F1E  1  26 0C                rol zpt
002F20  1  08 A5 0C DD          tst_z rROL,fROL,$ff-fnzc
002F24  1  20 02 F0 03  
002F28  1  20 FF FF 68  
002F38  1  CA                   dex
002F39  1  10 DB                bpl trol3
002F3B  1               
002F3B  1  A2 03                ldx #3
002F3D  1               trolc2:
002F3D  1  A9 01 48 B5          set_z zp1,fc
002F41  1  13 85 0C 28  
002F45  1  26 0C                rol zpt
002F47  1  08 A5 0C DD          tst_z rROLc,fROLc,0
002F4B  1  24 02 F0 03  
002F4F  1  20 FF FF 68  
002F5F  1  CA                   dex
002F60  1  10 DB                bpl trolc2
002F62  1  A2 03                ldx #3
002F64  1               trolc3:
002F64  1  A9 FF 48 B5          set_z zp1,$ff
002F68  1  13 85 0C 28  
002F6C  1  26 0C                rol zpt
002F6E  1  08 A5 0C DD          tst_z rROLc,fROLc,$ff-fnzc
002F72  1  24 02 F0 03  
002F76  1  20 FF FF 68  
002F86  1  CA                   dex
002F87  1  10 DB                bpl trolc3
002F89  1               
002F89  1  A2 03                ldx #3
002F8B  1               tror2:
002F8B  1  A9 00 48 B5          set_z zp1,0
002F8F  1  13 85 0C 28  
002F93  1  66 0C                ror zpt
002F95  1  08 A5 0C DD          tst_z rROR,fROR,0
002F99  1  28 02 F0 03  
002F9D  1  20 FF FF 68  
002FAD  1  CA                   dex
002FAE  1  10 DB                bpl tror2
002FB0  1  A2 03                ldx #3
002FB2  1               tror3:
002FB2  1  A9 FE 48 B5          set_z zp1,$ff-fc
002FB6  1  13 85 0C 28  
002FBA  1  66 0C                ror zpt
002FBC  1  08 A5 0C DD          tst_z rROR,fROR,$ff-fnzc
002FC0  1  28 02 F0 03  
002FC4  1  20 FF FF 68  
002FD4  1  CA                   dex
002FD5  1  10 DB                bpl tror3
002FD7  1               
002FD7  1  A2 03                ldx #3
002FD9  1               trorc2:
002FD9  1  A9 01 48 B5          set_z zp1,fc
002FDD  1  13 85 0C 28  
002FE1  1  66 0C                ror zpt
002FE3  1  08 A5 0C DD          tst_z rRORc,fRORc,0
002FE7  1  2C 02 F0 03  
002FEB  1  20 FF FF 68  
002FFB  1  CA                   dex
002FFC  1  10 DB                bpl trorc2
002FFE  1  A2 03                ldx #3
003000  1               trorc3:
003000  1  A9 FF 48 B5          set_z zp1,$ff
003004  1  13 85 0C 28  
003008  1  66 0C                ror zpt
00300A  1  08 A5 0C DD          tst_z rRORc,fRORc,$ff-fnzc
00300E  1  2C 02 F0 03  
003012  1  20 FF FF 68  
003022  1  CA                   dex
003023  1  10 DB                bpl trorc3
003025  1  AD 00 02 C9          next_test
003029  1  1E F0 03 20  
00302D  1  FF FF A9 1F  
003034  1               
003034  1               ; shifts - absolute
003034  1  A2 03                ldx #3
003036  1               tasl4:
003036  1  A9 00 48 B5          set_abs zp1,0
00303A  1  13 8D 03 02  
00303E  1  28           
00303F  1  0E 03 02             asl abst
003042  1  08 AD 03 02          tst_abs rASL,fASL,0
003046  1  DD 20 02 F0  
00304A  1  03 20 FF FF  
00305B  1  CA                   dex
00305C  1  10 D8                bpl tasl4
00305E  1  A2 03                ldx #3
003060  1               tasl5:
003060  1  A9 FF 48 B5          set_abs zp1,$ff
003064  1  13 8D 03 02  
003068  1  28           
003069  1  0E 03 02             asl abst
00306C  1  08 AD 03 02          tst_abs rASL,fASL,$ff-fnzc
003070  1  DD 20 02 F0  
003074  1  03 20 FF FF  
003085  1  CA                   dex
003086  1  10 D8                bpl tasl5
003088  1               
003088  1  A2 03                ldx #3
00308A  1               tlsr4:
00308A  1  A9 00 48 B5          set_abs zp1,0
00308E  1  13 8D 03 02  
003092  1  28           
003093  1  4E 03 02             lsr abst
003096  1  08 AD 03 02          tst_abs rLSR,fLSR,0
00309A  1  DD 28 02 F0  
00309E  1  03 20 FF FF  
0030AF  1  CA                   dex
0030B0  1  10 D8                bpl tlsr4
0030B2  1  A2 03                ldx #3
0030B4  1               tlsr5:
0030B4  1  A9 FF 48 B5          set_abs zp1,$ff
0030B8  1  13 8D 03 02  
0030BC  1  28           
0030BD  1  4E 03 02             lsr abst
0030C0  1  08 AD 03 02          tst_abs rLSR,fLSR,$ff-fnzc
0030C4  1  DD 28 02 F0  
0030C8  1  03 20 FF FF  
0030D9  1  CA                   dex
0030DA  1  10 D8                bpl tlsr5
0030DC  1               
0030DC  1  A2 03                ldx #3
0030DE  1               trol4:
0030DE  1  A9 00 48 B5          set_abs zp1,0
0030E2  1  13 8D 03 02  
0030E6  1  28           
0030E7  1  2E 03 02             rol abst
0030EA  1  08 AD 03 02          tst_abs rROL,fROL,0
0030EE  1  DD 20 02 F0  
0030F2  1  03 20 FF FF  
003103  1  CA                   dex
003104  1  10 D8                bpl trol4
003106  1  A2 03                ldx #3
003108  1               trol5:
003108  1  A9 FE 48 B5          set_abs zp1,$ff-fc
00310C  1  13 8D 03 02  
003110  1  28           
003111  1  2E 03 02             rol abst
003114  1  08 AD 03 02          tst_abs rROL,fROL,$ff-fnzc
003118  1  DD 20 02 F0  
00311C  1  03 20 FF FF  
00312D  1  CA                   dex
00312E  1  10 D8                bpl trol5
003130  1               
003130  1  A2 03                ldx #3
003132  1               trolc4:
003132  1  A9 01 48 B5          set_abs zp1,fc
003136  1  13 8D 03 02  
00313A  1  28           
00313B  1  2E 03 02             rol abst
00313E  1  08 AD 03 02          tst_abs rROLc,fROLc,0
003142  1  DD 24 02 F0  
003146  1  03 20 FF FF  
003157  1  CA                   dex
003158  1  10 D8                bpl trolc4
00315A  1  A2 03                ldx #3
00315C  1               trolc5:
00315C  1  A9 FF 48 B5          set_abs zp1,$ff
003160  1  13 8D 03 02  
003164  1  28           
003165  1  2E 03 02             rol abst
003168  1  08 AD 03 02          tst_abs rROLc,fROLc,$ff-fnzc
00316C  1  DD 24 02 F0  
003170  1  03 20 FF FF  
003181  1  CA                   dex
003182  1  10 D8                bpl trolc5
003184  1               
003184  1  A2 03                ldx #3
003186  1               tror4:
003186  1  A9 00 48 B5          set_abs zp1,0
00318A  1  13 8D 03 02  
00318E  1  28           
00318F  1  6E 03 02             ror abst
003192  1  08 AD 03 02          tst_abs rROR,fROR,0
003196  1  DD 28 02 F0  
00319A  1  03 20 FF FF  
0031AB  1  CA                   dex
0031AC  1  10 D8                bpl tror4
0031AE  1  A2 03                ldx #3
0031B0  1               tror5:
0031B0  1  A9 FE 48 B5          set_abs zp1,$ff-fc
0031B4  1  13 8D 03 02  
0031B8  1  28           
0031B9  1  6E 03 02             ror abst
0031BC  1  08 AD 03 02          tst_abs rROR,fROR,$ff-fnzc
0031C0  1  DD 28 02 F0  
0031C4  1  03 20 FF FF  
0031D5  1  CA                   dex
0031D6  1  10 D8                bpl tror5
0031D8  1               
0031D8  1  A2 03                ldx #3
0031DA  1               trorc4:
0031DA  1  A9 01 48 B5          set_abs zp1,fc
0031DE  1  13 8D 03 02  
0031E2  1  28           
0031E3  1  6E 03 02             ror abst
0031E6  1  08 AD 03 02          tst_abs rRORc,fRORc,0
0031EA  1  DD 2C 02 F0  
0031EE  1  03 20 FF FF  
0031FF  1  CA                   dex
003200  1  10 D8                bpl trorc4
003202  1  A2 03                ldx #3
003204  1               trorc5:
003204  1  A9 FF 48 B5          set_abs zp1,$ff
003208  1  13 8D 03 02  
00320C  1  28           
00320D  1  6E 03 02             ror abst
003210  1  08 AD 03 02          tst_abs rRORc,fRORc,$ff-fnzc
003214  1  DD 2C 02 F0  
003218  1  03 20 FF FF  
003229  1  CA                   dex
00322A  1  10 D8                bpl trorc5
00322C  1  AD 00 02 C9          next_test
003230  1  1F F0 03 20  
003234  1  FF FF A9 20  
00323B  1               
00323B  1               ; shifts - zp indexed
00323B  1  A2 03                ldx #3
00323D  1               tasl6:
00323D  1  A9 00 48 B5          set_zx zp1,0
003241  1  13 95 0C 28  
003245  1  16 0C                asl zpt,x
003247  1  08 B5 0C DD          tst_zx rASL,fASL,0
00324B  1  20 02 F0 03  
00324F  1  20 FF FF 68  
00325F  1  CA                   dex
003260  1  10 DB                bpl tasl6
003262  1  A2 03                ldx #3
003264  1               tasl7:
003264  1  A9 FF 48 B5          set_zx zp1,$ff
003268  1  13 95 0C 28  
00326C  1  16 0C                asl zpt,x
00326E  1  08 B5 0C DD          tst_zx rASL,fASL,$ff-fnzc
003272  1  20 02 F0 03  
003276  1  20 FF FF 68  
003286  1  CA                   dex
003287  1  10 DB                bpl tasl7
003289  1               
003289  1  A2 03                ldx #3
00328B  1               tlsr6:
00328B  1  A9 00 48 B5          set_zx zp1,0
00328F  1  13 95 0C 28  
003293  1  56 0C                lsr zpt,x
003295  1  08 B5 0C DD          tst_zx rLSR,fLSR,0
003299  1  28 02 F0 03  
00329D  1  20 FF FF 68  
0032AD  1  CA                   dex
0032AE  1  10 DB                bpl tlsr6
0032B0  1  A2 03                ldx #3
0032B2  1               tlsr7:
0032B2  1  A9 FF 48 B5          set_zx zp1,$ff
0032B6  1  13 95 0C 28  
0032BA  1  56 0C                lsr zpt,x
0032BC  1  08 B5 0C DD          tst_zx rLSR,fLSR,$ff-fnzc
0032C0  1  28 02 F0 03  
0032C4  1  20 FF FF 68  
0032D4  1  CA                   dex
0032D5  1  10 DB                bpl tlsr7
0032D7  1               
0032D7  1  A2 03                ldx #3
0032D9  1               trol6:
0032D9  1  A9 00 48 B5          set_zx zp1,0
0032DD  1  13 95 0C 28  
0032E1  1  36 0C                rol zpt,x
0032E3  1  08 B5 0C DD          tst_zx rROL,fROL,0
0032E7  1  20 02 F0 03  
0032EB  1  20 FF FF 68  
0032FB  1  CA                   dex
0032FC  1  10 DB                bpl trol6
0032FE  1  A2 03                ldx #3
003300  1               trol7:
003300  1  A9 FE 48 B5          set_zx zp1,$ff-fc
003304  1  13 95 0C 28  
003308  1  36 0C                rol zpt,x
00330A  1  08 B5 0C DD          tst_zx rROL,fROL,$ff-fnzc
00330E  1  20 02 F0 03  
003312  1  20 FF FF 68  
003322  1  CA                   dex
003323  1  10 DB                bpl trol7
003325  1               
003325  1  A2 03                ldx #3
003327  1               trolc6:
003327  1  A9 01 48 B5          set_zx zp1,fc
00332B  1  13 95 0C 28  
00332F  1  36 0C                rol zpt,x
003331  1  08 B5 0C DD          tst_zx rROLc,fROLc,0
003335  1  24 02 F0 03  
003339  1  20 FF FF 68  
003349  1  CA                   dex
00334A  1  10 DB                bpl trolc6
00334C  1  A2 03                ldx #3
00334E  1               trolc7:
00334E  1  A9 FF 48 B5          set_zx zp1,$ff
003352  1  13 95 0C 28  
003356  1  36 0C                rol zpt,x
003358  1  08 B5 0C DD          tst_zx rROLc,fROLc,$ff-fnzc
00335C  1  24 02 F0 03  
003360  1  20 FF FF 68  
003370  1  CA                   dex
003371  1  10 DB                bpl trolc7
003373  1               
003373  1  A2 03                ldx #3
003375  1               tror6:
003375  1  A9 00 48 B5          set_zx zp1,0
003379  1  13 95 0C 28  
00337D  1  76 0C                ror zpt,x
00337F  1  08 B5 0C DD          tst_zx rROR,fROR,0
003383  1  28 02 F0 03  
003387  1  20 FF FF 68  
003397  1  CA                   dex
003398  1  10 DB                bpl tror6
00339A  1  A2 03                ldx #3
00339C  1               tror7:
00339C  1  A9 FE 48 B5          set_zx zp1,$ff-fc
0033A0  1  13 95 0C 28  
0033A4  1  76 0C                ror zpt,x
0033A6  1  08 B5 0C DD          tst_zx rROR,fROR,$ff-fnzc
0033AA  1  28 02 F0 03  
0033AE  1  20 FF FF 68  
0033BE  1  CA                   dex
0033BF  1  10 DB                bpl tror7
0033C1  1               
0033C1  1  A2 03                ldx #3
0033C3  1               trorc6:
0033C3  1  A9 01 48 B5          set_zx zp1,fc
0033C7  1  13 95 0C 28  
0033CB  1  76 0C                ror zpt,x
0033CD  1  08 B5 0C DD          tst_zx rRORc,fRORc,0
0033D1  1  2C 02 F0 03  
0033D5  1  20 FF FF 68  
0033E5  1  CA                   dex
0033E6  1  10 DB                bpl trorc6
0033E8  1  A2 03                ldx #3
0033EA  1               trorc7:
0033EA  1  A9 FF 48 B5          set_zx zp1,$ff
0033EE  1  13 95 0C 28  
0033F2  1  76 0C                ror zpt,x
0033F4  1  08 B5 0C DD          tst_zx rRORc,fRORc,$ff-fnzc
0033F8  1  2C 02 F0 03  
0033FC  1  20 FF FF 68  
00340C  1  CA                   dex
00340D  1  10 DB                bpl trorc7
00340F  1  AD 00 02 C9          next_test
003413  1  20 F0 03 20  
003417  1  FF FF A9 21  
00341E  1               
00341E  1               ; shifts - abs indexed
00341E  1  A2 03                ldx #3
003420  1               tasl8:
003420  1  A9 00 48 B5          set_absx zp1,0
003424  1  13 9D 03 02  
003428  1  28           
003429  1  1E 03 02             asl abst,x
00342C  1  08 BD 03 02          tst_absx rASL,fASL,0
003430  1  DD 20 02 F0  
003434  1  03 20 FF FF  
003445  1  CA                   dex
003446  1  10 D8                bpl tasl8
003448  1  A2 03                ldx #3
00344A  1               tasl9:
00344A  1  A9 FF 48 B5          set_absx zp1,$ff
00344E  1  13 9D 03 02  
003452  1  28           
003453  1  1E 03 02             asl abst,x
003456  1  08 BD 03 02          tst_absx rASL,fASL,$ff-fnzc
00345A  1  DD 20 02 F0  
00345E  1  03 20 FF FF  
00346F  1  CA                   dex
003470  1  10 D8                bpl tasl9
003472  1               
003472  1  A2 03                ldx #3
003474  1               tlsr8:
003474  1  A9 00 48 B5          set_absx zp1,0
003478  1  13 9D 03 02  
00347C  1  28           
00347D  1  5E 03 02             lsr abst,x
003480  1  08 BD 03 02          tst_absx rLSR,fLSR,0
003484  1  DD 28 02 F0  
003488  1  03 20 FF FF  
003499  1  CA                   dex
00349A  1  10 D8                bpl tlsr8
00349C  1  A2 03                ldx #3
00349E  1               tlsr9:
00349E  1  A9 FF 48 B5          set_absx zp1,$ff
0034A2  1  13 9D 03 02  
0034A6  1  28           
0034A7  1  5E 03 02             lsr abst,x
0034AA  1  08 BD 03 02          tst_absx rLSR,fLSR,$ff-fnzc
0034AE  1  DD 28 02 F0  
0034B2  1  03 20 FF FF  
0034C3  1  CA                   dex
0034C4  1  10 D8                bpl tlsr9
0034C6  1               
0034C6  1  A2 03                ldx #3
0034C8  1               trol8:
0034C8  1  A9 00 48 B5          set_absx zp1,0
0034CC  1  13 9D 03 02  
0034D0  1  28           
0034D1  1  3E 03 02             rol abst,x
0034D4  1  08 BD 03 02          tst_absx rROL,fROL,0
0034D8  1  DD 20 02 F0  
0034DC  1  03 20 FF FF  
0034ED  1  CA                   dex
0034EE  1  10 D8                bpl trol8
0034F0  1  A2 03                ldx #3
0034F2  1               trol9:
0034F2  1  A9 FE 48 B5          set_absx zp1,$ff-fc
0034F6  1  13 9D 03 02  
0034FA  1  28           
0034FB  1  3E 03 02             rol abst,x
0034FE  1  08 BD 03 02          tst_absx rROL,fROL,$ff-fnzc
003502  1  DD 20 02 F0  
003506  1  03 20 FF FF  
003517  1  CA                   dex
003518  1  10 D8                bpl trol9
00351A  1               
00351A  1  A2 03                ldx #3
00351C  1               trolc8:
00351C  1  A9 01 48 B5          set_absx zp1,fc
003520  1  13 9D 03 02  
003524  1  28           
003525  1  3E 03 02             rol abst,x
003528  1  08 BD 03 02          tst_absx rROLc,fROLc,0
00352C  1  DD 24 02 F0  
003530  1  03 20 FF FF  
003541  1  CA                   dex
003542  1  10 D8                bpl trolc8
003544  1  A2 03                ldx #3
003546  1               trolc9:
003546  1  A9 FF 48 B5          set_absx zp1,$ff
00354A  1  13 9D 03 02  
00354E  1  28           
00354F  1  3E 03 02             rol abst,x
003552  1  08 BD 03 02          tst_absx rROLc,fROLc,$ff-fnzc
003556  1  DD 24 02 F0  
00355A  1  03 20 FF FF  
00356B  1  CA                   dex
00356C  1  10 D8                bpl trolc9
00356E  1               
00356E  1  A2 03                ldx #3
003570  1               tror8:
003570  1  A9 00 48 B5          set_absx zp1,0
003574  1  13 9D 03 02  
003578  1  28           
003579  1  7E 03 02             ror abst,x
00357C  1  08 BD 03 02          tst_absx rROR,fROR,0
003580  1  DD 28 02 F0  
003584  1  03 20 FF FF  
003595  1  CA                   dex
003596  1  10 D8                bpl tror8
003598  1  A2 03                ldx #3
00359A  1               tror9:
00359A  1  A9 FE 48 B5          set_absx zp1,$ff-fc
00359E  1  13 9D 03 02  
0035A2  1  28           
0035A3  1  7E 03 02             ror abst,x
0035A6  1  08 BD 03 02          tst_absx rROR,fROR,$ff-fnzc
0035AA  1  DD 28 02 F0  
0035AE  1  03 20 FF FF  
0035BF  1  CA                   dex
0035C0  1  10 D8                bpl tror9
0035C2  1               
0035C2  1  A2 03                ldx #3
0035C4  1               trorc8:
0035C4  1  A9 01 48 B5          set_absx zp1,fc
0035C8  1  13 9D 03 02  
0035CC  1  28           
0035CD  1  7E 03 02             ror abst,x
0035D0  1  08 BD 03 02          tst_absx rRORc,fRORc,0
0035D4  1  DD 2C 02 F0  
0035D8  1  03 20 FF FF  
0035E9  1  CA                   dex
0035EA  1  10 D8                bpl trorc8
0035EC  1  A2 03                ldx #3
0035EE  1               trorc9:
0035EE  1  A9 FF 48 B5          set_absx zp1,$ff
0035F2  1  13 9D 03 02  
0035F6  1  28           
0035F7  1  7E 03 02             ror abst,x
0035FA  1  08 BD 03 02          tst_absx rRORc,fRORc,$ff-fnzc
0035FE  1  DD 2C 02 F0  
003602  1  03 20 FF FF  
003613  1  CA                   dex
003614  1  10 D8                bpl trorc9
003616  1  AD 00 02 C9          next_test
00361A  1  21 F0 03 20  
00361E  1  FF FF A9 22  
003625  1               
003625  1               ; testing memory increment/decrement - INC DEC all addressing modes
003625  1               ; zeropage
003625  1  A2 00                ldx #0
003627  1  A9 7E                lda #$7e
003629  1  85 0C                sta zpt
00362B  1               tinc:
00362B  1  A9 00 48 28          set_stat 0
00362F  1  E6 0C                inc zpt
003631  1  08 A5 0C DD          tst_z rINC,fINC,0
003635  1  40 02 F0 03  
003639  1  20 FF FF 68  
003649  1  E8                   inx
00364A  1  E0 02                cpx #2
00364C  1  D0 04                bne tinc1
00364E  1  A9 FE                lda #$fe
003650  1  85 0C                sta zpt
003652  1  E0 05        tinc1:  cpx #5
003654  1  D0 D5                bne tinc
003656  1  CA                   dex
003657  1  E6 0C                inc zpt
003659  1               tdec:
003659  1  A9 00 48 28          set_stat 0
00365D  1  C6 0C                dec zpt
00365F  1  08 A5 0C DD          tst_z rINC,fINC,0
003663  1  40 02 F0 03  
003667  1  20 FF FF 68  
003677  1  CA                   dex
003678  1  30 0A                bmi tdec1
00367A  1  E0 01                cpx #1
00367C  1  D0 DB                bne tdec
00367E  1  A9 81                lda #$81
003680  1  85 0C                sta zpt
003682  1  D0 D5                bne tdec
003684  1               tdec1:
003684  1  A2 00                ldx #0
003686  1  A9 7E                lda #$7e
003688  1  85 0C                sta zpt
00368A  1               tinc10:
00368A  1  A9 FF 48 28          set_stat $ff
00368E  1  E6 0C                inc zpt
003690  1  08 A5 0C DD          tst_z rINC,fINC,$ff-fnz
003694  1  40 02 F0 03  
003698  1  20 FF FF 68  
0036A8  1  E8                   inx
0036A9  1  E0 02                cpx #2
0036AB  1  D0 04                bne tinc11
0036AD  1  A9 FE                lda #$fe
0036AF  1  85 0C                sta zpt
0036B1  1  E0 05        tinc11: cpx #5
0036B3  1  D0 D5                bne tinc10
0036B5  1  CA                   dex
0036B6  1  E6 0C                inc zpt
0036B8  1               tdec10:
0036B8  1  A9 FF 48 28          set_stat $ff
0036BC  1  C6 0C                dec zpt
0036BE  1  08 A5 0C DD          tst_z rINC,fINC,$ff-fnz
0036C2  1  40 02 F0 03  
0036C6  1  20 FF FF 68  
0036D6  1  CA                   dex
0036D7  1  30 0A                bmi tdec11
0036D9  1  E0 01                cpx #1
0036DB  1  D0 DB                bne tdec10
0036DD  1  A9 81                lda #$81
0036DF  1  85 0C                sta zpt
0036E1  1  D0 D5                bne tdec10
0036E3  1               tdec11:
0036E3  1  AD 00 02 C9          next_test
0036E7  1  22 F0 03 20  
0036EB  1  FF FF A9 23  
0036F2  1               
0036F2  1               ; absolute memory
0036F2  1  A2 00                ldx #0
0036F4  1  A9 7E                lda #$7e
0036F6  1  8D 03 02             sta abst
0036F9  1               tinc2:
0036F9  1  A9 00 48 28          set_stat 0
0036FD  1  EE 03 02             inc abst
003700  1  08 AD 03 02          tst_abs rINC,fINC,0
003704  1  DD 40 02 F0  
003708  1  03 20 FF FF  
003719  1  E8                   inx
00371A  1  E0 02                cpx #2
00371C  1  D0 05                bne tinc3
00371E  1  A9 FE                lda #$fe
003720  1  8D 03 02             sta abst
003723  1  E0 05        tinc3:  cpx #5
003725  1  D0 D2                bne tinc2
003727  1  CA                   dex
003728  1  EE 03 02             inc abst
00372B  1               tdec2:
00372B  1  A9 00 48 28          set_stat 0
00372F  1  CE 03 02             dec abst
003732  1  08 AD 03 02          tst_abs rINC,fINC,0
003736  1  DD 40 02 F0  
00373A  1  03 20 FF FF  
00374B  1  CA                   dex
00374C  1  30 0B                bmi tdec3
00374E  1  E0 01                cpx #1
003750  1  D0 D9                bne tdec2
003752  1  A9 81                lda #$81
003754  1  8D 03 02             sta abst
003757  1  D0 D2                bne tdec2
003759  1               tdec3:
003759  1  A2 00                ldx #0
00375B  1  A9 7E                lda #$7e
00375D  1  8D 03 02             sta abst
003760  1               tinc12:
003760  1  A9 FF 48 28          set_stat $ff
003764  1  EE 03 02             inc abst
003767  1  08 AD 03 02          tst_abs rINC,fINC,$ff-fnz
00376B  1  DD 40 02 F0  
00376F  1  03 20 FF FF  
003780  1  E8                   inx
003781  1  E0 02                cpx #2
003783  1  D0 05                bne tinc13
003785  1  A9 FE                lda #$fe
003787  1  8D 03 02             sta abst
00378A  1  E0 05        tinc13:  cpx #5
00378C  1  D0 D2                bne tinc12
00378E  1  CA                   dex
00378F  1  EE 03 02             inc abst
003792  1               tdec12:
003792  1  A9 FF 48 28          set_stat $ff
003796  1  CE 03 02             dec abst
003799  1  08 AD 03 02          tst_abs rINC,fINC,$ff-fnz
00379D  1  DD 40 02 F0  
0037A1  1  03 20 FF FF  
0037B2  1  CA                   dex
0037B3  1  30 0B                bmi tdec13
0037B5  1  E0 01                cpx #1
0037B7  1  D0 D9                bne tdec12
0037B9  1  A9 81                lda #$81
0037BB  1  8D 03 02             sta abst
0037BE  1  D0 D2                bne tdec12
0037C0  1               tdec13:
0037C0  1  AD 00 02 C9          next_test
0037C4  1  23 F0 03 20  
0037C8  1  FF FF A9 24  
0037CF  1               
0037CF  1               ; zeropage indexed
0037CF  1  A2 00                ldx #0
0037D1  1  A9 7E                lda #$7e
0037D3  1  95 0C        tinc4:  sta zpt,x
0037D5  1  A9 00 48 28          set_stat 0
0037D9  1  F6 0C                inc zpt,x
0037DB  1  08 B5 0C DD          tst_zx rINC,fINC,0
0037DF  1  40 02 F0 03  
0037E3  1  20 FF FF 68  
0037F3  1  B5 0C                lda zpt,x
0037F5  1  E8                   inx
0037F6  1  E0 02                cpx #2
0037F8  1  D0 02                bne tinc5
0037FA  1  A9 FE                lda #$fe
0037FC  1  E0 05        tinc5:  cpx #5
0037FE  1  D0 D3                bne tinc4
003800  1  CA                   dex
003801  1  A9 02                lda #2
003803  1  95 0C        tdec4:  sta zpt,x
003805  1  A9 00 48 28          set_stat 0
003809  1  D6 0C                dec zpt,x
00380B  1  08 B5 0C DD          tst_zx rINC,fINC,0
00380F  1  40 02 F0 03  
003813  1  20 FF FF 68  
003823  1  B5 0C                lda zpt,x
003825  1  CA                   dex
003826  1  30 08                bmi tdec5
003828  1  E0 01                cpx #1
00382A  1  D0 D7                bne tdec4
00382C  1  A9 81                lda #$81
00382E  1  D0 D3                bne tdec4
003830  1               tdec5:
003830  1  A2 00                ldx #0
003832  1  A9 7E                lda #$7e
003834  1  95 0C        tinc14: sta zpt,x
003836  1  A9 FF 48 28          set_stat $ff
00383A  1  F6 0C                inc zpt,x
00383C  1  08 B5 0C DD          tst_zx rINC,fINC,$ff-fnz
003840  1  40 02 F0 03  
003844  1  20 FF FF 68  
003854  1  B5 0C                lda zpt,x
003856  1  E8                   inx
003857  1  E0 02                cpx #2
003859  1  D0 02                bne tinc15
00385B  1  A9 FE                lda #$fe
00385D  1  E0 05        tinc15: cpx #5
00385F  1  D0 D3                bne tinc14
003861  1  CA                   dex
003862  1  A9 02                lda #2
003864  1  95 0C        tdec14: sta zpt,x
003866  1  A9 FF 48 28          set_stat $ff
00386A  1  D6 0C                dec zpt,x
00386C  1  08 B5 0C DD          tst_zx rINC,fINC,$ff-fnz
003870  1  40 02 F0 03  
003874  1  20 FF FF 68  
003884  1  B5 0C                lda zpt,x
003886  1  CA                   dex
003887  1  30 08                bmi tdec15
003889  1  E0 01                cpx #1
00388B  1  D0 D7                bne tdec14
00388D  1  A9 81                lda #$81
00388F  1  D0 D3                bne tdec14
003891  1               tdec15:
003891  1  AD 00 02 C9          next_test
003895  1  24 F0 03 20  
003899  1  FF FF A9 25  
0038A0  1               
0038A0  1               ; memory indexed
0038A0  1  A2 00                ldx #0
0038A2  1  A9 7E                lda #$7e
0038A4  1  9D 03 02     tinc6:  sta abst,x
0038A7  1  A9 00 48 28          set_stat 0
0038AB  1  FE 03 02             inc abst,x
0038AE  1  08 BD 03 02          tst_absx rINC,fINC,0
0038B2  1  DD 40 02 F0  
0038B6  1  03 20 FF FF  
0038C7  1  BD 03 02             lda abst,x
0038CA  1  E8                   inx
0038CB  1  E0 02                cpx #2
0038CD  1  D0 02                bne tinc7
0038CF  1  A9 FE                lda #$fe
0038D1  1  E0 05        tinc7:  cpx #5
0038D3  1  D0 CF                bne tinc6
0038D5  1  CA                   dex
0038D6  1  A9 02                lda #2
0038D8  1  9D 03 02     tdec6:  sta abst,x
0038DB  1  A9 00 48 28          set_stat 0
0038DF  1  DE 03 02             dec abst,x
0038E2  1  08 BD 03 02          tst_absx rINC,fINC,0
0038E6  1  DD 40 02 F0  
0038EA  1  03 20 FF FF  
0038FB  1  BD 03 02             lda abst,x
0038FE  1  CA                   dex
0038FF  1  30 08                bmi tdec7
003901  1  E0 01                cpx #1
003903  1  D0 D3                bne tdec6
003905  1  A9 81                lda #$81
003907  1  D0 CF                bne tdec6
003909  1               tdec7:
003909  1  A2 00                ldx #0
00390B  1  A9 7E                lda #$7e
00390D  1  9D 03 02     tinc16: sta abst,x
003910  1  A9 FF 48 28          set_stat $ff
003914  1  FE 03 02             inc abst,x
003917  1  08 BD 03 02          tst_absx rINC,fINC,$ff-fnz
00391B  1  DD 40 02 F0  
00391F  1  03 20 FF FF  
003930  1  BD 03 02             lda abst,x
003933  1  E8                   inx
003934  1  E0 02                cpx #2
003936  1  D0 02                bne tinc17
003938  1  A9 FE                lda #$fe
00393A  1  E0 05        tinc17: cpx #5
00393C  1  D0 CF                bne tinc16
00393E  1  CA                   dex
00393F  1  A9 02                lda #2
003941  1  9D 03 02     tdec16: sta abst,x
003944  1  A9 FF 48 28          set_stat $ff
003948  1  DE 03 02             dec abst,x
00394B  1  08 BD 03 02          tst_absx rINC,fINC,$ff-fnz
00394F  1  DD 40 02 F0  
003953  1  03 20 FF FF  
003964  1  BD 03 02             lda abst,x
003967  1  CA                   dex
003968  1  30 08                bmi tdec17
00396A  1  E0 01                cpx #1
00396C  1  D0 D3                bne tdec16
00396E  1  A9 81                lda #$81
003970  1  D0 CF                bne tdec16
003972  1               tdec17:
003972  1  AD 00 02 C9          next_test
003976  1  25 F0 03 20  
00397A  1  FF FF A9 26  
003981  1               
003981  1               ; testing logical instructions - AND EOR ORA all addressing modes
003981  1               ; AND
003981  1  A2 03                ldx #3          ;immediate
003983  1  B5 1C        tand:   lda zpAN,x
003985  1  8D 09 02             sta ex_andi+1   ;set AND # operand
003988  1  A9 00 48 BD          set_ax  absANa,0
00398C  1  5A 02 28     
00398F  1  20 08 02             jsr ex_andi     ;execute AND # in RAM
003992  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003996  1  F0 03 20 FF  
00399A  1  FF 68 09 08  
0039A8  1  CA                   dex
0039A9  1  10 D8                bpl tand
0039AB  1  A2 03                ldx #3
0039AD  1  B5 1C        tand1:  lda zpAN,x
0039AF  1  8D 09 02             sta ex_andi+1   ;set AND # operand
0039B2  1  A9 FF 48 BD          set_ax  absANa,$ff
0039B6  1  5A 02 28     
0039B9  1  20 08 02             jsr ex_andi     ;execute AND # in RAM
0039BC  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
0039C0  1  F0 03 20 FF  
0039C4  1  FF 68 09 08  
0039D2  1  CA                   dex
0039D3  1  10 D8                bpl tand1
0039D5  1               
0039D5  1  A2 03                ldx #3      ;zp
0039D7  1  B5 1C        tand2:  lda zpAN,x
0039D9  1  85 0C                sta zpt
0039DB  1  A9 00 48 BD          set_ax  absANa,0
0039DF  1  5A 02 28     
0039E2  1  25 0C                and zpt
0039E4  1  08 DD 62 02          tst_ax  absrlo,absflo,0
0039E8  1  F0 03 20 FF  
0039EC  1  FF 68 09 08  
0039FA  1  CA                   dex
0039FB  1  10 DA                bpl tand2
0039FD  1  A2 03                ldx #3
0039FF  1  B5 1C        tand3:  lda zpAN,x
003A01  1  85 0C                sta zpt
003A03  1  A9 FF 48 BD          set_ax  absANa,$ff
003A07  1  5A 02 28     
003A0A  1  25 0C                and zpt
003A0C  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003A10  1  F0 03 20 FF  
003A14  1  FF 68 09 08  
003A22  1  CA                   dex
003A23  1  10 DA                bpl tand3
003A25  1               
003A25  1  A2 03                ldx #3      ;abs
003A27  1  B5 1C        tand4:  lda zpAN,x
003A29  1  8D 03 02             sta abst
003A2C  1  A9 00 48 BD          set_ax  absANa,0
003A30  1  5A 02 28     
003A33  1  2D 03 02             and abst
003A36  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003A3A  1  F0 03 20 FF  
003A3E  1  FF 68 09 08  
003A4C  1  CA                   dex
003A4D  1  10 D8                bpl tand4
003A4F  1  A2 03                ldx #3
003A51  1  B5 1C        tand5:  lda zpAN,x
003A53  1  8D 03 02             sta abst
003A56  1  A9 FF 48 BD          set_ax  absANa,$ff
003A5A  1  5A 02 28     
003A5D  1  2D 03 02             and abst
003A60  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003A64  1  F0 03 20 FF  
003A68  1  FF 68 09 08  
003A76  1  CA                   dex
003A77  1  10 02                bpl tand6
003A79  1               
003A79  1  A2 03                ldx #3      ;zp,x
003A7B  1               tand6:
003A7B  1  A9 00 48 BD          set_ax  absANa,0
003A7F  1  5A 02 28     
003A82  1  35 1C                and zpAN,x
003A84  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003A88  1  F0 03 20 FF  
003A8C  1  FF 68 09 08  
003A9A  1  CA                   dex
003A9B  1  10 DE                bpl tand6
003A9D  1  A2 03                ldx #3
003A9F  1               tand7:
003A9F  1  A9 FF 48 BD          set_ax  absANa,$ff
003AA3  1  5A 02 28     
003AA6  1  35 1C                and zpAN,x
003AA8  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003AAC  1  F0 03 20 FF  
003AB0  1  FF 68 09 08  
003ABE  1  CA                   dex
003ABF  1  10 DE                bpl tand7
003AC1  1               
003AC1  1  A2 03                ldx #3      ;abs,x
003AC3  1               tand8:
003AC3  1  A9 00 48 BD          set_ax  absANa,0
003AC7  1  5A 02 28     
003ACA  1  3D 4E 02             and absAN,x
003ACD  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003AD1  1  F0 03 20 FF  
003AD5  1  FF 68 09 08  
003AE3  1  CA                   dex
003AE4  1  10 DD                bpl tand8
003AE6  1  A2 03                ldx #3
003AE8  1               tand9:
003AE8  1  A9 FF 48 BD          set_ax  absANa,$ff
003AEC  1  5A 02 28     
003AEF  1  3D 4E 02             and absAN,x
003AF2  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003AF6  1  F0 03 20 FF  
003AFA  1  FF 68 09 08  
003B08  1  CA                   dex
003B09  1  10 DD                bpl tand9
003B0B  1               
003B0B  1  A0 03                ldy #3      ;abs,y
003B0D  1               tand10:
003B0D  1  A9 00 48 B9          set_ay  absANa,0
003B11  1  5A 02 28     
003B14  1  39 4E 02             and absAN,y
003B17  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003B1B  1  F0 03 20 FF  
003B1F  1  FF 68 09 08  
003B2D  1  88                   dey
003B2E  1  10 DD                bpl tand10
003B30  1  A0 03                ldy #3
003B32  1               tand11:
003B32  1  A9 FF 48 B9          set_ay  absANa,$ff
003B36  1  5A 02 28     
003B39  1  39 4E 02             and absAN,y
003B3C  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003B40  1  F0 03 20 FF  
003B44  1  FF 68 09 08  
003B52  1  88                   dey
003B53  1  10 DD                bpl tand11
003B55  1               
003B55  1  A2 06                ldx #6      ;(zp,x)
003B57  1  A0 03                ldy #3
003B59  1               tand12:
003B59  1  A9 00 48 B9          set_ay  absANa,0
003B5D  1  5A 02 28     
003B60  1  21 3A                and (indAN,x)
003B62  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003B66  1  F0 03 20 FF  
003B6A  1  FF 68 09 08  
003B78  1  CA                   dex
003B79  1  CA                   dex
003B7A  1  88                   dey
003B7B  1  10 DC                bpl tand12
003B7D  1  A2 06                ldx #6
003B7F  1  A0 03                ldy #3
003B81  1               tand13:
003B81  1  A9 FF 48 B9          set_ay  absANa,$ff
003B85  1  5A 02 28     
003B88  1  21 3A                and (indAN,x)
003B8A  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003B8E  1  F0 03 20 FF  
003B92  1  FF 68 09 08  
003BA0  1  CA                   dex
003BA1  1  CA                   dex
003BA2  1  88                   dey
003BA3  1  10 DC                bpl tand13
003BA5  1               
003BA5  1  A0 03                ldy #3      ;(zp),y
003BA7  1               tand14:
003BA7  1  A9 00 48 B9          set_ay  absANa,0
003BAB  1  5A 02 28     
003BAE  1  31 3A                and (indAN),y
003BB0  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003BB4  1  F0 03 20 FF  
003BB8  1  FF 68 09 08  
003BC6  1  88                   dey
003BC7  1  10 DE                bpl tand14
003BC9  1  A0 03                ldy #3
003BCB  1               tand15:
003BCB  1  A9 FF 48 B9          set_ay  absANa,$ff
003BCF  1  5A 02 28     
003BD2  1  31 3A                and (indAN),y
003BD4  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003BD8  1  F0 03 20 FF  
003BDC  1  FF 68 09 08  
003BEA  1  88                   dey
003BEB  1  10 DE                bpl tand15
003BED  1  AD 00 02 C9          next_test
003BF1  1  26 F0 03 20  
003BF5  1  FF FF A9 27  
003BFC  1               
003BFC  1               ; EOR
003BFC  1  A2 03                ldx #3          ;immediate - self modifying code
003BFE  1  B5 20        teor:   lda zpEO,x
003C00  1  8D 0C 02             sta ex_eori+1   ;set EOR # operand
003C03  1  A9 00 48 BD          set_ax  absEOa,0
003C07  1  5E 02 28     
003C0A  1  20 0B 02             jsr ex_eori     ;execute EOR # in RAM
003C0D  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003C11  1  F0 03 20 FF  
003C15  1  FF 68 09 08  
003C23  1  CA                   dex
003C24  1  10 D8                bpl teor
003C26  1  A2 03                ldx #3
003C28  1  B5 20        teor1:  lda zpEO,x
003C2A  1  8D 0C 02             sta ex_eori+1   ;set EOR # operand
003C2D  1  A9 FF 48 BD          set_ax  absEOa,$ff
003C31  1  5E 02 28     
003C34  1  20 0B 02             jsr ex_eori     ;execute EOR # in RAM
003C37  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003C3B  1  F0 03 20 FF  
003C3F  1  FF 68 09 08  
003C4D  1  CA                   dex
003C4E  1  10 D8                bpl teor1
003C50  1               
003C50  1  A2 03                ldx #3      ;zp
003C52  1  B5 20        teor2:   lda zpEO,x
003C54  1  85 0C                sta zpt
003C56  1  A9 00 48 BD          set_ax  absEOa,0
003C5A  1  5E 02 28     
003C5D  1  45 0C                eor zpt
003C5F  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003C63  1  F0 03 20 FF  
003C67  1  FF 68 09 08  
003C75  1  CA                   dex
003C76  1  10 DA                bpl teor2
003C78  1  A2 03                ldx #3
003C7A  1  B5 20        teor3:  lda zpEO,x
003C7C  1  85 0C                sta zpt
003C7E  1  A9 FF 48 BD          set_ax  absEOa,$ff
003C82  1  5E 02 28     
003C85  1  45 0C                eor zpt
003C87  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003C8B  1  F0 03 20 FF  
003C8F  1  FF 68 09 08  
003C9D  1  CA                   dex
003C9E  1  10 DA                bpl teor3
003CA0  1               
003CA0  1  A2 03                ldx #3      ;abs
003CA2  1  B5 20        teor4:  lda zpEO,x
003CA4  1  8D 03 02             sta abst
003CA7  1  A9 00 48 BD          set_ax  absEOa,0
003CAB  1  5E 02 28     
003CAE  1  4D 03 02             eor abst
003CB1  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003CB5  1  F0 03 20 FF  
003CB9  1  FF 68 09 08  
003CC7  1  CA                   dex
003CC8  1  10 D8                bpl teor4
003CCA  1  A2 03                ldx #3
003CCC  1  B5 20        teor5:  lda zpEO,x
003CCE  1  8D 03 02             sta abst
003CD1  1  A9 FF 48 BD          set_ax  absEOa,$ff
003CD5  1  5E 02 28     
003CD8  1  4D 03 02             eor abst
003CDB  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003CDF  1  F0 03 20 FF  
003CE3  1  FF 68 09 08  
003CF1  1  CA                   dex
003CF2  1  10 02                bpl teor6
003CF4  1               
003CF4  1  A2 03                ldx #3      ;zp,x
003CF6  1               teor6:
003CF6  1  A9 00 48 BD          set_ax  absEOa,0
003CFA  1  5E 02 28     
003CFD  1  55 20                eor zpEO,x
003CFF  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003D03  1  F0 03 20 FF  
003D07  1  FF 68 09 08  
003D15  1  CA                   dex
003D16  1  10 DE                bpl teor6
003D18  1  A2 03                ldx #3
003D1A  1               teor7:
003D1A  1  A9 FF 48 BD          set_ax  absEOa,$ff
003D1E  1  5E 02 28     
003D21  1  55 20                eor zpEO,x
003D23  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003D27  1  F0 03 20 FF  
003D2B  1  FF 68 09 08  
003D39  1  CA                   dex
003D3A  1  10 DE                bpl teor7
003D3C  1               
003D3C  1  A2 03                ldx #3      ;abs,x
003D3E  1               teor8:
003D3E  1  A9 00 48 BD          set_ax  absEOa,0
003D42  1  5E 02 28     
003D45  1  5D 52 02             eor absEO,x
003D48  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003D4C  1  F0 03 20 FF  
003D50  1  FF 68 09 08  
003D5E  1  CA                   dex
003D5F  1  10 DD                bpl teor8
003D61  1  A2 03                ldx #3
003D63  1               teor9:
003D63  1  A9 FF 48 BD          set_ax  absEOa,$ff
003D67  1  5E 02 28     
003D6A  1  5D 52 02             eor absEO,x
003D6D  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003D71  1  F0 03 20 FF  
003D75  1  FF 68 09 08  
003D83  1  CA                   dex
003D84  1  10 DD                bpl teor9
003D86  1               
003D86  1  A0 03                ldy #3      ;abs,y
003D88  1               teor10:
003D88  1  A9 00 48 B9          set_ay  absEOa,0
003D8C  1  5E 02 28     
003D8F  1  59 52 02             eor absEO,y
003D92  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003D96  1  F0 03 20 FF  
003D9A  1  FF 68 09 08  
003DA8  1  88                   dey
003DA9  1  10 DD                bpl teor10
003DAB  1  A0 03                ldy #3
003DAD  1               teor11:
003DAD  1  A9 FF 48 B9          set_ay  absEOa,$ff
003DB1  1  5E 02 28     
003DB4  1  59 52 02             eor absEO,y
003DB7  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003DBB  1  F0 03 20 FF  
003DBF  1  FF 68 09 08  
003DCD  1  88                   dey
003DCE  1  10 DD                bpl teor11
003DD0  1               
003DD0  1  A2 06                ldx #6      ;(zp,x)
003DD2  1  A0 03                ldy #3
003DD4  1               teor12:
003DD4  1  A9 00 48 B9          set_ay  absEOa,0
003DD8  1  5E 02 28     
003DDB  1  41 42                eor (indEO,x)
003DDD  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003DE1  1  F0 03 20 FF  
003DE5  1  FF 68 09 08  
003DF3  1  CA                   dex
003DF4  1  CA                   dex
003DF5  1  88                   dey
003DF6  1  10 DC                bpl teor12
003DF8  1  A2 06                ldx #6
003DFA  1  A0 03                ldy #3
003DFC  1               teor13:
003DFC  1  A9 FF 48 B9          set_ay  absEOa,$ff
003E00  1  5E 02 28     
003E03  1  41 42                eor (indEO,x)
003E05  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003E09  1  F0 03 20 FF  
003E0D  1  FF 68 09 08  
003E1B  1  CA                   dex
003E1C  1  CA                   dex
003E1D  1  88                   dey
003E1E  1  10 DC                bpl teor13
003E20  1               
003E20  1  A0 03                ldy #3      ;(zp),y
003E22  1               teor14:
003E22  1  A9 00 48 B9          set_ay  absEOa,0
003E26  1  5E 02 28     
003E29  1  51 42                eor (indEO),y
003E2B  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003E2F  1  F0 03 20 FF  
003E33  1  FF 68 09 08  
003E41  1  88                   dey
003E42  1  10 DE                bpl teor14
003E44  1  A0 03                ldy #3
003E46  1               teor15:
003E46  1  A9 FF 48 B9          set_ay  absEOa,$ff
003E4A  1  5E 02 28     
003E4D  1  51 42                eor (indEO),y
003E4F  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003E53  1  F0 03 20 FF  
003E57  1  FF 68 09 08  
003E65  1  88                   dey
003E66  1  10 DE                bpl teor15
003E68  1  AD 00 02 C9          next_test
003E6C  1  27 F0 03 20  
003E70  1  FF FF A9 28  
003E77  1               
003E77  1               ; OR
003E77  1  A2 03                ldx #3          ;immediate - self modifying code
003E79  1  B5 18        tora:   lda zpOR,x
003E7B  1  8D 0F 02             sta ex_orai+1   ;set ORA # operand
003E7E  1  A9 00 48 BD          set_ax  absORa,0
003E82  1  56 02 28     
003E85  1  20 0E 02             jsr ex_orai     ;execute ORA # in RAM
003E88  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003E8C  1  F0 03 20 FF  
003E90  1  FF 68 09 08  
003E9E  1  CA                   dex
003E9F  1  10 D8                bpl tora
003EA1  1  A2 03                ldx #3
003EA3  1  B5 18        tora1:  lda zpOR,x
003EA5  1  8D 0F 02             sta ex_orai+1   ;set ORA # operand
003EA8  1  A9 FF 48 BD          set_ax  absORa,$ff
003EAC  1  56 02 28     
003EAF  1  20 0E 02             jsr ex_orai     ;execute ORA # in RAM
003EB2  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003EB6  1  F0 03 20 FF  
003EBA  1  FF 68 09 08  
003EC8  1  CA                   dex
003EC9  1  10 D8                bpl tora1
003ECB  1               
003ECB  1  A2 03                ldx #3      ;zp
003ECD  1  B5 18        tora2:  lda zpOR,x
003ECF  1  85 0C                sta zpt
003ED1  1  A9 00 48 BD          set_ax  absORa,0
003ED5  1  56 02 28     
003ED8  1  05 0C                ora zpt
003EDA  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003EDE  1  F0 03 20 FF  
003EE2  1  FF 68 09 08  
003EF0  1  CA                   dex
003EF1  1  10 DA                bpl tora2
003EF3  1  A2 03                ldx #3
003EF5  1  B5 18        tora3:  lda zpOR,x
003EF7  1  85 0C                sta zpt
003EF9  1  A9 FF 48 BD          set_ax  absORa,$ff
003EFD  1  56 02 28     
003F00  1  05 0C                ora zpt
003F02  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003F06  1  F0 03 20 FF  
003F0A  1  FF 68 09 08  
003F18  1  CA                   dex
003F19  1  10 DA                bpl tora3
003F1B  1               
003F1B  1  A2 03                ldx #3      ;abs
003F1D  1  B5 18        tora4:  lda zpOR,x
003F1F  1  8D 03 02             sta abst
003F22  1  A9 00 48 BD          set_ax  absORa,0
003F26  1  56 02 28     
003F29  1  0D 03 02             ora abst
003F2C  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003F30  1  F0 03 20 FF  
003F34  1  FF 68 09 08  
003F42  1  CA                   dex
003F43  1  10 D8                bpl tora4
003F45  1  A2 03                ldx #3
003F47  1  B5 18        tora5:  lda zpOR,x
003F49  1  8D 03 02             sta abst
003F4C  1  A9 FF 48 BD          set_ax  absORa,$ff
003F50  1  56 02 28     
003F53  1  0D 03 02             ora abst
003F56  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003F5A  1  F0 03 20 FF  
003F5E  1  FF 68 09 08  
003F6C  1  CA                   dex
003F6D  1  10 02                bpl tora6
003F6F  1               
003F6F  1  A2 03                ldx #3      ;zp,x
003F71  1               tora6:
003F71  1  A9 00 48 BD          set_ax  absORa,0
003F75  1  56 02 28     
003F78  1  15 18                ora zpOR,x
003F7A  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003F7E  1  F0 03 20 FF  
003F82  1  FF 68 09 08  
003F90  1  CA                   dex
003F91  1  10 DE                bpl tora6
003F93  1  A2 03                ldx #3
003F95  1               tora7:
003F95  1  A9 FF 48 BD          set_ax  absORa,$ff
003F99  1  56 02 28     
003F9C  1  15 18                ora zpOR,x
003F9E  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003FA2  1  F0 03 20 FF  
003FA6  1  FF 68 09 08  
003FB4  1  CA                   dex
003FB5  1  10 DE                bpl tora7
003FB7  1               
003FB7  1  A2 03                ldx #3      ;abs,x
003FB9  1               tora8:
003FB9  1  A9 00 48 BD          set_ax  absORa,0
003FBD  1  56 02 28     
003FC0  1  1D 4A 02             ora absOR,x
003FC3  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003FC7  1  F0 03 20 FF  
003FCB  1  FF 68 09 08  
003FD9  1  CA                   dex
003FDA  1  10 DD                bpl tora8
003FDC  1  A2 03                ldx #3
003FDE  1               tora9:
003FDE  1  A9 FF 48 BD          set_ax  absORa,$ff
003FE2  1  56 02 28     
003FE5  1  1D 4A 02             ora absOR,x
003FE8  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003FEC  1  F0 03 20 FF  
003FF0  1  FF 68 09 08  
003FFE  1  CA                   dex
003FFF  1  10 DD                bpl tora9
004001  1               
004001  1  A0 03                ldy #3      ;abs,y
004003  1               tora10:
004003  1  A9 00 48 B9          set_ay  absORa,0
004007  1  56 02 28     
00400A  1  19 4A 02             ora absOR,y
00400D  1  08 D9 62 02          tst_ay  absrlo,absflo,0
004011  1  F0 03 20 FF  
004015  1  FF 68 09 08  
004023  1  88                   dey
004024  1  10 DD                bpl tora10
004026  1  A0 03                ldy #3
004028  1               tora11:
004028  1  A9 FF 48 B9          set_ay  absORa,$ff
00402C  1  56 02 28     
00402F  1  19 4A 02             ora absOR,y
004032  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
004036  1  F0 03 20 FF  
00403A  1  FF 68 09 08  
004048  1  88                   dey
004049  1  10 DD                bpl tora11
00404B  1               
00404B  1  A2 06                ldx #6      ;(zp,x)
00404D  1  A0 03                ldy #3
00404F  1               tora12:
00404F  1  A9 00 48 B9          set_ay  absORa,0
004053  1  56 02 28     
004056  1  01 4A                ora (indOR,x)
004058  1  08 D9 62 02          tst_ay  absrlo,absflo,0
00405C  1  F0 03 20 FF  
004060  1  FF 68 09 08  
00406E  1  CA                   dex
00406F  1  CA                   dex
004070  1  88                   dey
004071  1  10 DC                bpl tora12
004073  1  A2 06                ldx #6
004075  1  A0 03                ldy #3
004077  1               tora13:
004077  1  A9 FF 48 B9          set_ay  absORa,$ff
00407B  1  56 02 28     
00407E  1  01 4A                ora (indOR,x)
004080  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
004084  1  F0 03 20 FF  
004088  1  FF 68 09 08  
004096  1  CA                   dex
004097  1  CA                   dex
004098  1  88                   dey
004099  1  10 DC                bpl tora13
00409B  1               
00409B  1  A0 03                ldy #3      ;(zp),y
00409D  1               tora14:
00409D  1  A9 00 48 B9          set_ay  absORa,0
0040A1  1  56 02 28     
0040A4  1  11 4A                ora (indOR),y
0040A6  1  08 D9 62 02          tst_ay  absrlo,absflo,0
0040AA  1  F0 03 20 FF  
0040AE  1  FF 68 09 08  
0040BC  1  88                   dey
0040BD  1  10 DE                bpl tora14
0040BF  1  A0 03                ldy #3
0040C1  1               tora15:
0040C1  1  A9 FF 48 B9          set_ay  absORa,$ff
0040C5  1  56 02 28     
0040C8  1  11 4A                ora (indOR),y
0040CA  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
0040CE  1  F0 03 20 FF  
0040D2  1  FF 68 09 08  
0040E0  1  88                   dey
0040E1  1  10 DE                bpl tora15
0040E3  1                   .if I_flag = 3
0040E3  1  58                   cli
0040E4  1                   .endif
0040E4  1  AD 00 02 C9          next_test
0040E8  1  28 F0 03 20  
0040EC  1  FF FF A9 29  
0040F3  1               
0040F3  1               ; full binary add/subtract test
0040F3  1               ; iterates through all combinations of operands and carry input
0040F3  1               ; uses increments/decrements to predict result & result flags
0040F3  1  D8                   cld
0040F4  1  A2 0E                ldx #ad2        ;for indexed test
0040F6  1  A0 FF                ldy #$ff        ;max range
0040F8  1  A9 00                lda #0          ;start with adding zeroes & no carry
0040FA  1  85 0C                sta adfc        ;carry in - for diag
0040FC  1  85 0D                sta ad1         ;operand 1 - accumulator
0040FE  1  85 0E                sta ad2         ;operand 2 - memory or immediate
004100  1  8D 03 02             sta ada2        ;non zp
004103  1  85 0F                sta adrl        ;expected result bits 0-7
004105  1  85 10                sta adrh        ;expected result bit 8 (carry out)
004107  1  A9 FF                lda #$ff        ;complemented operand 2 for subtract
004109  1  85 12                sta sb2
00410B  1  8D 04 02             sta sba2        ;non zp
00410E  1  A9 02                lda #2          ;expected Z-flag
004110  1  85 11                sta adrf
004112  1  18           tadd:   clc             ;test with carry clear
004113  1  20 61 41             jsr chkadd
004116  1  E6 0C                inc adfc        ;now with carry
004118  1  E6 0F                inc adrl        ;result +1
00411A  1  08                   php             ;save N & Z from low result
00411B  1  08                   php
00411C  1  68                   pla             ;accu holds expected flags
00411D  1  29 82                and #$82        ;mask N & Z
00411F  1  28                   plp
004120  1  D0 02                bne tadd1
004122  1  E6 10                inc adrh        ;result bit 8 - carry
004124  1  05 10        tadd1:  ora adrh        ;merge C to expected flags
004126  1  85 11                sta adrf        ;save expected flags except overflow
004128  1  38                   sec             ;test with carry set
004129  1  20 61 41             jsr chkadd
00412C  1  C6 0C                dec adfc        ;same for operand +1 but no carry
00412E  1  E6 0D                inc ad1
004130  1  D0 E0                bne tadd        ;iterate op1
004132  1  A9 00                lda #0          ;preset result to op2 when op1 = 0
004134  1  85 10                sta adrh
004136  1  EE 03 02             inc ada2
004139  1  E6 0E                inc ad2
00413B  1  08                   php             ;save NZ as operand 2 becomes the new result
00413C  1  68                   pla
00413D  1  29 82                and #$82        ;mask N00000Z0
00413F  1  85 11                sta adrf        ;no need to check carry as we are adding to 0
004141  1  C6 12                dec sb2         ;complement subtract operand 2
004143  1  CE 04 02             dec sba2
004146  1  A5 0E                lda ad2
004148  1  85 0F                sta adrl
00414A  1  D0 C6                bne tadd        ;iterate op2
00414C  1                   .if disable_decimal < 1
00414C  1                       next_test
00414C  1               
00414C  1               ; decimal add/subtract test
00414C  1               ; *** WARNING - tests documented behavior only! ***
00414C  1               ;   only valid BCD operands are tested, N V Z flags are ignored
00414C  1               ; iterates through all valid combinations of operands and carry input
00414C  1               ; uses increments/decrements to predict result & carry flag
00414C  1                       sed
00414C  1                       ldx #ad2        ;for indexed test
00414C  1                       ldy #$ff        ;max range
00414C  1                       lda #$99        ;start with adding 99 to 99 with carry
00414C  1                       sta ad1         ;operand 1 - accumulator
00414C  1                       sta ad2         ;operand 2 - memory or immediate
00414C  1                       sta ada2        ;non zp
00414C  1                       sta adrl        ;expected result bits 0-7
00414C  1                       lda #1          ;set carry in & out
00414C  1                       sta adfc        ;carry in - for diag
00414C  1                       sta adrh        ;expected result bit 8 (carry out)
00414C  1                       lda #0          ;complemented operand 2 for subtract
00414C  1                       sta sb2
00414C  1                       sta sba2        ;non zp
00414C  1               tdad:   sec             ;test with carry set
00414C  1                       jsr chkdad
00414C  1                       dec adfc        ;now with carry clear
00414C  1                       lda adrl        ;decimal adjust result
00414C  1                       bne tdad1       ;skip clear carry & preset result 99 (9A-1)
00414C  1                       dec adrh
00414C  1                       lda #$99
00414C  1                       sta adrl
00414C  1                       bne tdad3
00414C  1               tdad1:  and #$f         ;lower nibble mask
00414C  1                       bne tdad2       ;no decimal adjust needed
00414C  1                       dec adrl        ;decimal adjust (?0-6)
00414C  1                       dec adrl
00414C  1                       dec adrl
00414C  1                       dec adrl
00414C  1                       dec adrl
00414C  1                       dec adrl
00414C  1               tdad2:  dec adrl        ;result -1
00414C  1               tdad3:  clc             ;test with carry clear
00414C  1                       jsr chkdad
00414C  1                       inc adfc        ;same for operand -1 but with carry
00414C  1                       lda ad1         ;decimal adjust operand 1
00414C  1                       beq tdad5       ;iterate operand 2
00414C  1                       and #$f         ;lower nibble mask
00414C  1                       bne tdad4       ;skip decimal adjust
00414C  1                       dec ad1         ;decimal adjust (?0-6)
00414C  1                       dec ad1
00414C  1                       dec ad1
00414C  1                       dec ad1
00414C  1                       dec ad1
00414C  1                       dec ad1
00414C  1               tdad4:  dec ad1         ;operand 1 -1
00414C  1                       jmp tdad        ;iterate op1
00414C  1               
00414C  1               tdad5:  lda #$99        ;precharge op1 max
00414C  1                       sta ad1
00414C  1                       lda ad2         ;decimal adjust operand 2
00414C  1                       beq tdad7       ;end of iteration
00414C  1                       and #$f         ;lower nibble mask
00414C  1                       bne tdad6       ;skip decimal adjust
00414C  1                       dec ad2         ;decimal adjust (?0-6)
00414C  1                       dec ad2
00414C  1                       dec ad2
00414C  1                       dec ad2
00414C  1                       dec ad2
00414C  1                       dec ad2
00414C  1                       inc sb2         ;complemented decimal adjust for subtract (?9+6)
00414C  1                       inc sb2
00414C  1                       inc sb2
00414C  1                       inc sb2
00414C  1                       inc sb2
00414C  1                       inc sb2
00414C  1               tdad6:  dec ad2         ;operand 2 -1
00414C  1                       inc sb2         ;complemented operand for subtract
00414C  1                       lda sb2
00414C  1                       sta sba2        ;copy as non zp operand
00414C  1                       lda ad2
00414C  1                       sta ada2        ;copy as non zp operand
00414C  1                       sta adrl        ;new result since op1+carry=00+carry +op2=op2
00414C  1                       inc adrh        ;result carry
00414C  1                       bne tdad        ;iterate op2
00414C  1               tdad7:
00414C  1                       next_test
00414C  1               
00414C  1               ; decimal/binary switch test
00414C  1               ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
00414C  1               ;   tables
00414C  1                       clc
00414C  1                       cld
00414C  1                       php
00414C  1                       lda #$55
00414C  1                       adc #$55
00414C  1                       cmp #$aa
00414C  1                       trap_ne         ;expected binary result after cld
00414C  1                       clc
00414C  1                       sed
00414C  1                       php
00414C  1                       lda #$55
00414C  1                       adc #$55
00414C  1                       cmp #$10
00414C  1                       trap_ne         ;expected decimal result after sed
00414C  1                       cld
00414C  1                       plp
00414C  1                       lda #$55
00414C  1                       adc #$55
00414C  1                       cmp #$10
00414C  1                       trap_ne         ;expected decimal result after plp D=1
00414C  1                       plp
00414C  1                       lda #$55
00414C  1                       adc #$55
00414C  1                       cmp #$aa
00414C  1                       trap_ne         ;expected binary result after plp D=0
00414C  1                       clc
00414C  1                       lda #>bin_rti_ret ;emulated interrupt for rti
00414C  1                       pha
00414C  1                       lda #<bin_rti_ret
00414C  1                       pha
00414C  1                       php
00414C  1                       sed
00414C  1                       lda #>dec_rti_ret ;emulated interrupt for rti
00414C  1                       pha
00414C  1                       lda #<dec_rti_ret
00414C  1                       pha
00414C  1                       php
00414C  1                       cld
00414C  1                       rti
00414C  1               dec_rti_ret:
00414C  1                       lda #$55
00414C  1                       adc #$55
00414C  1                       cmp #$10
00414C  1                       trap_ne         ;expected decimal result after rti D=1
00414C  1                       rti
00414C  1               bin_rti_ret:
00414C  1                       lda #$55
00414C  1                       adc #$55
00414C  1                       cmp #$aa
00414C  1                       trap_ne         ;expected binary result after rti D=0
00414C  1                   .endif
00414C  1               
00414C  1  AD 00 02             lda test_case
00414F  1  C9 29                cmp #test_num
004151  1  F0 03 20 FF          trap_ne         ;previous test is out of sequence
004155  1  FF           
004156  1  A9 F0                lda #$f0        ;mark opcode testing complete
004158  1  8D 00 02             sta test_case
00415B  1               
00415B  1               ; final RAM integrity test
00415B  1               ;   verifies that none of the previous tests has altered RAM outside of the
00415B  1               ;   designated write areas.
00415B  1                       check_ram
00415B  1               ; *** DEBUG INFO ***
00415B  1               ; to debug checksum errors uncomment check_ram in the next_test macro to
00415B  1               ; narrow down the responsible opcode.
00415B  1               ; may give false errors when monitor, OS or other background activity is
00415B  1               ; allowed during previous tests.
00415B  1               
00415B  1               
00415B  1               ; S U C C E S S ************************************************
00415B  1               ; -------------
00415B  1  20 FE FF             success         ;if you get here everything went well
00415E  1               ; -------------
00415E  1               ; S U C C E S S ************************************************
00415E  1  4C 00 04             jmp start       ;run again
004161  1               
004161  1                   .if disable_decimal < 1
004161  1               ; core subroutine of the decimal add/subtract test
004161  1               ; *** WARNING - tests documented behavior only! ***
004161  1               ;   only valid BCD operands are tested, N V Z flags are ignored
004161  1               ; iterates through all valid combinations of operands and carry input
004161  1               ; uses increments/decrements to predict result & carry flag
004161  1               chkdad:
004161  1               ; decimal ADC / SBC zp
004161  1                       php             ;save carry for subtract
004161  1                       lda ad1
004161  1                       adc ad2         ;perform add
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1                       php             ;save carry for next add
004161  1                       lda ad1
004161  1                       sbc sb2         ;perform subtract
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad flags
004161  1                       plp
004161  1               ; decimal ADC / SBC abs
004161  1                       php             ;save carry for subtract
004161  1                       lda ad1
004161  1                       adc ada2        ;perform add
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1                       php             ;save carry for next add
004161  1                       lda ad1
004161  1                       sbc sba2        ;perform subtract
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1               ; decimal ADC / SBC #
004161  1                       php             ;save carry for subtract
004161  1                       lda ad2
004161  1                       sta ex_adci+1   ;set ADC # operand
004161  1                       lda ad1
004161  1                       jsr ex_adci     ;execute ADC # in RAM
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1                       php             ;save carry for next add
004161  1                       lda sb2
004161  1                       sta ex_sbci+1   ;set SBC # operand
004161  1                       lda ad1
004161  1                       jsr ex_sbci     ;execute SBC # in RAM
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1               ; decimal ADC / SBC zp,x
004161  1                       php             ;save carry for subtract
004161  1                       lda ad1
004161  1                       adc 0,x         ;perform add
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1                       php             ;save carry for next add
004161  1                       lda ad1
004161  1                       sbc sb2-ad2,x   ;perform subtract
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1               ; decimal ADC / SBC abs,x
004161  1                       php             ;save carry for subtract
004161  1                       lda ad1
004161  1                       adc ada2-ad2,x  ;perform add
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1                       php             ;save carry for next add
004161  1                       lda ad1
004161  1                       sbc sba2-ad2,x  ;perform subtract
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1               ; decimal ADC / SBC abs,y
004161  1                       php             ;save carry for subtract
004161  1                       lda ad1
004161  1                       adc ada2-$ff,y  ;perform add
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1                       php             ;save carry for next add
004161  1                       lda ad1
004161  1                       sbc sba2-$ff,y  ;perform subtract
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1               ; decimal ADC / SBC (zp,x)
004161  1                       php             ;save carry for subtract
004161  1                       lda ad1
004161  1                       adc (<adi2-ad2,x) ;perform add
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1                       php             ;save carry for next add
004161  1                       lda ad1
004161  1                       sbc (<sbi2-ad2,x) ;perform subtract
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1               ; decimal ADC / SBC (abs),y
004161  1                       php             ;save carry for subtract
004161  1                       lda ad1
004161  1                       adc (adiy2),y   ;perform add
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1                       php             ;save carry for next add
004161  1                       lda ad1
004161  1                       sbc (sbiy2),y   ;perform subtract
004161  1                       php
004161  1                       cmp adrl        ;check result
004161  1                       trap_ne         ;bad result
004161  1                       pla             ;check flags
004161  1                       and #1          ;mask carry
004161  1                       cmp adrh
004161  1                       trap_ne         ;bad carry
004161  1                       plp
004161  1                       rts
004161  1                   .endif
004161  1               
004161  1               ; core subroutine of the full binary add/subtract test
004161  1               ; iterates through all combinations of operands and carry input
004161  1               ; uses increments/decrements to predict result & result flags
004161  1  A5 11        chkadd: lda adrf        ;add V-flag if overflow
004163  1  29 83                and #$83        ;keep N-----ZC / clear V
004165  1  48                   pha
004166  1  A5 0D                lda ad1         ;test sign unequal between operands
004168  1  45 0E                eor ad2
00416A  1  30 0A                bmi ckad1       ;no overflow possible - operands have different sign
00416C  1  A5 0D                lda ad1         ;test sign equal between operands and result
00416E  1  45 0F                eor adrl
004170  1  10 04                bpl ckad1       ;no overflow occured - operand and result have same sign
004172  1  68                   pla
004173  1  09 40                ora #$40        ;set V
004175  1  48                   pha
004176  1  68           ckad1:  pla
004177  1  85 11                sta adrf        ;save expected flags
004179  1               ; binary ADC / SBC zp
004179  1  08                   php             ;save carry for subtract
00417A  1  A5 0D                lda ad1
00417C  1  65 0E                adc ad2         ;perform add
00417E  1  08                   php
00417F  1  C5 0F                cmp adrl        ;check result
004181  1  F0 03 20 FF          trap_ne         ;bad result
004185  1  FF           
004186  1  68                   pla             ;check flags
004187  1  29 C3                and #$c3        ;mask NV----ZC
004189  1  C5 11                cmp adrf
00418B  1  F0 03 20 FF          trap_ne         ;bad flags
00418F  1  FF           
004190  1  28                   plp
004191  1  08                   php             ;save carry for next add
004192  1  A5 0D                lda ad1
004194  1  E5 12                sbc sb2         ;perform subtract
004196  1  08                   php
004197  1  C5 0F                cmp adrl        ;check result
004199  1  F0 03 20 FF          trap_ne         ;bad result
00419D  1  FF           
00419E  1  68                   pla             ;check flags
00419F  1  29 C3                and #$c3        ;mask NV----ZC
0041A1  1  C5 11                cmp adrf
0041A3  1  F0 03 20 FF          trap_ne         ;bad flags
0041A7  1  FF           
0041A8  1  28                   plp
0041A9  1               ; binary ADC / SBC abs
0041A9  1  08                   php             ;save carry for subtract
0041AA  1  A5 0D                lda ad1
0041AC  1  6D 03 02             adc ada2        ;perform add
0041AF  1  08                   php
0041B0  1  C5 0F                cmp adrl        ;check result
0041B2  1  F0 03 20 FF          trap_ne         ;bad result
0041B6  1  FF           
0041B7  1  68                   pla             ;check flags
0041B8  1  29 C3                and #$c3        ;mask NV----ZC
0041BA  1  C5 11                cmp adrf
0041BC  1  F0 03 20 FF          trap_ne         ;bad flags
0041C0  1  FF           
0041C1  1  28                   plp
0041C2  1  08                   php             ;save carry for next add
0041C3  1  A5 0D                lda ad1
0041C5  1  ED 04 02             sbc sba2        ;perform subtract
0041C8  1  08                   php
0041C9  1  C5 0F                cmp adrl        ;check result
0041CB  1  F0 03 20 FF          trap_ne         ;bad result
0041CF  1  FF           
0041D0  1  68                   pla             ;check flags
0041D1  1  29 C3                and #$c3        ;mask NV----ZC
0041D3  1  C5 11                cmp adrf
0041D5  1  F0 03 20 FF          trap_ne         ;bad flags
0041D9  1  FF           
0041DA  1  28                   plp
0041DB  1               ; binary ADC / SBC #
0041DB  1  08                   php             ;save carry for subtract
0041DC  1  A5 0E                lda ad2
0041DE  1  8D 12 02             sta ex_adci+1   ;set ADC # operand
0041E1  1  A5 0D                lda ad1
0041E3  1  20 11 02             jsr ex_adci     ;execute ADC # in RAM
0041E6  1  08                   php
0041E7  1  C5 0F                cmp adrl        ;check result
0041E9  1  F0 03 20 FF          trap_ne         ;bad result
0041ED  1  FF           
0041EE  1  68                   pla             ;check flags
0041EF  1  29 C3                and #$c3        ;mask NV----ZC
0041F1  1  C5 11                cmp adrf
0041F3  1  F0 03 20 FF          trap_ne         ;bad flags
0041F7  1  FF           
0041F8  1  28                   plp
0041F9  1  08                   php             ;save carry for next add
0041FA  1  A5 12                lda sb2
0041FC  1  8D 15 02             sta ex_sbci+1   ;set SBC # operand
0041FF  1  A5 0D                lda ad1
004201  1  20 14 02             jsr ex_sbci     ;execute SBC # in RAM
004204  1  08                   php
004205  1  C5 0F                cmp adrl        ;check result
004207  1  F0 03 20 FF          trap_ne         ;bad result
00420B  1  FF           
00420C  1  68                   pla             ;check flags
00420D  1  29 C3                and #$c3        ;mask NV----ZC
00420F  1  C5 11                cmp adrf
004211  1  F0 03 20 FF          trap_ne         ;bad flags
004215  1  FF           
004216  1  28                   plp
004217  1               ; binary ADC / SBC zp,x
004217  1  08                   php             ;save carry for subtract
004218  1  A5 0D                lda ad1
00421A  1  75 00                adc 0,x         ;perform add
00421C  1  08                   php
00421D  1  C5 0F                cmp adrl        ;check result
00421F  1  F0 03 20 FF          trap_ne         ;bad result
004223  1  FF           
004224  1  68                   pla             ;check flags
004225  1  29 C3                and #$c3        ;mask NV----ZC
004227  1  C5 11                cmp adrf
004229  1  F0 03 20 FF          trap_ne         ;bad flags
00422D  1  FF           
00422E  1  28                   plp
00422F  1  08                   php             ;save carry for next add
004230  1  A5 0D                lda ad1
004232  1  F5 04                sbc sb2-ad2,x   ;perform subtract
004234  1  08                   php
004235  1  C5 0F                cmp adrl        ;check result
004237  1  F0 03 20 FF          trap_ne         ;bad result
00423B  1  FF           
00423C  1  68                   pla             ;check flags
00423D  1  29 C3                and #$c3        ;mask NV----ZC
00423F  1  C5 11                cmp adrf
004241  1  F0 03 20 FF          trap_ne         ;bad flags
004245  1  FF           
004246  1  28                   plp
004247  1               ; binary ADC / SBC abs,x
004247  1  08                   php             ;save carry for subtract
004248  1  A5 0D                lda ad1
00424A  1  7D F5 01             adc ada2-ad2,x  ;perform add
00424D  1  08                   php
00424E  1  C5 0F                cmp adrl        ;check result
004250  1  F0 03 20 FF          trap_ne         ;bad result
004254  1  FF           
004255  1  68                   pla             ;check flags
004256  1  29 C3                and #$c3        ;mask NV----ZC
004258  1  C5 11                cmp adrf
00425A  1  F0 03 20 FF          trap_ne         ;bad flags
00425E  1  FF           
00425F  1  28                   plp
004260  1  08                   php             ;save carry for next add
004261  1  A5 0D                lda ad1
004263  1  FD F6 01             sbc sba2-ad2,x  ;perform subtract
004266  1  08                   php
004267  1  C5 0F                cmp adrl        ;check result
004269  1  F0 03 20 FF          trap_ne         ;bad result
00426D  1  FF           
00426E  1  68                   pla             ;check flags
00426F  1  29 C3                and #$c3        ;mask NV----ZC
004271  1  C5 11                cmp adrf
004273  1  F0 03 20 FF          trap_ne         ;bad flags
004277  1  FF           
004278  1  28                   plp
004279  1               ; binary ADC / SBC abs,y
004279  1  08                   php             ;save carry for subtract
00427A  1  A5 0D                lda ad1
00427C  1  79 04 01             adc ada2-$ff,y  ;perform add
00427F  1  08                   php
004280  1  C5 0F                cmp adrl        ;check result
004282  1  F0 03 20 FF          trap_ne         ;bad result
004286  1  FF           
004287  1  68                   pla             ;check flags
004288  1  29 C3                and #$c3        ;mask NV----ZC
00428A  1  C5 11                cmp adrf
00428C  1  F0 03 20 FF          trap_ne         ;bad flags
004290  1  FF           
004291  1  28                   plp
004292  1  08                   php             ;save carry for next add
004293  1  A5 0D                lda ad1
004295  1  F9 05 01             sbc sba2-$ff,y  ;perform subtract
004298  1  08                   php
004299  1  C5 0F                cmp adrl        ;check result
00429B  1  F0 03 20 FF          trap_ne         ;bad result
00429F  1  FF           
0042A0  1  68                   pla             ;check flags
0042A1  1  29 C3                and #$c3        ;mask NV----ZC
0042A3  1  C5 11                cmp adrf
0042A5  1  F0 03 20 FF          trap_ne         ;bad flags
0042A9  1  FF           
0042AA  1  28                   plp
0042AB  1               ; binary ADC / SBC (zp,x)
0042AB  1  08                   php             ;save carry for subtract
0042AC  1  A5 0D                lda ad1
0042AE  1  61 44                adc (<adi2-ad2,x) ;perform add
0042B0  1  08                   php
0042B1  1  C5 0F                cmp adrl        ;check result
0042B3  1  F0 03 20 FF          trap_ne         ;bad result
0042B7  1  FF           
0042B8  1  68                   pla             ;check flags
0042B9  1  29 C3                and #$c3        ;mask NV----ZC
0042BB  1  C5 11                cmp adrf
0042BD  1  F0 03 20 FF          trap_ne         ;bad flags
0042C1  1  FF           
0042C2  1  28                   plp
0042C3  1  08                   php             ;save carry for next add
0042C4  1  A5 0D                lda ad1
0042C6  1  E1 46                sbc (<sbi2-ad2,x) ;perform subtract
0042C8  1  08                   php
0042C9  1  C5 0F                cmp adrl        ;check result
0042CB  1  F0 03 20 FF          trap_ne         ;bad result
0042CF  1  FF           
0042D0  1  68                   pla             ;check flags
0042D1  1  29 C3                and #$c3        ;mask NV----ZC
0042D3  1  C5 11                cmp adrf
0042D5  1  F0 03 20 FF          trap_ne         ;bad flags
0042D9  1  FF           
0042DA  1  28                   plp
0042DB  1               ; binary ADC / SBC (abs),y
0042DB  1  08                   php             ;save carry for subtract
0042DC  1  A5 0D                lda ad1
0042DE  1  71 56                adc (adiy2),y   ;perform add
0042E0  1  08                   php
0042E1  1  C5 0F                cmp adrl        ;check result
0042E3  1  F0 03 20 FF          trap_ne         ;bad result
0042E7  1  FF           
0042E8  1  68                   pla             ;check flags
0042E9  1  29 C3                and #$c3        ;mask NV----ZC
0042EB  1  C5 11                cmp adrf
0042ED  1  F0 03 20 FF          trap_ne         ;bad flags
0042F1  1  FF           
0042F2  1  28                   plp
0042F3  1  08                   php             ;save carry for next add
0042F4  1  A5 0D                lda ad1
0042F6  1  F1 58                sbc (sbiy2),y   ;perform subtract
0042F8  1  08                   php
0042F9  1  C5 0F                cmp adrl        ;check result
0042FB  1  F0 03 20 FF          trap_ne         ;bad result
0042FF  1  FF           
004300  1  68                   pla             ;check flags
004301  1  29 C3                and #$c3        ;mask NV----ZC
004303  1  C5 11                cmp adrf
004305  1  F0 03 20 FF          trap_ne         ;bad flags
004309  1  FF           
00430A  1  28                   plp
00430B  1  60                   rts
00430C  1               
00430C  1               ; target for the jump absolute test
00430C  1  88                   dey
00430D  1  88                   dey
00430E  1               test_far:
00430E  1  08                   php             ;either SP or Y count will fail, if we do not hit
00430F  1  88                   dey
004310  1  88                   dey
004311  1  88                   dey
004312  1  28                   plp
004313  1  90 03 20 FF          trap_cs         ;flags loaded?
004317  1  FF           
004318  1  50 03 20 FF          trap_vs
00431C  1  FF           
00431D  1  10 03 20 FF          trap_mi
004321  1  FF           
004322  1  D0 03 20 FF          trap_eq
004326  1  FF           
004327  1  C9 46                cmp #'F'        ;registers loaded?
004329  1  F0 03 20 FF          trap_ne
00432D  1  FF           
00432E  1  E0 41                cpx #'A'
004330  1  F0 03 20 FF          trap_ne
004334  1  FF           
004335  1  C0 4F                cpy #('R'-3)
004337  1  F0 03 20 FF          trap_ne
00433B  1  FF           
00433C  1  48                   pha             ;save a,x
00433D  1  8A                   txa
00433E  1  48                   pha
00433F  1  BA                   tsx
004340  1  E0 FD                cpx #$fd        ;check SP
004342  1  F0 03 20 FF          trap_ne
004346  1  FF           
004347  1  68                   pla             ;restore x
004348  1  AA                   tax
004349  1  A9 FF 48 28          set_stat $ff
00434D  1  68                   pla             ;restore a
00434E  1  E8                   inx             ;return registers with modifications
00434F  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
004351  1  4C 14 0A             jmp far_ret
004354  1               
004354  1               ; target for the jump indirect test
004354  1               ;       .align 2
004354  1                       .if * & 1       ; workaround for problems with .align 2
004354  1                           .byte 0     ;
004354  1                       .endif          ;
004354  1               ptr_tst_ind:
004354  1  5D 43                .word   test_ind
004356  1               ptr_ind_ret:
004356  1  9C 0A                .word   ind_ret
004358  1  20 FF FF             trap            ;runover protection
00435B  1  88                   dey
00435C  1  88                   dey
00435D  1               test_ind:
00435D  1  08                   php             ;either SP or Y count will fail, if we do not hit
00435E  1  88                   dey
00435F  1  88                   dey
004360  1  88                   dey
004361  1  28                   plp
004362  1  90 03 20 FF          trap_cs         ;flags loaded?
004366  1  FF           
004367  1  50 03 20 FF          trap_vs
00436B  1  FF           
00436C  1  10 03 20 FF          trap_mi
004370  1  FF           
004371  1  D0 03 20 FF          trap_eq
004375  1  FF           
004376  1  C9 49                cmp #'I'        ;registers loaded?
004378  1  F0 03 20 FF          trap_ne
00437C  1  FF           
00437D  1  E0 4E                cpx #'N'
00437F  1  F0 03 20 FF          trap_ne
004383  1  FF           
004384  1  C0 41                cpy #('D'-3)
004386  1  F0 03 20 FF          trap_ne
00438A  1  FF           
00438B  1  48                   pha             ;save a,x
00438C  1  8A                   txa
00438D  1  48                   pha
00438E  1  BA                   tsx
00438F  1  E0 FD                cpx #$fd        ;check SP
004391  1  F0 03 20 FF          trap_ne
004395  1  FF           
004396  1  68                   pla             ;restore x
004397  1  AA                   tax
004398  1  A9 FF 48 28          set_stat $ff
00439C  1  68                   pla             ;restore a
00439D  1  E8                   inx             ;return registers with modifications
00439E  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
0043A0  1  6C 56 43             jmp (ptr_ind_ret)
0043A3  1  20 FF FF             trap            ;runover protection
0043A6  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
0043A9  1               
0043A9  1               ; target for the jump subroutine test
0043A9  1  88                   dey
0043AA  1  88                   dey
0043AB  1               test_jsr:
0043AB  1  08                   php             ;either SP or Y count will fail, if we do not hit
0043AC  1  88                   dey
0043AD  1  88                   dey
0043AE  1  88                   dey
0043AF  1  28                   plp
0043B0  1  90 03 20 FF          trap_cs         ;flags loaded?
0043B4  1  FF           
0043B5  1  50 03 20 FF          trap_vs
0043B9  1  FF           
0043BA  1  10 03 20 FF          trap_mi
0043BE  1  FF           
0043BF  1  D0 03 20 FF          trap_eq
0043C3  1  FF           
0043C4  1  C9 4A                cmp #'J'        ;registers loaded?
0043C6  1  F0 03 20 FF          trap_ne
0043CA  1  FF           
0043CB  1  E0 53                cpx #'S'
0043CD  1  F0 03 20 FF          trap_ne
0043D1  1  FF           
0043D2  1  C0 4F                cpy #('R'-3)
0043D4  1  F0 03 20 FF          trap_ne
0043D8  1  FF           
0043D9  1  48                   pha             ;save a,x
0043DA  1  8A                   txa
0043DB  1  48                   pha
0043DC  1  BA                   tsx             ;sp -4? (return addr,a,x)
0043DD  1  E0 FB                cpx #$fb
0043DF  1  F0 03 20 FF          trap_ne
0043E3  1  FF           
0043E4  1  AD FF 01             lda $1ff        ;propper return on stack
0043E7  1  C9 0A                cmp #>jsr_ret
0043E9  1  F0 03 20 FF          trap_ne
0043ED  1  FF           
0043EE  1  AD FE 01             lda $1fe
0043F1  1  C9 ED                cmp #<jsr_ret
0043F3  1  F0 03 20 FF          trap_ne
0043F7  1  FF           
0043F8  1  A9 FF 48 28          set_stat $ff
0043FC  1  68                   pla             ;pull x,a
0043FD  1  AA                   tax
0043FE  1  68                   pla
0043FF  1  E8                   inx             ;return registers with modifications
004400  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
004402  1  60                   rts
004403  1  20 FF FF             trap            ;runover protection
004406  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
004409  1               
004409  1               ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
004409  1               nmi_trap:
004409  1  20 FF FF             trap            ;check stack for conditions at NMI
00440C  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
00440F  1               res_trap:
00440F  1  20 FF FF             trap            ;unexpected RESET
004412  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
004415  1               
004415  1  88                   dey
004416  1  88                   dey
004417  1               irq_trap:               ;BRK test or unextpected BRK or IRQ
004417  1  08                   php             ;either SP or Y count will fail, if we do not hit
004418  1  88                   dey
004419  1  88                   dey
00441A  1  88                   dey
00441B  1                       ;next traps could be caused by unexpected BRK or IRQ
00441B  1                       ;check stack for BREAK and originating location
00441B  1                       ;possible jump/branch into weeds (uninitialized space)
00441B  1  C9 BD                cmp #$ff-'B'    ;BRK pass 2 registers loaded?
00441D  1  F0 5E                beq break2
00441F  1  C9 42                cmp #'B'        ;BRK pass 1 registers loaded?
004421  1  F0 03 20 FF          trap_ne
004425  1  FF           
004426  1  E0 52                cpx #'R'
004428  1  F0 03 20 FF          trap_ne
00442C  1  FF           
00442D  1  C0 48                cpy #'K'-3
00442F  1  F0 03 20 FF          trap_ne
004433  1  FF           
004434  1  85 0A                sta irq_a       ;save registers during break test
004436  1  86 0B                stx irq_x
004438  1  BA                   tsx             ;test break on stack
004439  1  BD 02 01             lda $102,x
00443C  1  09 08 C9 38          cmp_flag 0      ;break test should have B=1 & unused=1 on stack
004440  1  F0 03 20 FF          trap_ne         ; - no break flag on stack
004444  1  FF           
004445  1  68                   pla
004446  1  09 08 C9 3C          cmp_flag intdis ;should have added interrupt disable
00444A  1  F0 03 20 FF          trap_ne
00444E  1  FF           
00444F  1  BA                   tsx
004450  1  E0 FC                cpx #$fc        ;sp -3? (return addr, flags)
004452  1  F0 03 20 FF          trap_ne
004456  1  FF           
004457  1  AD FF 01             lda $1ff        ;propper return on stack
00445A  1  C9 0B                cmp #>brk_ret0
00445C  1  F0 03 20 FF          trap_ne
004460  1  FF           
004461  1  AD FE 01             lda $1fe
004464  1  C9 3F                cmp #<brk_ret0
004466  1  F0 03 20 FF          trap_ne
00446A  1  FF           
00446B  1  A9 FF                load_flag $ff
00446D  1  48                   pha
00446E  1  A6 0B                ldx irq_x
004470  1  E8                   inx             ;return registers with modifications
004471  1  A5 0A                lda irq_a
004473  1  49 AA                eor #$aa
004475  1  28                   plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
004476  1  40                   rti
004477  1  20 FF FF             trap            ;runover protection
00447A  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
00447D  1               
00447D  1               break2:                 ;BRK pass 2
00447D  1  E0 AD                cpx #$ff-'R'
00447F  1  F0 03 20 FF          trap_ne
004483  1  FF           
004484  1  C0 B1                cpy #$ff-'K'-3
004486  1  F0 03 20 FF          trap_ne
00448A  1  FF           
00448B  1  85 0A                sta irq_a       ;save registers during break test
00448D  1  86 0B                stx irq_x
00448F  1  BA                   tsx             ;test break on stack
004490  1  BD 02 01             lda $102,x
004493  1  09 08 C9 FF          cmp_flag $ff    ;break test should have B=1
004497  1  F0 03 20 FF          trap_ne         ; - no break flag on stack
00449B  1  FF           
00449C  1  68                   pla
00449D  1  09 08                ora #decmode    ;ignore decmode cleared if 65c02
00449F  1  09 08 C9 FF          cmp_flag $ff    ;actual passed flags
0044A3  1  F0 03 20 FF          trap_ne
0044A7  1  FF           
0044A8  1  BA                   tsx
0044A9  1  E0 FC                cpx #$fc        ;sp -3? (return addr, flags)
0044AB  1  F0 03 20 FF          trap_ne
0044AF  1  FF           
0044B0  1  AD FF 01             lda $1ff        ;propper return on stack
0044B3  1  C9 0B                cmp #>brk_ret1
0044B5  1  F0 03 20 FF          trap_ne
0044B9  1  FF           
0044BA  1  AD FE 01             lda $1fe
0044BD  1  C9 76                cmp #<brk_ret1
0044BF  1  F0 03 20 FF          trap_ne
0044C3  1  FF           
0044C4  1  A9 04                load_flag intdis
0044C6  1  48                   pha
0044C7  1  A6 0B                ldx irq_x
0044C9  1  E8                   inx             ;return registers with modifications
0044CA  1  A5 0A                lda irq_a
0044CC  1  49 AA                eor #$aa
0044CE  1  28                   plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
0044CF  1  40                   rti
0044D0  1  20 FF FF             trap            ;runover protection
0044D3  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
0044D6  1               
0044D6  1               ;     .if report = 1
0044D6  1               ;         .include "report.i65"
0044D6  1               ;     .endif
0044D6  1               
0044D6  1               ;copy of data to initialize BSS segment
0044D6  1                   .if load_data_direct <> 1
0044D6  1               zp_init:
0044D6  1               zp1_:   .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0044D6  1               zp7f_:  .byte   $7f             ;test pattern for compare
0044D6  1               ;logical zeropage operands
0044D6  1               zpOR_:  .byte   0,$1f,$71,$80   ;test pattern for OR
0044D6  1               zpAN_:  .byte   $0f,$ff,$7f,$80 ;test pattern for AND
0044D6  1               zpEO_:  .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
0044D6  1               ;indirect addressing pointers
0044D6  1               ind1_:  .word   abs1            ;indirect pointer to pattern in absolute memory
0044D6  1                       .word   abs1+1
0044D6  1                       .word   abs1+2
0044D6  1                       .word   abs1+3
0044D6  1                       .word   abs7f
0044D6  1               inw1_:  .word   abs1-$f8        ;indirect pointer for wrap-test pattern
0044D6  1               indt_:  .word   abst            ;indirect pointer to store area in absolute memory
0044D6  1                       .word   abst+1
0044D6  1                       .word   abst+2
0044D6  1                       .word   abst+3
0044D6  1               inwt_:  .word   abst-$f8        ;indirect pointer for wrap-test store
0044D6  1               indAN_: .word   absAN           ;indirect pointer to AND pattern in absolute memory
0044D6  1                       .word   absAN+1
0044D6  1                       .word   absAN+2
0044D6  1                       .word   absAN+3
0044D6  1               indEO_: .word   absEO           ;indirect pointer to EOR pattern in absolute memory
0044D6  1                       .word   absEO+1
0044D6  1                       .word   absEO+2
0044D6  1                       .word   absEO+3
0044D6  1               indOR_: .word   absOR           ;indirect pointer to OR pattern in absolute memory
0044D6  1                       .word   absOR+1
0044D6  1                       .word   absOR+2
0044D6  1                       .word   absOR+3
0044D6  1               ;add/subtract indirect pointers
0044D6  1               adi2_:  .word   ada2            ;indirect pointer to operand 2 in absolute memory
0044D6  1               sbi2_:  .word   sba2            ;indirect pointer to complemented operand 2 (SBC)
0044D6  1               adiy2_: .word   ada2-$ff        ;with offset for indirect indexed
0044D6  1               sbiy2_: .word   sba2-$ff
0044D6  1               zp_end:
0044D6  1                   .if (zp_end - zp_init) <> (zp_bss_end - zp_bss)
0044D6  1                       ;force assembler error if size is different
0044D6  1                       .error "mismatch between bss and zeropage data"
0044D6  1                   .endif
0044D6  1               data_init:
0044D6  1               ex_and_:and #0              ;execute immediate opcodes
0044D6  1                       rts
0044D6  1               ex_eor_:eor #0              ;execute immediate opcodes
0044D6  1                       rts
0044D6  1               ex_ora_:ora #0              ;execute immediate opcodes
0044D6  1                       rts
0044D6  1               ex_adc_:adc #0              ;execute immediate opcodes
0044D6  1                       rts
0044D6  1               ex_sbc_:sbc #0              ;execute immediate opcodes
0044D6  1                       rts
0044D6  1               abs1_:  .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0044D6  1               abs7f_: .byte   $7f             ;test pattern for compare
0044D6  1               ;loads
0044D6  1               fLDx_:  .byte   fn,fn,0,fz      ;expected flags for load
0044D6  1               ;shifts
0044D6  1               rASL_:                      ;expected result ASL & ROL -carry
0044D6  1               rROL_:  .byte   $86,$04,$82,0   ; "
0044D6  1               rROLc_: .byte   $87,$05,$83,1   ;expected result ROL +carry
0044D6  1               rLSR_:                      ;expected result LSR & ROR -carry
0044D6  1               rROR_:  .byte   $61,$41,$20,0   ; "
0044D6  1               rRORc_: .byte   $e1,$c1,$a0,$80 ;expected result ROR +carry
0044D6  1               fASL_:                      ;expected flags for shifts
0044D6  1               fROL_:  .byte   fnc,fc,fn,fz    ;no carry in
0044D6  1               fROLc_: .byte   fnc,fc,fn,0     ;carry in
0044D6  1               fLSR_:
0044D6  1               fROR_:  .byte   fc,0,fc,fz      ;no carry in
0044D6  1               fRORc_: .byte   fnc,fn,fnc,fn   ;carry in
0044D6  1               ;increments (decrements)
0044D6  1               rINC_:  .byte   $7f,$80,$ff,0,1 ;expected result for INC/DEC
0044D6  1               fINC_:  .byte   0,fn,fn,fz,0    ;expected flags for INC/DEC
0044D6  1               ;logical memory operand
0044D6  1               absOR_: .byte   0,$1f,$71,$80   ;test pattern for OR
0044D6  1               absAN_: .byte   $0f,$ff,$7f,$80 ;test pattern for AND
0044D6  1               absEO_: .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
0044D6  1               ;logical accu operand
0044D6  1               absORa_:.byte   0,$f1,$1f,0     ;test pattern for OR
0044D6  1               absANa_:.byte   $f0,$ff,$ff,$ff ;test pattern for AND
0044D6  1               absEOa_:.byte   $ff,$f0,$f0,$0f ;test pattern for EOR
0044D6  1               ;logical results
0044D6  1               absrlo_:.byte   0,$ff,$7f,$80
0044D6  1               absflo_:.byte   fz,fn,0,fn
0044D6  1               data_end
0044D6  1                   .if (data_end - data_init) <> (data_bss_end - data_bss)
0044D6  1                       ;force assembler error if size is different
0044D6  1                       .error "mismatch between bss and data"
0044D6  1                   .endif
0044D6  1               
0044D6  1               vec_init
0044D6  1                       .word   nmi_trap
0044D6  1                       .word   res_trap
0044D6  1                       .word   irq_trap
0044D6  1               vec_bss equ $fffa
0044D6  1                   .endif                   ;end of RAM init data
0044D6  1               
0044D6  1                   .if (load_data_direct = 1) & (ROM_vectors = 1)
0044D6  1                       .segment "VECTORS"
0044D6  1                       .org $fffa       ;vectors
00FFFA  1  09 44                .word   nmi_trap
00FFFC  1  0F 44                .word   res_trap
00FFFE  1  17 44                .word   irq_trap
010000  1                   .endif
010000  1               
