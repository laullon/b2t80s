ca65 V2.18 - N/A
Main file   : 6502_functional_test.a65
Current file: 6502_functional_test.a65

000000r 1               ;
000000r 1               ; 6 5 0 2   F U N C T I O N A L   T E S T
000000r 1               ;
000000r 1               ; Copyright (C) 2012-2015  Klaus Dormann
000000r 1               ;
000000r 1               ; This program is free software: you can redistribute it and/or modify
000000r 1               ; it under the terms of the GNU General Public License as published by
000000r 1               ; the Free Software Foundation, either version 3 of the License, or
000000r 1               ; (at your option) any later version.
000000r 1               ;
000000r 1               ; This program is distributed in the hope that it will be useful,
000000r 1               ; but WITHOUT ANY WARRANTY; without even the implied warranty of
000000r 1               ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
000000r 1               ; GNU General Public License for more details.
000000r 1               ;
000000r 1               ; You should have received a copy of the GNU General Public License
000000r 1               ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
000000r 1               
000000r 1               
000000r 1               ; This program is designed to test all opcodes of a 6502 emulator using all
000000r 1               ; addressing modes with focus on propper setting of the processor status
000000r 1               ; register bits.
000000r 1               ;
000000r 1               ; version 01-aug-2019
000000r 1               ; contact info at http://2m5.de or email K@2m5.de
000000r 1               ;
000000r 1               ; assembled with CA65, linked with LD65 (cc65.github.io):
000000r 1               ;  ca65 -l 6502_functional_test.lst 6502_functional_test.ca65
000000r 1               ;  ld65 6502_functional_test.o -o 6502_functional_test.bin \
000000r 1               ;   -m 6502_functional_test.map -C example.cfg
000000r 1               ; example linker config (example.cfg):
000000r 1               ;  MEMORY {
000000r 1               ;  RAM: start = $0000, size=$8000, type = rw, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  ROM: start = $8000, size=$7FFA, type = ro, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  ROM_VECTORS: start = $FFFA, size=6, type = ro, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  }
000000r 1               ;  SEGMENTS {
000000r 1               ;  ZEROPAGE: load=RAM, type=rw;
000000r 1               ;  DATA: load=RAM, type=rw, offset=$0200;
000000r 1               ;  CODE: load=RAM, type=rw, offset=$0400;
000000r 1               ;  VECTORS: load=ROM_VECTORS, type=ro;
000000r 1               ;  }
000000r 1               ;
000000r 1               ; No IO - should be run from a monitor with access to registers.
000000r 1               ; To run load intel hex image with a load command, than alter PC to 400 hex
000000r 1               ; (code_segment) and enter a go command.
000000r 1               ; Loop on program counter determines error or successful completion of test.
000000r 1               ; Check listing for relevant traps (jump/branch *).
000000r 1               ; Please note that in early tests some instructions will have to be used before
000000r 1               ; they are actually tested!
000000r 1               ;
000000r 1               ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
000000r 1               ; Tests documented behavior of the original NMOS 6502 only! No unofficial
000000r 1               ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
000000r 1               ; not be tested. Decimal ops will only be tested with valid BCD operands and
000000r 1               ; N V Z flags will be ignored.
000000r 1               ;
000000r 1               ; Debugging hints:
000000r 1               ;     Most of the code is written sequentially. if you hit a trap, check the
000000r 1               ;   immediately preceeding code for the instruction to be tested. Results are
000000r 1               ;   tested first, flags are checked second by pushing them onto the stack and
000000r 1               ;   pulling them to the accumulator after the result was checked. The "real"
000000r 1               ;   flags are no longer valid for the tested instruction at this time!
000000r 1               ;     If the tested instruction was indexed, the relevant index (X or Y) must
000000r 1               ;   also be checked. Opposed to the flags, X and Y registers are still valid.
000000r 1               ;
000000r 1               ; versions:
000000r 1               ;   28-jul-2012  1st version distributed for testing
000000r 1               ;   29-jul-2012  fixed references to location 0, now #0
000000r 1               ;                added license - GPLv3
000000r 1               ;   30-jul-2012  added configuration options
000000r 1               ;   01-aug-2012  added trap macro to allow user to change error handling
000000r 1               ;   01-dec-2012  fixed trap in branch field must be a branch
000000r 1               ;   02-mar-2013  fixed PLA flags not tested
000000r 1               ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
000000r 1               ;                added test sequence check to detect if tests jump their fence
000000r 1               ;   23-jul-2013  added RAM integrity check option
000000r 1               ;   16-aug-2013  added error report to standard output option
000000r 1               ;   13-dec-2014  added binary/decimal opcode table switch test
000000r 1               ;   14-dec-2014  improved relative address test
000000r 1               ;   23-aug-2015  added option to disable self modifying tests
000000r 1               ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
000000r 1               ;                added small branch offset pretest
000000r 1               ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
000000r 1               ;   04-dec-2017  fixed BRK only tested with interrupts enabled
000000r 1               ;                added option to skip the remainder of a failing test
000000r 1               ;                in report.i65
000000r 1               
000000r 1               
000000r 1               ; C O N F I G U R A T I O N
000000r 1               
000000r 1               ;ROM_vectors writable (0=no, 1=yes)
000000r 1               ;if ROM vectors can not be used interrupts will not be trapped
000000r 1               ;as a consequence BRK can not be tested but will be emulated to test RTI
000000r 1               ROM_vectors = 1
000000r 1               
000000r 1               ;load_data_direct (0=move from code segment, 1=load directly)
000000r 1               ;loading directly is preferred but may not be supported by your platform
000000r 1               ;0 produces only consecutive object code, 1 is not suitable for a binary image
000000r 1               load_data_direct = 1
000000r 1               
000000r 1               ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
000000r 1               ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
000000r 1               ;tested if you allow changing the interrupt status (I_flag = 3)
000000r 1               I_flag = 3
000000r 1               
000000r 1               ;configure memory - try to stay away from memory used by the system
000000r 1               ;zero_page memory start address, $50 (80) consecutive Bytes required
000000r 1               ;                                add 2 if I_flag = 2
000000r 1               zero_page = $a
000000r 1               
000000r 1               ;data_segment memory start address, $6A (106) consecutive Bytes required
000000r 1               ; check that this matches the linker configuration file
000000r 1               data_segment = $200
000000r 1                   .if (data_segment & $ff) <> 0
000000r 1                       .error "low byte of data_segment MUST be $00 !!"
000000r 1                   .endif
000000r 1               
000000r 1               ;code_segment memory start address, 13kB of consecutive space required
000000r 1               ;                                   add 2.5 kB if I_flag = 2
000000r 1               ; check that this matches the linker configuration file
000000r 1               code_segment = $400
000000r 1               
000000r 1               ;self modifying code may be disabled to allow running in ROM
000000r 1               ;0=part of the code is self modifying and must reside in RAM
000000r 1               ;1=tests disabled: branch range
000000r 1               disable_selfmod = 1
000000r 1               
000000r 1               ;report errors through I/O channel (0=use standard self trap loops, 1=include
000000r 1               ;report.i65 as I/O channel, add 3.5 kB)
000000r 1               report = 1
000000r 1               
000000r 1               ;RAM integrity test option. Checks for undesired RAM writes.
000000r 1               ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
000000r 1               ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
000000r 1               ram_top = -1
000000r 1               
000000r 1               ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
000000r 1               ;2=disable including decimal flag in processor status
000000r 1               disable_decimal = 0
000000r 1               
000000r 1               ;macros for error & success traps to allow user modification
000000r 1               ;example:
000000r 1               ;        .macro  trap
000000r 1               ;        jsr my_error_handler
000000r 1               ;        .endmacro
000000r 1               ;        .macro  trap_eq
000000r 1               ;        bne :+
000000r 1               ;        trap           ;failed equal (zero)
000000r 1               ;:
000000r 1               ;        .endmacro
000000r 1               ;
000000r 1               ; my_error_handler should pop the calling address from the stack and report it.
000000r 1               ; putting larger portions of code (more than 3 bytes) inside the trap macro
000000r 1               ; may lead to branch range problems for some tests.
000000r 1                   .if report = 0
000000r 1                       .macro  trap
000000r 1                       jmp *           ;failed anyway
000000r 1                       .endmacro
000000r 1                       .macro  trap_eq
000000r 1                       beq *           ;failed equal (zero)
000000r 1                       .endmacro
000000r 1                       .macro  trap_ne
000000r 1                       bne *           ;failed not equal (non zero)
000000r 1                       .endmacro
000000r 1                       .macro  trap_cs
000000r 1                       bcs *           ;failed carry set
000000r 1                       .endmacro
000000r 1                       .macro  trap_cc
000000r 1                       bcc *           ;failed carry clear
000000r 1                       .endmacro
000000r 1                       .macro  trap_mi
000000r 1                       bmi *           ;failed minus (bit 7 set)
000000r 1                       .endmacro
000000r 1                       .macro  trap_pl
000000r 1                       bpl *           ;failed plus (bit 7 clear)
000000r 1                       .endmacro
000000r 1                       .macro  trap_vs
000000r 1                       bvs *           ;failed overflow set
000000r 1                       .endmacro
000000r 1                       .macro  trap_vc
000000r 1                       bvc *           ;failed overflow clear
000000r 1                       .endmacro
000000r 1               ; please observe that during the test the stack gets invalidated
000000r 1               ; therefore a RTS inside the success macro is not possible
000000r 1                       .macro  success
000000r 1                       jmp *           ;test passed, no errors
000000r 1                       .endmacro
000000r 1                   .endif
000000r 1                   .if report = 1
000000r 1                       .macro  trap
000000r 1                       jsr $ffff
000000r 1                       .endmacro
000000r 1                       .macro  trap_eq
000000r 1                       bne :+
000000r 1                       trap           ;failed equal (zero)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_ne
000000r 1                       beq :+
000000r 1                       trap            ;failed not equal (non zero)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_cs
000000r 1                       bcc :+
000000r 1                       trap            ;failed carry set
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_cc
000000r 1                       bcs :+
000000r 1                       trap            ;failed carry clear
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_mi
000000r 1                       bpl :+
000000r 1                       trap            ;failed minus (bit 7 set)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_pl
000000r 1                       bmi :+
000000r 1                       trap            ;failed plus (bit 7 clear)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_vs
000000r 1                       bvc :+
000000r 1                       trap            ;failed overflow set
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_vc
000000r 1                       bvs :+
000000r 1                       trap            ;failed overflow clear
000000r 1               :
000000r 1                       .endmacro
000000r 1               ; please observe that during the test the stack gets invalidated
000000r 1               ; therefore a RTS inside the success macro is not possible
000000r 1                       .macro  success
000000r 1                       jsr $fffe
000000r 1                       .endmacro
000000r 1                   .endif
000000r 1               
000000r 1                   .define equ =
000000r 1               
000000r 1               carry   equ %00000001   ;flag bits in status
000000r 1               zero    equ %00000010
000000r 1               intdis  equ %00000100
000000r 1               decmode equ %00001000
000000r 1               break   equ %00010000
000000r 1               reserv  equ %00100000
000000r 1               overfl  equ %01000000
000000r 1               minus   equ %10000000
000000r 1               
000000r 1               fc      equ carry
000000r 1               fz      equ zero
000000r 1               fzc     equ carry+zero
000000r 1               fv      equ overfl
000000r 1               fvz     equ overfl+zero
000000r 1               fn      equ minus
000000r 1               fnc     equ minus+carry
000000r 1               fnz     equ minus+zero
000000r 1               fnzc    equ minus+zero+carry
000000r 1               fnv     equ minus+overfl
000000r 1               
000000r 1               fao     equ break+reserv    ;bits always on after PHP, BRK
000000r 1               fai     equ fao+intdis      ;+ forced interrupt disable
000000r 1               faod    equ fao+decmode     ;+ ignore decimal
000000r 1               faid    equ fai+decmode     ;+ ignore decimal
000000r 1               m8      equ $ff             ;8 bit mask
000000r 1               m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
000000r 1               
000000r 1               ;macros to allow masking of status bits.
000000r 1               ;masking test of decimal bit
000000r 1               ;masking of interrupt enable/disable on load and compare
000000r 1               ;masking of always on bits after PHP or BRK (unused & break) on compare
000000r 1                   .if disable_decimal < 2
000000r 1                       .if I_flag = 0
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1&m8i          ;force enable interrupts (mask I)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fao)&m8i   ;I_flag is always enabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #(p1&m8i|fao)   ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 1
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1|intdis      ;force disable interrupts
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fai)&m8    ;I_flag is always disabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #(p1|fai)       ;invert expected flags + always on bits + I
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 2
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1
000000r 1                           ora flag_I_on       ;restore I-flag
000000r 1                           and flag_I_off
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           cmp #(p1|fao)&m8i   ;expected flags + always on bits, mask I
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           eor #(p1&m8i|fao)   ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 3
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1             ;allow test to change I-flag (no mask)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fao)&m8    ;expected flags + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #p1|fao         ;invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                   .else
000000r 1                       .if I_flag = 0
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1&m8i         ;force enable interrupts (mask I)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8i  ;I_flag is always enabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1&m8i|faod)  ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 1
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1|intdis      ;force disable interrupts
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faid)&m8   ;I_flag is always disabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1|faid)      ;invert expected flags + always on bits + I
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 2
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1
000000r 1                           ora flag_I_on       ;restore I-flag
000000r 1                           and flag_I_off
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8i  ;expected flags + always on bits, mask I
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1&m8i|faod)  ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 3
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1             ;allow test to change I-flag (no mask)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8   ;expected flags + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #p1|faod        ;invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                   .endif
000000r 1               
000000r 1               ;macros to set (register|memory|zeropage) & status
000000r 1                           .macro      set_stat    p1          ;setting flags in the processor status register
000000r 1                           load_flag p1
000000r 1                           pha         ;use stack to load status
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_a       p1,p2       ;precharging accu & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda #p1     ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_x       p1,p2       ;precharging index & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           ldx #p1     ;precharge index x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_y       p1,p2       ;precharging index & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           ldy #p1     ;precharge index y
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_ax      p1,p2       ;precharging indexed accu & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_ay      p1,p2       ;precharging indexed accu & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,y    ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_z       p1,p2       ;precharging indexed zp & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to zeropage
000000r 1                           sta zpt
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_zx      p1,p2       ;precharging zp,x & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to indexed zeropage
000000r 1                           sta zpt,x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_abs     p1,p2       ;precharging indexed memory & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to memory
000000r 1                           sta abst
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_absx    p1,p2       ;precharging abs,x & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to indexed memory
000000r 1                           sta abst,x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1               ;macros to test (register|memory|zeropage) & status & (mask)
000000r 1                           .macro      tst_stat    p1          ;testing flags in the processor status register
000000r 1                           php         ;save status
000000r 1                           pla         ;use stack to retrieve status
000000r 1                           pha
000000r 1                           cmp_flag p1
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_a       p1,p2        ;testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_x       p1,p2       ;testing result in x index & flags
000000r 1                           php         ;save flags
000000r 1                           cpx #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_y       p1,p2       ;testing result in y index & flags
000000r 1                           php         ;save flags
000000r 1                           cpy #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_ax      p1,p2,p3    ;indexed testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne     ;
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_ay      p1,p2,p3    ;indexed testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp p1,y    ;test result
000000r 1                           trap_ne     ;
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,y    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_z       p1,p2,p3    ;indexed testing result in zp & flags
000000r 1                           php         ;save flags
000000r 1                           lda zpt
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_zx      p1,p2,p3    ;testing result in zp,x & flags
000000r 1                           php         ;save flags
000000r 1                           lda zpt,x
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_abs     p1,p2,p3    ;indexed testing result in memory & flags
000000r 1                           php         ;save flags
000000r 1                           lda abst
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_absx    p1,p2,p3    ;testing result in abs,x & flags
000000r 1                           php         ;save flags
000000r 1                           lda abst,x
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1               ; RAM integrity test
000000r 1               ;   verifies that none of the previous tests has altered RAM outside of the
000000r 1               ;   designated write areas.
000000r 1               ;   uses zpt word as indirect pointer, zpt+2 word as checksum
000000r 1                       .if ram_top > -1
000000r 1               check_ram   macro
000000r 1                           cld
000000r 1                           lda #0
000000r 1                           sta zpt         ;set low byte of indirect pointer
000000r 1                           sta zpt+3       ;checksum high byte
000000r 1                         .if disable_selfmod = 0
000000r 1                           sta range_adr   ;reset self modifying code
000000r 1                         .endif
000000r 1                           clc
000000r 1                           ldx #zp_bss-zero_page ;zeropage - write test area
000000r 1               ccs3:       adc zero_page,x
000000r 1                           bcc ccs2
000000r 1                           inc zpt+3       ;carry to high byte
000000r 1                           clc
000000r 1               ccs2:       inx
000000r 1                           bne ccs3
000000r 1                           ldx #hi(abs1)   ;set high byte of indirect pointer
000000r 1                           stx zpt+1
000000r 1                           ldy #lo(abs1)   ;data after write & execute test area
000000r 1               ccs5:       adc (zpt),y
000000r 1                           bcc ccs4
000000r 1                           inc zpt+3       ;carry to high byte
000000r 1                           clc
000000r 1               ccs4:       iny
000000r 1                           bne ccs5
000000r 1                           inx             ;advance RAM high address
000000r 1                           stx zpt+1
000000r 1                           cpx #ram_top
000000r 1                           bne ccs5
000000r 1                           sta zpt+2       ;checksum low is
000000r 1                           cmp ram_chksm   ;checksum low expected
000000r 1                           trap_ne         ;checksum mismatch
000000r 1                           lda zpt+3       ;checksum high is
000000r 1                           cmp ram_chksm+1 ;checksum high expected
000000r 1                           trap_ne         ;checksum mismatch
000000r 1                           .endmacro
000000r 1                       .else
000000r 1                           .macro  check_ram
000000r 1                           ;RAM check disabled - RAM size not set
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1               
000000r 1                           .macro  next_test   ;make sure, tests don't jump the fence
000000r 1                           lda test_case   ;previous test
000000r 1                           cmp #test_num
000000r 1                           trap_ne         ;test is out of sequence
000000r 1               test_num .set test_num + 1
000000r 1                           lda #test_num   ;*** next tests' number
000000r 1                           sta test_case
000000r 1                           ;check_ram       ;uncomment to find altered RAM after each test
000000r 1                           .endmacro
000000r 1               
000000r 1                       .ZEROPAGE
000000r 1  00 00 00 00  		.res zero_page, 0
000004r 1  00 00 00 00  
000008r 1  00 00        
00000Ar 1                       .org zero_page
00000A  1               
00000A  1               ;break test interrupt save
00000A  1  00           irq_a:  .res    1,0             ;a register
00000B  1  00           irq_x:  .res    1,0             ;x register
00000C  1                   .if I_flag = 2
00000C  1               ;masking for I bit in status
00000C  1               flag_I_on:  .res    1,0         ;or mask to load flags
00000C  1               flag_I_off: .res    1,0         ;and mask to load flags
00000C  1                   .endif
00000C  1               zpt:                        ;5 bytes store/modify test area
00000C  1               ;add/subtract operand generation and result/flag prediction
00000C  1  00           adfc:   .res    1,0             ;carry flag before op
00000D  1  00           ad1:    .res    1,0             ;operand 1 - accumulator
00000E  1  00           ad2:    .res    1,0             ;operand 2 - memory / immediate
00000F  1  00           adrl:   .res    1,0             ;expected result bits 0-7
000010  1  00           adrh:   .res    1,0             ;expected result bit 8 (carry)
000011  1  00           adrf:   .res    1,0             ;expected flags NV0000ZC (only binary mode)
000012  1  00           sb2:    .res    1,0             ;operand 2 complemented for subtract
000013  1               zp_bss:
000013  1  C3 82 41 00  zp1:    .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000017  1  7F           zp7f:   .byte   $7f             ;test pattern for compare
000018  1               ;logical zeropage operands
000018  1  00 1F 71 80  zpOR:   .byte   0,$1f,$71,$80   ;test pattern for OR
00001C  1  0F FF 7F 80  zpAN:   .byte   $0f,$ff,$7f,$80 ;test pattern for AND
000020  1  FF 0F 8F 8F  zpEO:   .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
000024  1               ;indirect addressing pointers
000024  1  17 02        ind1:   .word   abs1            ;indirect pointer to pattern in absolute memory
000026  1  18 02                .word   abs1+1
000028  1  19 02                .word   abs1+2
00002A  1  1A 02                .word   abs1+3
00002C  1  1B 02                .word   abs7f
00002E  1  1F 01        inw1:   .word   abs1-$f8        ;indirect pointer for wrap-test pattern
000030  1  03 02        indt:   .word   abst            ;indirect pointer to store area in absolute memory
000032  1  04 02                .word   abst+1
000034  1  05 02                .word   abst+2
000036  1  06 02                .word   abst+3
000038  1  0B 01        inwt:   .word   abst-$f8        ;indirect pointer for wrap-test store
00003A  1  4E 02        indAN:  .word   absAN           ;indirect pointer to AND pattern in absolute memory
00003C  1  4F 02                .word   absAN+1
00003E  1  50 02                .word   absAN+2
000040  1  51 02                .word   absAN+3
000042  1  52 02        indEO:  .word   absEO           ;indirect pointer to EOR pattern in absolute memory
000044  1  53 02                .word   absEO+1
000046  1  54 02                .word   absEO+2
000048  1  55 02                .word   absEO+3
00004A  1  4A 02        indOR:  .word   absOR           ;indirect pointer to OR pattern in absolute memory
00004C  1  4B 02                .word   absOR+1
00004E  1  4C 02                .word   absOR+2
000050  1  4D 02                .word   absOR+3
000052  1               ;add/subtract indirect pointers
000052  1  03 02        adi2:   .word   ada2            ;indirect pointer to operand 2 in absolute memory
000054  1  04 02        sbi2:   .word   sba2            ;indirect pointer to complemented operand 2 (SBC)
000056  1  04 01        adiy2:  .word   ada2-$ff        ;with offset for indirect indexed
000058  1  05 01        sbiy2:  .word   sba2-$ff
00005A  1               zp_bss_end:
00005A  1               
00005A  1                       .DATA
00005A  1                       .org data_segment
000200  1               
000200  1  00           test_case:  .res    1,0         ;current test number
000201  1  00 00        ram_chksm:  .res    2,0         ;checksum for RAM integrity test
000203  1               ;add/subtract operand copy - abs tests write area
000203  1               abst:                       ;5 bytes store/modify test area
000203  1  00           ada2:   .res    1,0             ;operand 2
000204  1  00           sba2:   .res    1,0             ;operand 2 complemented for subtract
000205  1  00 00 00             .res    3,0             ;fill remaining bytes
000208  1               data_bss:
000208  1                   .if load_data_direct = 1
000208  1  29 00        ex_andi:and #0              ;execute immediate opcodes
00020A  1  60                   rts
00020B  1  49 00        ex_eori:eor #0              ;execute immediate opcodes
00020D  1  60                   rts
00020E  1  09 00        ex_orai:ora #0              ;execute immediate opcodes
000210  1  60                   rts
000211  1  69 00        ex_adci:adc #0              ;execute immediate opcodes
000213  1  60                   rts
000214  1  E9 00        ex_sbci:sbc #0              ;execute immediate opcodes
000216  1  60                   rts
000217  1                   .else
000217  1               ex_andi:.res    3
000217  1               ex_eori:.res    3
000217  1               ex_orai:.res    3
000217  1               ex_adci:.res    3
000217  1               ex_sbci:.res    3
000217  1                   .endif
000217  1  C3 82 41 00  abs1:   .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
00021B  1  7F           abs7f:  .byte   $7f             ;test pattern for compare
00021C  1               ;loads
00021C  1  80 80 00 02  fLDx:   .byte   fn,fn,0,fz      ;expected flags for load
000220  1               ;shifts
000220  1               rASL:                       ;expected result ASL & ROL -carry
000220  1  86 04 82 00  rROL:   .byte   $86,$04,$82,0   ; "
000224  1  87 05 83 01  rROLc:  .byte   $87,$05,$83,1   ;expected result ROL +carry
000228  1               rLSR:                       ;expected result LSR & ROR -carry
000228  1  61 41 20 00  rROR:   .byte   $61,$41,$20,0   ; "
00022C  1  E1 C1 A0 80  rRORc:  .byte   $e1,$c1,$a0,$80 ;expected result ROR +carry
000230  1               fASL:                       ;expected flags for shifts
000230  1  81 01 80 02  fROL:   .byte   fnc,fc,fn,fz    ;no carry in
000234  1  81 01 80 00  fROLc:  .byte   fnc,fc,fn,0     ;carry in
000238  1               fLSR:
000238  1  01 00 01 02  fROR:   .byte   fc,0,fc,fz      ;no carry in
00023C  1  81 80 81 80  fRORc:  .byte   fnc,fn,fnc,fn   ;carry in
000240  1               ;increments (decrements)
000240  1  7F 80 FF 00  rINC:   .byte   $7f,$80,$ff,0,1 ;expected result for INC/DEC
000244  1  01           
000245  1  00 80 80 02  fINC:   .byte   0,fn,fn,fz,0    ;expected flags for INC/DEC
000249  1  00           
00024A  1               ;logical memory operand
00024A  1  00 1F 71 80  absOR:  .byte   0,$1f,$71,$80   ;test pattern for OR
00024E  1  0F FF 7F 80  absAN:  .byte   $0f,$ff,$7f,$80 ;test pattern for AND
000252  1  FF 0F 8F 8F  absEO:  .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
000256  1               ;logical accu operand
000256  1  00 F1 1F 00  absORa: .byte   0,$f1,$1f,0     ;test pattern for OR
00025A  1  F0 FF FF FF  absANa: .byte   $f0,$ff,$ff,$ff ;test pattern for AND
00025E  1  FF F0 F0 0F  absEOa: .byte   $ff,$f0,$f0,$0f ;test pattern for EOR
000262  1               ;logical results
000262  1  00 FF 7F 80  absrlo: .byte   0,$ff,$7f,$80
000266  1  02 80 00 80  absflo: .byte   fz,fn,0,fn
00026A  1               data_bss_end:
00026A  1               
00026A  1               
00026A  1                       .CODE
00026A  1                       .org code_segment
000400  1                       .P02            ; disable 65SC02, 65C02 and 65816 instructions
000400  1  D8           start:  cld
000401  1  A2 FF                ldx #$ff
000403  1  9A                   txs
000404  1  A9 00                lda #0          ;*** test 0 = initialize
000406  1  8D 00 02             sta test_case
000409  1               test_num .set 0
000409  1               
000409  1               ;stop interrupts before initializing BSS
000409  1                   .if I_flag = 1
000409  1                       sei
000409  1                   .endif
000409  1               
000409  1               ;initialize I/O for report channel
000409  1               ;     .if report = 1
000409  1               ;         jsr report_init
000409  1               ;     .endif
000409  1               
000409  1               ;pretest small branch offset
000409  1  A2 05                ldx #5
00040B  1  4C 33 04             jmp psb_test
00040E  1               psb_bwok:
00040E  1  A0 05                ldy #5
000410  1  D0 08                bne psb_forw
000412  1  20 FF FF             trap        ;branch should be taken
000415  1  88                   dey         ;forward landing zone
000416  1  88                   dey
000417  1  88                   dey
000418  1  88                   dey
000419  1  88                   dey
00041A  1               psb_forw:
00041A  1  88                   dey
00041B  1  88                   dey
00041C  1  88                   dey
00041D  1  88                   dey
00041E  1  88                   dey
00041F  1  F0 17                beq psb_fwok
000421  1  20 FF FF             trap        ;forward offset
000424  1               
000424  1  CA                   dex         ;backward landing zone
000425  1  CA                   dex
000426  1  CA                   dex
000427  1  CA                   dex
000428  1  CA                   dex
000429  1               psb_back:
000429  1  CA                   dex
00042A  1  CA                   dex
00042B  1  CA                   dex
00042C  1  CA                   dex
00042D  1  CA                   dex
00042E  1  F0 DE                beq psb_bwok
000430  1  20 FF FF             trap        ;backward offset
000433  1               psb_test:
000433  1  D0 F4                bne psb_back
000435  1  20 FF FF             trap        ;branch should be taken
000438  1               psb_fwok:
000438  1               
000438  1               ;initialize BSS segment
000438  1                   .if load_data_direct <> 1
000438  1                       ldx #zp_end-zp_init-1
000438  1               ld_zp:  lda zp_init,x
000438  1                       sta zp_bss,x
000438  1                       dex
000438  1                       bpl ld_zp
000438  1                       ldx #data_end-data_init-1
000438  1               ld_data:lda data_init,x
000438  1                       sta data_bss,x
000438  1                       dex
000438  1                       bpl ld_data
000438  1                     .if ROM_vectors = 1
000438  1                       ldx #5
000438  1               ld_vect:lda vec_init,x
000438  1                       sta vec_bss,x
000438  1                       dex
000438  1                       bpl ld_vect
000438  1                     .endif
000438  1                   .endif
000438  1               
000438  1               ;retain status of interrupt flag
000438  1                   .if I_flag = 2
000438  1                       php
000438  1                       pla
000438  1                       and #4          ;isolate flag
000438  1                       sta flag_I_on   ;or mask
000438  1                       eor #lo(~4)     ;reverse
000438  1                       sta flag_I_off  ;and mask
000438  1                   .endif
000438  1               
000438  1               ;generate checksum for RAM integrity test
000438  1                   .if ram_top > -1
000438  1                       lda #0
000438  1                       sta zpt         ;set low byte of indirect pointer
000438  1                       sta ram_chksm+1 ;checksum high byte
000438  1                     .if disable_selfmod = 0
000438  1                       sta range_adr   ;reset self modifying code
000438  1                     .endif
000438  1                       clc
000438  1                       ldx #zp_bss-zero_page ;zeropage - write test area
000438  1               gcs3:   adc zero_page,x
000438  1                       bcc gcs2
000438  1                       inc ram_chksm+1 ;carry to high byte
000438  1                       clc
000438  1               gcs2:   inx
000438  1                       bne gcs3
000438  1                       ldx #hi(abs1)   ;set high byte of indirect pointer
000438  1                       stx zpt+1
000438  1                       ldy #lo(abs1)   ;data after write & execute test area
000438  1               gcs5:   adc (zpt),y
000438  1                       bcc gcs4
000438  1                       inc ram_chksm+1 ;carry to high byte
000438  1                       clc
000438  1               gcs4:   iny
000438  1                       bne gcs5
000438  1                       inx             ;advance RAM high address
000438  1                       stx zpt+1
000438  1                       cpx #ram_top
000438  1                       bne gcs5
000438  1                       sta ram_chksm   ;checksum complete
000438  1                   .endif
000438  1  AD 00 02 C9          next_test
00043C  1  00 F0 03 20  
000440  1  FF FF A9 01  
000447  1               
000447  1                   .if disable_selfmod = 0
000447  1               ;testing relative addressing with BEQ
000447  1                       ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
000447  1               range_loop:
000447  1                       dey             ;next relative address
000447  1                       tya
000447  1                       tax             ;precharge count to end of loop
000447  1                       bpl range_fw    ;calculate relative address
000447  1                       clc             ;avoid branch self or to relative address of branch
000447  1                       adc #2
000447  1                       nop             ;offset landing zone - tolerate +/-5 offset to branch
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1               range_fw:
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1                       eor #$7f        ;complement except sign
000447  1                       sta range_adr   ;load into test target
000447  1                       lda #0          ;should set zero flag in status register
000447  1                       jmp range_op
000447  1               
000447  1                       dex             ; offset landing zone - backward branch too far
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       ;relative address target field with branch under test in the middle
000447  1                       dex             ;-128 - max backward
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-120
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-110
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-100
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-90
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-80
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-70
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-60
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-50
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-40
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-30
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-20
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-10
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;-3
000447  1               range_op:               ;test target with zero flag=0, z=1 if previous dex
000447  1               range_adr   = *+1       ;modifiable relative address
000447  1                       beq *+64        ;+64 if called without modification
000447  1                       dex             ;+0
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+10
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+20
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+30
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+40
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+50
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+60
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+70
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+80
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+90
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+100
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+110
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex             ;+120
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       dex
000447  1                       nop             ;offset landing zone - forward branch too far
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1                       beq range_ok    ;+127 - max forward
000447  1                       trap            ; bad range
000447  1                       nop             ;offset landing zone - tolerate +/-5 offset to branch
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1               range_ok:
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1                       nop
000447  1                       cpy #0
000447  1                       beq range_end
000447  1                       jmp range_loop
000447  1               range_end:              ;range test successful
000447  1                   .endif
000447  1  AD 00 02 C9          next_test
00044B  1  01 F0 03 20  
00044F  1  FF FF A9 02  
000456  1               
000456  1               ;partial test BNE & CMP, CPX, CPY immediate
000456  1  C0 01                cpy #1          ;testing BNE true
000458  1  D0 03                bne test_bne
00045A  1  20 FF FF             trap
00045D  1               test_bne:
00045D  1  A9 00                lda #0
00045F  1  C9 00                cmp #0          ;test compare immediate
000461  1  F0 03 20 FF          trap_ne
000465  1  FF           
000466  1  B0 03 20 FF          trap_cc
00046A  1  FF           
00046B  1  10 03 20 FF          trap_mi
00046F  1  FF           
000470  1  C9 01                cmp #1
000472  1  D0 03 20 FF          trap_eq
000476  1  FF           
000477  1  90 03 20 FF          trap_cs
00047B  1  FF           
00047C  1  30 03 20 FF          trap_pl
000480  1  FF           
000481  1  AA                   tax
000482  1  E0 00                cpx #0          ;test compare x immediate
000484  1  F0 03 20 FF          trap_ne
000488  1  FF           
000489  1  B0 03 20 FF          trap_cc
00048D  1  FF           
00048E  1  10 03 20 FF          trap_mi
000492  1  FF           
000493  1  E0 01                cpx #1
000495  1  D0 03 20 FF          trap_eq
000499  1  FF           
00049A  1  90 03 20 FF          trap_cs
00049E  1  FF           
00049F  1  30 03 20 FF          trap_pl
0004A3  1  FF           
0004A4  1  A8                   tay
0004A5  1  C0 00                cpy #0          ;test compare y immediate
0004A7  1  F0 03 20 FF          trap_ne
0004AB  1  FF           
0004AC  1  B0 03 20 FF          trap_cc
0004B0  1  FF           
0004B1  1  10 03 20 FF          trap_mi
0004B5  1  FF           
0004B6  1  C0 01                cpy #1
0004B8  1  D0 03 20 FF          trap_eq
0004BC  1  FF           
0004BD  1  90 03 20 FF          trap_cs
0004C1  1  FF           
0004C2  1  30 03 20 FF          trap_pl
0004C6  1  FF           
0004C7  1  AD 00 02 C9          next_test
0004CB  1  02 F0 03 20  
0004CF  1  FF FF A9 03  
0004D6  1               ;testing stack operations PHA PHP PLA PLP
0004D6  1               
0004D6  1  A2 FF                ldx #$ff        ;initialize stack
0004D8  1  9A                   txs
0004D9  1  A9 55                lda #$55
0004DB  1  48                   pha
0004DC  1  A9 AA                lda #$aa
0004DE  1  48                   pha
0004DF  1  CD FE 01             cmp $1fe        ;on stack ?
0004E2  1  F0 03 20 FF          trap_ne
0004E6  1  FF           
0004E7  1  BA                   tsx
0004E8  1  8A                   txa             ;overwrite accu
0004E9  1  C9 FD                cmp #$fd        ;sp decremented?
0004EB  1  F0 03 20 FF          trap_ne
0004EF  1  FF           
0004F0  1  68                   pla
0004F1  1  C9 AA                cmp #$aa        ;successful retreived from stack?
0004F3  1  F0 03 20 FF          trap_ne
0004F7  1  FF           
0004F8  1  68                   pla
0004F9  1  C9 55                cmp #$55
0004FB  1  F0 03 20 FF          trap_ne
0004FF  1  FF           
000500  1  CD FF 01             cmp $1ff        ;remains on stack?
000503  1  F0 03 20 FF          trap_ne
000507  1  FF           
000508  1  BA                   tsx
000509  1  E0 FF                cpx #$ff        ;sp incremented?
00050B  1  F0 03 20 FF          trap_ne
00050F  1  FF           
000510  1  AD 00 02 C9          next_test
000514  1  03 F0 03 20  
000518  1  FF FF A9 04  
00051F  1               
00051F  1               ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
00051F  1  A9 FF 48 28          set_stat $ff    ;all on
000523  1  10 1A                bpl nbr1        ;branches should not be taken
000525  1  50 1B                bvc nbr2
000527  1  90 1C                bcc nbr3
000529  1  D0 1D                bne nbr4
00052B  1  30 03                bmi br1         ;branches should be taken
00052D  1  20 FF FF             trap
000530  1  70 03        br1:    bvs br2
000532  1  20 FF FF             trap
000535  1  B0 03        br2:    bcs br3
000537  1  20 FF FF             trap
00053A  1  F0 0F        br3:    beq br4
00053C  1  20 FF FF             trap
00053F  1               nbr1:
00053F  1  20 FF FF             trap            ;previous bpl taken
000542  1               nbr2:
000542  1  20 FF FF             trap            ;previous bvc taken
000545  1               nbr3:
000545  1  20 FF FF             trap            ;previous bcc taken
000548  1               nbr4:
000548  1  20 FF FF             trap            ;previous bne taken
00054B  1  08           br4:    php
00054C  1  BA                   tsx
00054D  1  E0 FE                cpx #$fe        ;sp after php?
00054F  1  F0 03 20 FF          trap_ne
000553  1  FF           
000554  1  68                   pla
000555  1  C9 FF                cmp_flag $ff    ;returned all flags on?
000557  1  F0 03 20 FF          trap_ne
00055B  1  FF           
00055C  1  BA                   tsx
00055D  1  E0 FF                cpx #$ff        ;sp after php?
00055F  1  F0 03 20 FF          trap_ne
000563  1  FF           
000564  1  A9 00 48 28          set_stat 0      ;all off
000568  1  30 1A                bmi nbr11       ;branches should not be taken
00056A  1  70 1B                bvs nbr12
00056C  1  B0 1C                bcs nbr13
00056E  1  F0 1D                beq nbr14
000570  1  10 03                bpl br11        ;branches should be taken
000572  1  20 FF FF             trap
000575  1  50 03        br11:   bvc br12
000577  1  20 FF FF             trap
00057A  1  90 03        br12:   bcc br13
00057C  1  20 FF FF             trap
00057F  1  D0 0F        br13:   bne br14
000581  1  20 FF FF             trap
000584  1               nbr11:
000584  1  20 FF FF             trap            ;previous bmi taken
000587  1               nbr12:
000587  1  20 FF FF             trap            ;previous bvs taken
00058A  1               nbr13:
00058A  1  20 FF FF             trap            ;previous bcs taken
00058D  1               nbr14:
00058D  1  20 FF FF             trap            ;previous beq taken
000590  1  08           br14:   php
000591  1  68                   pla
000592  1  C9 30                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
000594  1  F0 03 20 FF          trap_ne
000598  1  FF           
000599  1                       ;crosscheck flags
000599  1  A9 02 48 28          set_stat zero
00059D  1  D0 02                bne brzs1
00059F  1  F0 03                beq brzs2
0005A1  1               brzs1:
0005A1  1  20 FF FF             trap            ;branch zero/non zero
0005A4  1  B0 02        brzs2:  bcs brzs3
0005A6  1  90 03                bcc brzs4
0005A8  1               brzs3:
0005A8  1  20 FF FF             trap            ;branch carry/no carry
0005AB  1  30 02        brzs4:  bmi brzs5
0005AD  1  10 03                bpl brzs6
0005AF  1               brzs5:
0005AF  1  20 FF FF             trap            ;branch minus/plus
0005B2  1  70 02        brzs6:  bvs brzs7
0005B4  1  50 03                bvc brzs8
0005B6  1               brzs7:
0005B6  1  20 FF FF             trap            ;branch overflow/no overflow
0005B9  1               brzs8:
0005B9  1  A9 01 48 28          set_stat carry
0005BD  1  F0 02                beq brcs1
0005BF  1  D0 03                bne brcs2
0005C1  1               brcs1:
0005C1  1  20 FF FF             trap            ;branch zero/non zero
0005C4  1  90 02        brcs2:  bcc brcs3
0005C6  1  B0 03                bcs brcs4
0005C8  1               brcs3:
0005C8  1  20 FF FF             trap            ;branch carry/no carry
0005CB  1  30 02        brcs4:  bmi brcs5
0005CD  1  10 03                bpl brcs6
0005CF  1               brcs5:
0005CF  1  20 FF FF             trap            ;branch minus/plus
0005D2  1  70 02        brcs6:  bvs brcs7
0005D4  1  50 03                bvc brcs8
0005D6  1               brcs7:
0005D6  1  20 FF FF             trap            ;branch overflow/no overflow
0005D9  1               
0005D9  1               brcs8:
0005D9  1  A9 80 48 28          set_stat minus
0005DD  1  F0 02                beq brmi1
0005DF  1  D0 03                bne brmi2
0005E1  1               brmi1:
0005E1  1  20 FF FF             trap            ;branch zero/non zero
0005E4  1  B0 02        brmi2:  bcs brmi3
0005E6  1  90 03                bcc brmi4
0005E8  1               brmi3:
0005E8  1  20 FF FF             trap            ;branch carry/no carry
0005EB  1  10 02        brmi4:  bpl brmi5
0005ED  1  30 03                bmi brmi6
0005EF  1               brmi5:
0005EF  1  20 FF FF             trap            ;branch minus/plus
0005F2  1  70 02        brmi6:  bvs brmi7
0005F4  1  50 03                bvc brmi8
0005F6  1               brmi7:
0005F6  1  20 FF FF             trap            ;branch overflow/no overflow
0005F9  1               brmi8:
0005F9  1  A9 40 48 28          set_stat overfl
0005FD  1  F0 02                beq brvs1
0005FF  1  D0 03                bne brvs2
000601  1               brvs1:
000601  1  20 FF FF             trap            ;branch zero/non zero
000604  1  B0 02        brvs2:  bcs brvs3
000606  1  90 03                bcc brvs4
000608  1               brvs3:
000608  1  20 FF FF             trap            ;branch carry/no carry
00060B  1  30 02        brvs4:  bmi brvs5
00060D  1  10 03                bpl brvs6
00060F  1               brvs5:
00060F  1  20 FF FF             trap            ;branch minus/plus
000612  1  50 02        brvs6:  bvc brvs7
000614  1  70 03                bvs brvs8
000616  1               brvs7:
000616  1  20 FF FF             trap            ;branch overflow/no overflow
000619  1               brvs8:
000619  1  A9 FD 48 28          set_stat $ff-zero
00061D  1  F0 02                beq brzc1
00061F  1  D0 03                bne brzc2
000621  1               brzc1:
000621  1  20 FF FF             trap            ;branch zero/non zero
000624  1  90 02        brzc2:  bcc brzc3
000626  1  B0 03                bcs brzc4
000628  1               brzc3:
000628  1  20 FF FF             trap            ;branch carry/no carry
00062B  1  10 02        brzc4:  bpl brzc5
00062D  1  30 03                bmi brzc6
00062F  1               brzc5:
00062F  1  20 FF FF             trap            ;branch minus/plus
000632  1  50 02        brzc6:  bvc brzc7
000634  1  70 03                bvs brzc8
000636  1               brzc7:
000636  1  20 FF FF             trap            ;branch overflow/no overflow
000639  1               brzc8:
000639  1  A9 FE 48 28          set_stat $ff-carry
00063D  1  D0 02                bne brcc1
00063F  1  F0 03                beq brcc2
000641  1               brcc1:
000641  1  20 FF FF             trap            ;branch zero/non zero
000644  1  B0 02        brcc2:  bcs brcc3
000646  1  90 03                bcc brcc4
000648  1               brcc3:
000648  1  20 FF FF             trap            ;branch carry/no carry
00064B  1  10 02        brcc4:  bpl brcc5
00064D  1  30 03                bmi brcc6
00064F  1               brcc5:
00064F  1  20 FF FF             trap            ;branch minus/plus
000652  1  50 02        brcc6:  bvc brcc7
000654  1  70 03                bvs brcc8
000656  1               brcc7:
000656  1  20 FF FF             trap            ;branch overflow/no overflow
000659  1               brcc8:
000659  1  A9 7F 48 28          set_stat $ff-minus
00065D  1  D0 02                bne brpl1
00065F  1  F0 03                beq brpl2
000661  1               brpl1:
000661  1  20 FF FF             trap            ;branch zero/non zero
000664  1  90 02        brpl2:  bcc brpl3
000666  1  B0 03                bcs brpl4
000668  1               brpl3:
000668  1  20 FF FF             trap            ;branch carry/no carry
00066B  1  30 02        brpl4:  bmi brpl5
00066D  1  10 03                bpl brpl6
00066F  1               brpl5:
00066F  1  20 FF FF             trap            ;branch minus/plus
000672  1  50 02        brpl6:  bvc brpl7
000674  1  70 03                bvs brpl8
000676  1               brpl7:
000676  1  20 FF FF             trap            ;branch overflow/no overflow
000679  1               brpl8:
000679  1  A9 BF 48 28          set_stat $ff-overfl
00067D  1  D0 02                bne brvc1
00067F  1  F0 03                beq brvc2
000681  1               brvc1:
000681  1  20 FF FF             trap            ;branch zero/non zero
000684  1  90 02        brvc2:  bcc brvc3
000686  1  B0 03                bcs brvc4
000688  1               brvc3:
000688  1  20 FF FF             trap            ;branch carry/no carry
00068B  1  10 02        brvc4:  bpl brvc5
00068D  1  30 03                bmi brvc6
00068F  1               brvc5:
00068F  1  20 FF FF             trap            ;branch minus/plus
000692  1  70 02        brvc6:  bvs brvc7
000694  1  50 03                bvc brvc8
000696  1               brvc7:
000696  1  20 FF FF             trap            ;branch overflow/no overflow
000699  1               brvc8:
000699  1  AD 00 02 C9          next_test
00069D  1  04 F0 03 20  
0006A1  1  FF FF A9 05  
0006A8  1               
0006A8  1               ; test PHA does not alter flags or accumulator but PLA does
0006A8  1  A2 55                ldx #$55        ;x & y protected
0006AA  1  A0 AA                ldy #$aa
0006AC  1  A9 FF 48 A9          set_a 1,$ff     ;push
0006B0  1  01 28        
0006B2  1  48                   pha
0006B3  1  08 C9 01 F0          tst_a 1,$ff
0006B7  1  03 20 FF FF  
0006BB  1  68 48 C9 FF  
0006C5  1  A9 00 48 A9          set_a 0,0
0006C9  1  00 28        
0006CB  1  48                   pha
0006CC  1  08 C9 00 F0          tst_a 0,0
0006D0  1  03 20 FF FF  
0006D4  1  68 48 C9 30  
0006DE  1  A9 FF 48 A9          set_a $ff,$ff
0006E2  1  FF 28        
0006E4  1  48                   pha
0006E5  1  08 C9 FF F0          tst_a $ff,$ff
0006E9  1  03 20 FF FF  
0006ED  1  68 48 C9 FF  
0006F7  1  A9 00 48 A9          set_a 1,0
0006FB  1  01 28        
0006FD  1  48                   pha
0006FE  1  08 C9 01 F0          tst_a 1,0
000702  1  03 20 FF FF  
000706  1  68 48 C9 30  
000710  1  A9 FF 48 A9          set_a 0,$ff
000714  1  00 28        
000716  1  48                   pha
000717  1  08 C9 00 F0          tst_a 0,$ff
00071B  1  03 20 FF FF  
00071F  1  68 48 C9 FF  
000729  1  A9 00 48 A9          set_a $ff,0
00072D  1  FF 28        
00072F  1  48                   pha
000730  1  08 C9 FF F0          tst_a $ff,0
000734  1  03 20 FF FF  
000738  1  68 48 C9 30  
000742  1  A9 FF 48 A9          set_a 0,$ff     ;pull
000746  1  00 28        
000748  1  68                   pla
000749  1  08 C9 FF F0          tst_a $ff,$ff-zero
00074D  1  03 20 FF FF  
000751  1  68 48 C9 FD  
00075B  1  A9 00 48 A9          set_a $ff,0
00075F  1  FF 28        
000761  1  68                   pla
000762  1  08 C9 00 F0          tst_a 0,zero
000766  1  03 20 FF FF  
00076A  1  68 48 C9 32  
000774  1  A9 FF 48 A9          set_a $fe,$ff
000778  1  FE 28        
00077A  1  68                   pla
00077B  1  08 C9 01 F0          tst_a 1,$ff-zero-minus
00077F  1  03 20 FF FF  
000783  1  68 48 C9 7D  
00078D  1  A9 00 48 A9          set_a 0,0
000791  1  00 28        
000793  1  68                   pla
000794  1  08 C9 FF F0          tst_a $ff,minus
000798  1  03 20 FF FF  
00079C  1  68 48 C9 B0  
0007A6  1  A9 FF 48 A9          set_a $ff,$ff
0007AA  1  FF 28        
0007AC  1  68                   pla
0007AD  1  08 C9 00 F0          tst_a 0,$ff-minus
0007B1  1  03 20 FF FF  
0007B5  1  68 48 C9 7F  
0007BF  1  A9 00 48 A9          set_a $fe,0
0007C3  1  FE 28        
0007C5  1  68                   pla
0007C6  1  08 C9 01 F0          tst_a 1,0
0007CA  1  03 20 FF FF  
0007CE  1  68 48 C9 30  
0007D8  1  E0 55                cpx #$55        ;x & y unchanged?
0007DA  1  F0 03 20 FF          trap_ne
0007DE  1  FF           
0007DF  1  C0 AA                cpy #$aa
0007E1  1  F0 03 20 FF          trap_ne
0007E5  1  FF           
0007E6  1  AD 00 02 C9          next_test
0007EA  1  05 F0 03 20  
0007EE  1  FF FF A9 06  
0007F5  1               
0007F5  1               ; partial pretest EOR #
0007F5  1  A9 00 48 A9          set_a $3c,0
0007F9  1  3C 28        
0007FB  1  49 C3                eor #$c3
0007FD  1  08 C9 FF F0          tst_a $ff,fn
000801  1  03 20 FF FF  
000805  1  68 48 C9 B0  
00080F  1  A9 00 48 A9          set_a $c3,0
000813  1  C3 28        
000815  1  49 C3                eor #$c3
000817  1  08 C9 00 F0          tst_a 0,fz
00081B  1  03 20 FF FF  
00081F  1  68 48 C9 32  
000829  1  AD 00 02 C9          next_test
00082D  1  06 F0 03 20  
000831  1  FF FF A9 07  
000838  1               
000838  1               ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
000838  1               ; testing NOP
000838  1  A2 24                ldx #$24
00083A  1  A0 42                ldy #$42
00083C  1  A9 00 48 A9          set_a $18,0
000840  1  18 28        
000842  1  EA                   nop
000843  1  08 C9 18 F0          tst_a $18,0
000847  1  03 20 FF FF  
00084B  1  68 48 C9 30  
000855  1  E0 24                cpx #$24
000857  1  F0 03 20 FF          trap_ne
00085B  1  FF           
00085C  1  C0 42                cpy #$42
00085E  1  F0 03 20 FF          trap_ne
000862  1  FF           
000863  1  A2 DB                ldx #$db
000865  1  A0 BD                ldy #$bd
000867  1  A9 FF 48 A9          set_a $e7,$ff
00086B  1  E7 28        
00086D  1  EA                   nop
00086E  1  08 C9 E7 F0          tst_a $e7,$ff
000872  1  03 20 FF FF  
000876  1  68 48 C9 FF  
000880  1  E0 DB                cpx #$db
000882  1  F0 03 20 FF          trap_ne
000886  1  FF           
000887  1  C0 BD                cpy #$bd
000889  1  F0 03 20 FF          trap_ne
00088D  1  FF           
00088E  1  AD 00 02 C9          next_test
000892  1  07 F0 03 20  
000896  1  FF FF A9 08  
00089D  1               
00089D  1               ; jump absolute
00089D  1  A9 00 48 28          set_stat $0
0008A1  1  A9 46                lda #'F'
0008A3  1  A2 41                ldx #'A'
0008A5  1  A0 52                ldy #'R'        ;N=0, V=0, Z=0, C=0
0008A7  1  4C 4C 41             jmp test_far
0008AA  1  EA                   nop
0008AB  1  EA                   nop
0008AC  1  F0 03 20 FF          trap_ne         ;runover protection
0008B0  1  FF           
0008B1  1  E8                   inx
0008B2  1  E8                   inx
0008B3  1               far_ret:
0008B3  1  D0 03 20 FF          trap_eq         ;returned flags OK?
0008B7  1  FF           
0008B8  1  30 03 20 FF          trap_pl
0008BC  1  FF           
0008BD  1  B0 03 20 FF          trap_cc
0008C1  1  FF           
0008C2  1  70 03 20 FF          trap_vc
0008C6  1  FF           
0008C7  1  C9 EC                cmp #('F'^$aa)  ;returned registers OK?
0008C9  1  F0 03 20 FF          trap_ne
0008CD  1  FF           
0008CE  1  E0 42                cpx #('A'+1)
0008D0  1  F0 03 20 FF          trap_ne
0008D4  1  FF           
0008D5  1  C0 4F                cpy #('R'-3)
0008D7  1  F0 03 20 FF          trap_ne
0008DB  1  FF           
0008DC  1  CA                   dex
0008DD  1  C8                   iny
0008DE  1  C8                   iny
0008DF  1  C8                   iny
0008E0  1  49 AA                eor #$aa        ;N=0, V=1, Z=0, C=1
0008E2  1  4C EE 08             jmp test_near
0008E5  1  EA                   nop
0008E6  1  EA                   nop
0008E7  1  F0 03 20 FF          trap_ne         ;runover protection
0008EB  1  FF           
0008EC  1  E8                   inx
0008ED  1  E8                   inx
0008EE  1               test_near:
0008EE  1  D0 03 20 FF          trap_eq         ;passed flags OK?
0008F2  1  FF           
0008F3  1  10 03 20 FF          trap_mi
0008F7  1  FF           
0008F8  1  B0 03 20 FF          trap_cc
0008FC  1  FF           
0008FD  1  70 03 20 FF          trap_vc
000901  1  FF           
000902  1  C9 46                cmp #'F'        ;passed registers OK?
000904  1  F0 03 20 FF          trap_ne
000908  1  FF           
000909  1  E0 41                cpx #'A'
00090B  1  F0 03 20 FF          trap_ne
00090F  1  FF           
000910  1  C0 52                cpy #'R'
000912  1  F0 03 20 FF          trap_ne
000916  1  FF           
000917  1  AD 00 02 C9          next_test
00091B  1  08 F0 03 20  
00091F  1  FF FF A9 09  
000926  1               
000926  1               ; jump indirect
000926  1  A9 00 48 28          set_stat 0
00092A  1  A9 49                lda #'I'
00092C  1  A2 4E                ldx #'N'
00092E  1  A0 44                ldy #'D'        ;N=0, V=0, Z=0, C=0
000930  1  6C 92 41             jmp (ptr_tst_ind)
000933  1  EA                   nop
000934  1  F0 03 20 FF          trap_ne         ;runover protection
000938  1  FF           
000939  1  88                   dey
00093A  1  88                   dey
00093B  1               ind_ret:
00093B  1  08                   php             ;either SP or Y count will fail, if we do not hit
00093C  1  88                   dey
00093D  1  88                   dey
00093E  1  88                   dey
00093F  1  28                   plp
000940  1  D0 03 20 FF          trap_eq         ;returned flags OK?
000944  1  FF           
000945  1  30 03 20 FF          trap_pl
000949  1  FF           
00094A  1  B0 03 20 FF          trap_cc
00094E  1  FF           
00094F  1  70 03 20 FF          trap_vc
000953  1  FF           
000954  1  C9 E3                cmp #('I'^$aa)  ;returned registers OK?
000956  1  F0 03 20 FF          trap_ne
00095A  1  FF           
00095B  1  E0 4F                cpx #('N'+1)
00095D  1  F0 03 20 FF          trap_ne
000961  1  FF           
000962  1  C0 3E                cpy #('D'-6)
000964  1  F0 03 20 FF          trap_ne
000968  1  FF           
000969  1  BA                   tsx             ;SP check
00096A  1  E0 FF                cpx #$ff
00096C  1  F0 03 20 FF          trap_ne
000970  1  FF           
000971  1  AD 00 02 C9          next_test
000975  1  09 F0 03 20  
000979  1  FF FF A9 0A  
000980  1               
000980  1               ; jump subroutine & return from subroutine
000980  1  A9 00 48 28          set_stat 0
000984  1  A9 4A                lda #'J'
000986  1  A2 53                ldx #'S'
000988  1  A0 52                ldy #'R'        ;N=0, V=0, Z=0, C=0
00098A  1  20 E9 41             jsr test_jsr
00098D  1               jsr_ret = *-1           ;last address of jsr = return address
00098D  1  08                   php             ;either SP or Y count will fail, if we do not hit
00098E  1  88                   dey
00098F  1  88                   dey
000990  1  88                   dey
000991  1  28                   plp
000992  1  D0 03 20 FF          trap_eq         ;returned flags OK?
000996  1  FF           
000997  1  30 03 20 FF          trap_pl
00099B  1  FF           
00099C  1  B0 03 20 FF          trap_cc
0009A0  1  FF           
0009A1  1  70 03 20 FF          trap_vc
0009A5  1  FF           
0009A6  1  C9 E0                cmp #('J'^$aa)  ;returned registers OK?
0009A8  1  F0 03 20 FF          trap_ne
0009AC  1  FF           
0009AD  1  E0 54                cpx #('S'+1)
0009AF  1  F0 03 20 FF          trap_ne
0009B3  1  FF           
0009B4  1  C0 4C                cpy #('R'-6)
0009B6  1  F0 03 20 FF          trap_ne
0009BA  1  FF           
0009BB  1  BA                   tsx             ;sp?
0009BC  1  E0 FF                cpx #$ff
0009BE  1  F0 03 20 FF          trap_ne
0009C2  1  FF           
0009C3  1  AD 00 02 C9          next_test
0009C7  1  0A F0 03 20  
0009CB  1  FF FF A9 0B  
0009D2  1               
0009D2  1               ; break & return from interrupt
0009D2  1                   .if ROM_vectors = 1
0009D2  1  A9 00                load_flag 0     ;with interrupts enabled if allowed!
0009D4  1  48                   pha
0009D5  1  A9 42                lda #'B'
0009D7  1  A2 52                ldx #'R'
0009D9  1  A0 4B                ldy #'K'
0009DB  1  28                   plp             ;N=0, V=0, Z=0, C=0
0009DC  1  00                   brk
0009DD  1                   .else
0009DD  1                       lda #>brk_ret0 ;emulated break
0009DD  1                       pha
0009DD  1                       lda #<brk_ret0
0009DD  1                       pha
0009DD  1                       load_flag fao    ;set break & unused on stack
0009DD  1                       pha
0009DD  1                       load_flag intdis ;during interrupt
0009DD  1                       pha
0009DD  1                       lda #'B'
0009DD  1                       ldx #'R'
0009DD  1                       ldy #'K'
0009DD  1                       plp             ;N=0, V=0, Z=0, C=0
0009DD  1                       jmp irq_trap
0009DD  1                   .endif
0009DD  1  88                   dey             ;should not be executed
0009DE  1               brk_ret0:               ;address of break return
0009DE  1  08                   php             ;either SP or Y count will fail, if we do not hit
0009DF  1  88                   dey
0009E0  1  88                   dey
0009E1  1  88                   dey
0009E2  1  C9 E8                cmp #'B'^$aa    ;returned registers OK?
0009E4  1                       ;the IRQ vector was never executed if A & X stay unmodified
0009E4  1  F0 03 20 FF          trap_ne
0009E8  1  FF           
0009E9  1  E0 53                cpx #'R'+1
0009EB  1  F0 03 20 FF          trap_ne
0009EF  1  FF           
0009F0  1  C0 45                cpy #'K'-6
0009F2  1  F0 03 20 FF          trap_ne
0009F6  1  FF           
0009F7  1  68                   pla             ;returned flags OK (unchanged)?
0009F8  1  C9 30                cmp_flag 0
0009FA  1  F0 03 20 FF          trap_ne
0009FE  1  FF           
0009FF  1  BA                   tsx             ;sp?
000A00  1  E0 FF                cpx #$ff
000A02  1  F0 03 20 FF          trap_ne
000A06  1  FF           
000A07  1                   .if ROM_vectors = 1
000A07  1  A9 FF                load_flag $ff   ;with interrupts disabled if allowed!
000A09  1  48                   pha
000A0A  1  A9 BD                lda #$ff-'B'
000A0C  1  A2 AD                ldx #$ff-'R'
000A0E  1  A0 B4                ldy #$ff-'K'
000A10  1  28                   plp             ;N=1, V=1, Z=1, C=1
000A11  1  00                   brk
000A12  1                   .else
000A12  1                       lda #>brk_ret1 ;emulated break
000A12  1                       pha
000A12  1                       lda #<brk_ret1
000A12  1                       pha
000A12  1                       load_flag $ff
000A12  1                       pha             ;set break & unused on stack
000A12  1                       pha             ;actual flags
000A12  1                       lda #$ff-'B'
000A12  1                       ldx #$ff-'R'
000A12  1                       ldy #$ff-'K'
000A12  1                       plp             ;N=1, V=1, Z=1, C=1
000A12  1                       jmp irq_trap
000A12  1                   .endif
000A12  1  88                   dey             ;should not be executed
000A13  1               brk_ret1:               ;address of break return
000A13  1  08                   php             ;either SP or Y count will fail, if we do not hit
000A14  1  88                   dey
000A15  1  88                   dey
000A16  1  88                   dey
000A17  1  C9 17                cmp #($ff-'B')^$aa  ;returned registers OK?
000A19  1                       ;the IRQ vector was never executed if A & X stay unmodified
000A19  1  F0 03 20 FF          trap_ne
000A1D  1  FF           
000A1E  1  E0 AE                cpx #$ff-'R'+1
000A20  1  F0 03 20 FF          trap_ne
000A24  1  FF           
000A25  1  C0 AE                cpy #$ff-'K'-6
000A27  1  F0 03 20 FF          trap_ne
000A2B  1  FF           
000A2C  1  68                   pla             ;returned flags OK (unchanged)?
000A2D  1  C9 FF                cmp_flag $ff
000A2F  1  F0 03 20 FF          trap_ne
000A33  1  FF           
000A34  1  BA                   tsx             ;sp?
000A35  1  E0 FF                cpx #$ff
000A37  1  F0 03 20 FF          trap_ne
000A3B  1  FF           
000A3C  1  AD 00 02 C9          next_test
000A40  1  0B F0 03 20  
000A44  1  FF FF A9 0C  
000A4B  1               
000A4B  1               ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
000A4B  1  A9 FF 48 28          set_stat $ff
000A4F  1  18                   clc
000A50  1  08 68 48 C9          tst_stat $ff-carry
000A54  1  FE F0 03 20  
000A58  1  FF FF 28     
000A5B  1  38                   sec
000A5C  1  08 68 48 C9          tst_stat $ff
000A60  1  FF F0 03 20  
000A64  1  FF FF 28     
000A67  1                   .if I_flag = 3
000A67  1  58                   cli
000A68  1  08 68 48 C9          tst_stat $ff-intdis
000A6C  1  FB F0 03 20  
000A70  1  FF FF 28     
000A73  1  78                   sei
000A74  1  08 68 48 C9          tst_stat $ff
000A78  1  FF F0 03 20  
000A7C  1  FF FF 28     
000A7F  1                   .endif
000A7F  1  D8                   cld
000A80  1  08 68 48 C9          tst_stat $ff-decmode
000A84  1  F7 F0 03 20  
000A88  1  FF FF 28     
000A8B  1  F8                   sed
000A8C  1  08 68 48 C9          tst_stat $ff
000A90  1  FF F0 03 20  
000A94  1  FF FF 28     
000A97  1  B8                   clv
000A98  1  08 68 48 C9          tst_stat $ff-overfl
000A9C  1  BF F0 03 20  
000AA0  1  FF FF 28     
000AA3  1  A9 00 48 28          set_stat 0
000AA7  1  08 68 48 C9          tst_stat 0
000AAB  1  30 F0 03 20  
000AAF  1  FF FF 28     
000AB2  1  38                   sec
000AB3  1  08 68 48 C9          tst_stat carry
000AB7  1  31 F0 03 20  
000ABB  1  FF FF 28     
000ABE  1  18                   clc
000ABF  1  08 68 48 C9          tst_stat 0
000AC3  1  30 F0 03 20  
000AC7  1  FF FF 28     
000ACA  1                   .if I_flag = 3
000ACA  1  78                   sei
000ACB  1  08 68 48 C9          tst_stat intdis
000ACF  1  34 F0 03 20  
000AD3  1  FF FF 28     
000AD6  1  58                   cli
000AD7  1  08 68 48 C9          tst_stat 0
000ADB  1  30 F0 03 20  
000ADF  1  FF FF 28     
000AE2  1                   .endif
000AE2  1  F8                   sed
000AE3  1  08 68 48 C9          tst_stat decmode
000AE7  1  38 F0 03 20  
000AEB  1  FF FF 28     
000AEE  1  D8                   cld
000AEF  1  08 68 48 C9          tst_stat 0
000AF3  1  30 F0 03 20  
000AF7  1  FF FF 28     
000AFA  1  A9 40 48 28          set_stat overfl
000AFE  1  08 68 48 C9          tst_stat overfl
000B02  1  70 F0 03 20  
000B06  1  FF FF 28     
000B09  1  B8                   clv
000B0A  1  08 68 48 C9          tst_stat 0
000B0E  1  30 F0 03 20  
000B12  1  FF FF 28     
000B15  1  AD 00 02 C9          next_test
000B19  1  0C F0 03 20  
000B1D  1  FF FF A9 0D  
000B24  1               ; testing index register increment/decrement and transfer
000B24  1               ; INX INY DEX DEY TAX TXA TAY TYA
000B24  1  A2 FE                ldx #$fe
000B26  1  A9 FF 48 28          set_stat $ff
000B2A  1  E8                   inx             ;ff
000B2B  1  08 E0 FF F0          tst_x $ff,$ff-zero
000B2F  1  03 20 FF FF  
000B33  1  68 48 C9 FD  
000B3D  1  E8                   inx             ;00
000B3E  1  08 E0 00 F0          tst_x 0,$ff-minus
000B42  1  03 20 FF FF  
000B46  1  68 48 C9 7F  
000B50  1  E8                   inx             ;01
000B51  1  08 E0 01 F0          tst_x 1,$ff-minus-zero
000B55  1  03 20 FF FF  
000B59  1  68 48 C9 7D  
000B63  1  CA                   dex             ;00
000B64  1  08 E0 00 F0          tst_x 0,$ff-minus
000B68  1  03 20 FF FF  
000B6C  1  68 48 C9 7F  
000B76  1  CA                   dex             ;ff
000B77  1  08 E0 FF F0          tst_x $ff,$ff-zero
000B7B  1  03 20 FF FF  
000B7F  1  68 48 C9 FD  
000B89  1  CA                   dex             ;fe
000B8A  1  A9 00 48 28          set_stat 0
000B8E  1  E8                   inx             ;ff
000B8F  1  08 E0 FF F0          tst_x $ff,minus
000B93  1  03 20 FF FF  
000B97  1  68 48 C9 B0  
000BA1  1  E8                   inx             ;00
000BA2  1  08 E0 00 F0          tst_x 0,zero
000BA6  1  03 20 FF FF  
000BAA  1  68 48 C9 32  
000BB4  1  E8                   inx             ;01
000BB5  1  08 E0 01 F0          tst_x 1,0
000BB9  1  03 20 FF FF  
000BBD  1  68 48 C9 30  
000BC7  1  CA                   dex             ;00
000BC8  1  08 E0 00 F0          tst_x 0,zero
000BCC  1  03 20 FF FF  
000BD0  1  68 48 C9 32  
000BDA  1  CA                   dex             ;ff
000BDB  1  08 E0 FF F0          tst_x $ff,minus
000BDF  1  03 20 FF FF  
000BE3  1  68 48 C9 B0  
000BED  1               
000BED  1  A0 FE                ldy #$fe
000BEF  1  A9 FF 48 28          set_stat $ff
000BF3  1  C8                   iny             ;ff
000BF4  1  08 C0 FF F0          tst_y $ff,$ff-zero
000BF8  1  03 20 FF FF  
000BFC  1  68 48 C9 FD  
000C06  1  C8                   iny             ;00
000C07  1  08 C0 00 F0          tst_y 0,$ff-minus
000C0B  1  03 20 FF FF  
000C0F  1  68 48 C9 7F  
000C19  1  C8                   iny             ;01
000C1A  1  08 C0 01 F0          tst_y 1,$ff-minus-zero
000C1E  1  03 20 FF FF  
000C22  1  68 48 C9 7D  
000C2C  1  88                   dey             ;00
000C2D  1  08 C0 00 F0          tst_y 0,$ff-minus
000C31  1  03 20 FF FF  
000C35  1  68 48 C9 7F  
000C3F  1  88                   dey             ;ff
000C40  1  08 C0 FF F0          tst_y $ff,$ff-zero
000C44  1  03 20 FF FF  
000C48  1  68 48 C9 FD  
000C52  1  88                   dey             ;fe
000C53  1  A9 00 48 28          set_stat 0
000C57  1  C8                   iny             ;ff
000C58  1  08 C0 FF F0          tst_y $ff,0+minus
000C5C  1  03 20 FF FF  
000C60  1  68 48 C9 B0  
000C6A  1  C8                   iny             ;00
000C6B  1  08 C0 00 F0          tst_y 0,zero
000C6F  1  03 20 FF FF  
000C73  1  68 48 C9 32  
000C7D  1  C8                   iny             ;01
000C7E  1  08 C0 01 F0          tst_y 1,0
000C82  1  03 20 FF FF  
000C86  1  68 48 C9 30  
000C90  1  88                   dey             ;00
000C91  1  08 C0 00 F0          tst_y 0,zero
000C95  1  03 20 FF FF  
000C99  1  68 48 C9 32  
000CA3  1  88                   dey             ;ff
000CA4  1  08 C0 FF F0          tst_y $ff,minus
000CA8  1  03 20 FF FF  
000CAC  1  68 48 C9 B0  
000CB6  1               
000CB6  1  A2 FF                ldx #$ff
000CB8  1  A9 FF 48 28          set_stat $ff
000CBC  1  8A                   txa
000CBD  1  08 C9 FF F0          tst_a $ff,$ff-zero
000CC1  1  03 20 FF FF  
000CC5  1  68 48 C9 FD  
000CCF  1  08                   php
000CD0  1  E8                   inx             ;00
000CD1  1  28                   plp
000CD2  1  8A                   txa
000CD3  1  08 C9 00 F0          tst_a 0,$ff-minus
000CD7  1  03 20 FF FF  
000CDB  1  68 48 C9 7F  
000CE5  1  08                   php
000CE6  1  E8                   inx             ;01
000CE7  1  28                   plp
000CE8  1  8A                   txa
000CE9  1  08 C9 01 F0          tst_a 1,$ff-minus-zero
000CED  1  03 20 FF FF  
000CF1  1  68 48 C9 7D  
000CFB  1  A9 00 48 28          set_stat 0
000CFF  1  8A                   txa
000D00  1  08 C9 01 F0          tst_a 1,0
000D04  1  03 20 FF FF  
000D08  1  68 48 C9 30  
000D12  1  08                   php
000D13  1  CA                   dex             ;00
000D14  1  28                   plp
000D15  1  8A                   txa
000D16  1  08 C9 00 F0          tst_a 0,zero
000D1A  1  03 20 FF FF  
000D1E  1  68 48 C9 32  
000D28  1  08                   php
000D29  1  CA                   dex             ;ff
000D2A  1  28                   plp
000D2B  1  8A                   txa
000D2C  1  08 C9 FF F0          tst_a $ff,minus
000D30  1  03 20 FF FF  
000D34  1  68 48 C9 B0  
000D3E  1               
000D3E  1  A0 FF                ldy #$ff
000D40  1  A9 FF 48 28          set_stat $ff
000D44  1  98                   tya
000D45  1  08 C9 FF F0          tst_a $ff,$ff-zero
000D49  1  03 20 FF FF  
000D4D  1  68 48 C9 FD  
000D57  1  08                   php
000D58  1  C8                   iny             ;00
000D59  1  28                   plp
000D5A  1  98                   tya
000D5B  1  08 C9 00 F0          tst_a 0,$ff-minus
000D5F  1  03 20 FF FF  
000D63  1  68 48 C9 7F  
000D6D  1  08                   php
000D6E  1  C8                   iny             ;01
000D6F  1  28                   plp
000D70  1  98                   tya
000D71  1  08 C9 01 F0          tst_a 1,$ff-minus-zero
000D75  1  03 20 FF FF  
000D79  1  68 48 C9 7D  
000D83  1  A9 00 48 28          set_stat 0
000D87  1  98                   tya
000D88  1  08 C9 01 F0          tst_a 1,0
000D8C  1  03 20 FF FF  
000D90  1  68 48 C9 30  
000D9A  1  08                   php
000D9B  1  88                   dey             ;00
000D9C  1  28                   plp
000D9D  1  98                   tya
000D9E  1  08 C9 00 F0          tst_a 0,zero
000DA2  1  03 20 FF FF  
000DA6  1  68 48 C9 32  
000DB0  1  08                   php
000DB1  1  88                   dey             ;ff
000DB2  1  28                   plp
000DB3  1  98                   tya
000DB4  1  08 C9 FF F0          tst_a $ff,minus
000DB8  1  03 20 FF FF  
000DBC  1  68 48 C9 B0  
000DC6  1               
000DC6  1  A9 FF                load_flag $ff
000DC8  1  48                   pha
000DC9  1  A2 FF                ldx #$ff        ;ff
000DCB  1  8A                   txa
000DCC  1  28                   plp
000DCD  1  A8                   tay
000DCE  1  08 C0 FF F0          tst_y $ff,$ff-zero
000DD2  1  03 20 FF FF  
000DD6  1  68 48 C9 FD  
000DE0  1  08                   php
000DE1  1  E8                   inx             ;00
000DE2  1  8A                   txa
000DE3  1  28                   plp
000DE4  1  A8                   tay
000DE5  1  08 C0 00 F0          tst_y 0,$ff-minus
000DE9  1  03 20 FF FF  
000DED  1  68 48 C9 7F  
000DF7  1  08                   php
000DF8  1  E8                   inx             ;01
000DF9  1  8A                   txa
000DFA  1  28                   plp
000DFB  1  A8                   tay
000DFC  1  08 C0 01 F0          tst_y 1,$ff-minus-zero
000E00  1  03 20 FF FF  
000E04  1  68 48 C9 7D  
000E0E  1  A9 00                load_flag 0
000E10  1  48                   pha
000E11  1  A9 00                lda #0
000E13  1  8A                   txa
000E14  1  28                   plp
000E15  1  A8                   tay
000E16  1  08 C0 01 F0          tst_y 1,0
000E1A  1  03 20 FF FF  
000E1E  1  68 48 C9 30  
000E28  1  08                   php
000E29  1  CA                   dex             ;00
000E2A  1  8A                   txa
000E2B  1  28                   plp
000E2C  1  A8                   tay
000E2D  1  08 C0 00 F0          tst_y 0,zero
000E31  1  03 20 FF FF  
000E35  1  68 48 C9 32  
000E3F  1  08                   php
000E40  1  CA                   dex             ;ff
000E41  1  8A                   txa
000E42  1  28                   plp
000E43  1  A8                   tay
000E44  1  08 C0 FF F0          tst_y $ff,minus
000E48  1  03 20 FF FF  
000E4C  1  68 48 C9 B0  
000E56  1               
000E56  1               
000E56  1  A9 FF                load_flag $ff
000E58  1  48                   pha
000E59  1  A0 FF                ldy #$ff        ;ff
000E5B  1  98                   tya
000E5C  1  28                   plp
000E5D  1  AA                   tax
000E5E  1  08 E0 FF F0          tst_x $ff,$ff-zero
000E62  1  03 20 FF FF  
000E66  1  68 48 C9 FD  
000E70  1  08                   php
000E71  1  C8                   iny             ;00
000E72  1  98                   tya
000E73  1  28                   plp
000E74  1  AA                   tax
000E75  1  08 E0 00 F0          tst_x 0,$ff-minus
000E79  1  03 20 FF FF  
000E7D  1  68 48 C9 7F  
000E87  1  08                   php
000E88  1  C8                   iny             ;01
000E89  1  98                   tya
000E8A  1  28                   plp
000E8B  1  AA                   tax
000E8C  1  08 E0 01 F0          tst_x 1,$ff-minus-zero
000E90  1  03 20 FF FF  
000E94  1  68 48 C9 7D  
000E9E  1  A9 00                load_flag 0
000EA0  1  48                   pha
000EA1  1  A9 00                lda #0          ;preset status
000EA3  1  98                   tya
000EA4  1  28                   plp
000EA5  1  AA                   tax
000EA6  1  08 E0 01 F0          tst_x 1,0
000EAA  1  03 20 FF FF  
000EAE  1  68 48 C9 30  
000EB8  1  08                   php
000EB9  1  88                   dey             ;00
000EBA  1  98                   tya
000EBB  1  28                   plp
000EBC  1  AA                   tax
000EBD  1  08 E0 00 F0          tst_x 0,zero
000EC1  1  03 20 FF FF  
000EC5  1  68 48 C9 32  
000ECF  1  08                   php
000ED0  1  88                   dey             ;ff
000ED1  1  98                   tya
000ED2  1  28                   plp
000ED3  1  AA                   tax
000ED4  1  08 E0 FF F0          tst_x $ff,minus
000ED8  1  03 20 FF FF  
000EDC  1  68 48 C9 B0  
000EE6  1  AD 00 02 C9          next_test
000EEA  1  0D F0 03 20  
000EEE  1  FF FF A9 0E  
000EF5  1               
000EF5  1               ;TSX sets NZ - TXS does not
000EF5  1               ;  This section also tests for proper stack wrap around.
000EF5  1  A2 01                ldx #1          ;01
000EF7  1  A9 FF 48 28          set_stat $ff
000EFB  1  9A                   txs
000EFC  1  08                   php
000EFD  1  AD 01 01             lda $101
000F00  1  C9 FF                cmp_flag $ff
000F02  1  F0 03 20 FF          trap_ne
000F06  1  FF           
000F07  1  A9 00 48 28          set_stat 0
000F0B  1  9A                   txs
000F0C  1  08                   php
000F0D  1  AD 01 01             lda $101
000F10  1  C9 30                cmp_flag 0
000F12  1  F0 03 20 FF          trap_ne
000F16  1  FF           
000F17  1  CA                   dex             ;00
000F18  1  A9 FF 48 28          set_stat $ff
000F1C  1  9A                   txs
000F1D  1  08                   php
000F1E  1  AD 00 01             lda $100
000F21  1  C9 FF                cmp_flag $ff
000F23  1  F0 03 20 FF          trap_ne
000F27  1  FF           
000F28  1  A9 00 48 28          set_stat 0
000F2C  1  9A                   txs
000F2D  1  08                   php
000F2E  1  AD 00 01             lda $100
000F31  1  C9 30                cmp_flag 0
000F33  1  F0 03 20 FF          trap_ne
000F37  1  FF           
000F38  1  CA                   dex             ;ff
000F39  1  A9 FF 48 28          set_stat $ff
000F3D  1  9A                   txs
000F3E  1  08                   php
000F3F  1  AD FF 01             lda $1ff
000F42  1  C9 FF                cmp_flag $ff
000F44  1  F0 03 20 FF          trap_ne
000F48  1  FF           
000F49  1  A9 00 48 28          set_stat 0
000F4D  1  9A                   txs
000F4E  1  08                   php
000F4F  1  AD FF 01             lda $1ff
000F52  1  C9 30                cmp_flag 0
000F54  1               
000F54  1  A2 01                ldx #1
000F56  1  9A                   txs             ;sp=01
000F57  1  A9 FF 48 28          set_stat $ff
000F5B  1  BA                   tsx             ;clears Z, N
000F5C  1  08                   php             ;sp=00
000F5D  1  E0 01                cpx #1
000F5F  1  F0 03 20 FF          trap_ne
000F63  1  FF           
000F64  1  AD 01 01             lda $101
000F67  1  C9 7D                cmp_flag $ff-minus-zero
000F69  1  F0 03 20 FF          trap_ne
000F6D  1  FF           
000F6E  1  A9 FF 48 28          set_stat $ff
000F72  1  BA                   tsx             ;clears N, sets Z
000F73  1  08                   php             ;sp=ff
000F74  1  E0 00                cpx #0
000F76  1  F0 03 20 FF          trap_ne
000F7A  1  FF           
000F7B  1  AD 00 01             lda $100
000F7E  1  C9 7F                cmp_flag $ff-minus
000F80  1  F0 03 20 FF          trap_ne
000F84  1  FF           
000F85  1  A9 FF 48 28          set_stat $ff
000F89  1  BA                   tsx             ;clears N, sets Z
000F8A  1  08                   php             ;sp=fe
000F8B  1  E0 FF                cpx #$ff
000F8D  1  F0 03 20 FF          trap_ne
000F91  1  FF           
000F92  1  AD FF 01             lda $1ff
000F95  1  C9 FD                cmp_flag $ff-zero
000F97  1  F0 03 20 FF          trap_ne
000F9B  1  FF           
000F9C  1               
000F9C  1  A2 01                ldx #1
000F9E  1  9A                   txs             ;sp=01
000F9F  1  A9 00 48 28          set_stat 0
000FA3  1  BA                   tsx             ;clears Z, N
000FA4  1  08                   php             ;sp=00
000FA5  1  E0 01                cpx #1
000FA7  1  F0 03 20 FF          trap_ne
000FAB  1  FF           
000FAC  1  AD 01 01             lda $101
000FAF  1  C9 30                cmp_flag 0
000FB1  1  F0 03 20 FF          trap_ne
000FB5  1  FF           
000FB6  1  A9 00 48 28          set_stat 0
000FBA  1  BA                   tsx             ;clears N, sets Z
000FBB  1  08                   php             ;sp=ff
000FBC  1  E0 00                cpx #0
000FBE  1  F0 03 20 FF          trap_ne
000FC2  1  FF           
000FC3  1  AD 00 01             lda $100
000FC6  1  C9 32                cmp_flag zero
000FC8  1  F0 03 20 FF          trap_ne
000FCC  1  FF           
000FCD  1  A9 00 48 28          set_stat 0
000FD1  1  BA                   tsx             ;clears N, sets Z
000FD2  1  08                   php             ;sp=fe
000FD3  1  E0 FF                cpx #$ff
000FD5  1  F0 03 20 FF          trap_ne
000FD9  1  FF           
000FDA  1  AD FF 01             lda $1ff
000FDD  1  C9 B0                cmp_flag minus
000FDF  1  F0 03 20 FF          trap_ne
000FE3  1  FF           
000FE4  1  68                   pla             ;sp=ff
000FE5  1  AD 00 02 C9          next_test
000FE9  1  0E F0 03 20  
000FED  1  FF FF A9 0F  
000FF4  1               
000FF4  1               ; testing index register load & store LDY LDX STY STX all addressing modes
000FF4  1               ; LDX / STX - zp,y / abs,y
000FF4  1  A0 03                ldy #3
000FF6  1               tldx:
000FF6  1  A9 00 48 28          set_stat 0
000FFA  1  B6 13                ldx zp1,y
000FFC  1  08                   php         ;test stores do not alter flags
000FFD  1  8A                   txa
000FFE  1  49 C3                eor #$c3
001000  1  28                   plp
001001  1  99 03 02             sta abst,y
001004  1  08                   php         ;flags after load/store sequence
001005  1  49 C3                eor #$c3
001007  1  D9 17 02             cmp abs1,y  ;test result
00100A  1  F0 03 20 FF          trap_ne
00100E  1  FF           
00100F  1  68                   pla         ;load status
001010  1  49 30                eor_flag 0
001012  1  D9 1C 02             cmp fLDx,y  ;test flags
001015  1  F0 03 20 FF          trap_ne
001019  1  FF           
00101A  1  88                   dey
00101B  1  10 D9                bpl tldx
00101D  1               
00101D  1  A0 03                ldy #3
00101F  1               tldx1:
00101F  1  A9 FF 48 28          set_stat $ff
001023  1  B6 13                ldx zp1,y
001025  1  08                   php         ;test stores do not alter flags
001026  1  8A                   txa
001027  1  49 C3                eor #$c3
001029  1  28                   plp
00102A  1  99 03 02             sta abst,y
00102D  1  08                   php         ;flags after load/store sequence
00102E  1  49 C3                eor #$c3
001030  1  D9 17 02             cmp abs1,y  ;test result
001033  1  F0 03 20 FF          trap_ne
001037  1  FF           
001038  1  68                   pla         ;load status
001039  1  49 7D                eor_flag <~fnz ;mask bits not altered
00103B  1  D9 1C 02             cmp fLDx,y  ;test flags
00103E  1  F0 03 20 FF          trap_ne
001042  1  FF           
001043  1  88                   dey
001044  1  10 D9                bpl tldx1
001046  1               
001046  1  A0 03                ldy #3
001048  1               tldx2:
001048  1  A9 00 48 28          set_stat 0
00104C  1  BE 17 02             ldx abs1,y
00104F  1  08                   php         ;test stores do not alter flags
001050  1  8A                   txa
001051  1  49 C3                eor #$c3
001053  1  AA                   tax
001054  1  28                   plp
001055  1  96 0C                stx zpt,y
001057  1  08                   php         ;flags after load/store sequence
001058  1  49 C3                eor #$c3
00105A  1  D9 13 00             cmp zp1,y   ;test result
00105D  1  F0 03 20 FF          trap_ne
001061  1  FF           
001062  1  68                   pla         ;load status
001063  1  49 30                eor_flag 0
001065  1  D9 1C 02             cmp fLDx,y  ;test flags
001068  1  F0 03 20 FF          trap_ne
00106C  1  FF           
00106D  1  88                   dey
00106E  1  10 D8                bpl tldx2
001070  1               
001070  1  A0 03                ldy #3
001072  1               tldx3:
001072  1  A9 FF 48 28          set_stat $ff
001076  1  BE 17 02             ldx abs1,y
001079  1  08                   php         ;test stores do not alter flags
00107A  1  8A                   txa
00107B  1  49 C3                eor #$c3
00107D  1  AA                   tax
00107E  1  28                   plp
00107F  1  96 0C                stx zpt,y
001081  1  08                   php         ;flags after load/store sequence
001082  1  49 C3                eor #$c3
001084  1  D9 13 00             cmp zp1,y   ;test result
001087  1  F0 03 20 FF          trap_ne
00108B  1  FF           
00108C  1  68                   pla         ;load status
00108D  1  49 7D                eor_flag <~fnz ;mask bits not altered
00108F  1  D9 1C 02             cmp fLDx,y  ;test flags
001092  1  F0 03 20 FF          trap_ne
001096  1  FF           
001097  1  88                   dey
001098  1  10 D8                bpl tldx3
00109A  1               
00109A  1  A0 03                ldy #3      ;testing store result
00109C  1  A2 00                ldx #0
00109E  1  B9 0C 00     tstx:   lda zpt,y
0010A1  1  49 C3                eor #$c3
0010A3  1  D9 13 00             cmp zp1,y
0010A6  1  F0 03 20 FF          trap_ne     ;store to zp data
0010AA  1  FF           
0010AB  1  96 0C                stx zpt,y   ;clear
0010AD  1  B9 03 02             lda abst,y
0010B0  1  49 C3                eor #$c3
0010B2  1  D9 17 02             cmp abs1,y
0010B5  1  F0 03 20 FF          trap_ne     ;store to abs data
0010B9  1  FF           
0010BA  1  8A                   txa
0010BB  1  99 03 02             sta abst,y  ;clear
0010BE  1  88                   dey
0010BF  1  10 DD                bpl tstx
0010C1  1  AD 00 02 C9          next_test
0010C5  1  0F F0 03 20  
0010C9  1  FF FF A9 10  
0010D0  1               
0010D0  1               ; indexed wraparound test (only zp should wrap)
0010D0  1  A0 FD                ldy #3+$fa
0010D2  1  B6 19        tldx4:  ldx <(zp1-$fa),y   ;wrap on indexed zp
0010D4  1  8A                   txa
0010D5  1  99 09 01             sta abst-$fa,y      ;no STX abs,y!
0010D8  1  88                   dey
0010D9  1  C0 FA                cpy #$fa
0010DB  1  B0 F5                bcs tldx4
0010DD  1  A0 FD                ldy #3+$fa
0010DF  1  BE 1D 01     tldx5:  ldx abs1-$fa,y      ;no wrap on indexed abs
0010E2  1  96 12                stx <(zpt-$fa),y
0010E4  1  88                   dey
0010E5  1  C0 FA                cpy #$fa
0010E7  1  B0 F6                bcs tldx5
0010E9  1  A0 03                ldy #3      ;testing wraparound result
0010EB  1  A2 00                ldx #0
0010ED  1  B9 0C 00     tstx1:  lda zpt,y
0010F0  1  D9 13 00             cmp zp1,y
0010F3  1  F0 03 20 FF          trap_ne     ;store to zp data
0010F7  1  FF           
0010F8  1  96 0C                stx zpt,y   ;clear
0010FA  1  B9 03 02             lda abst,y
0010FD  1  D9 17 02             cmp abs1,y
001100  1  F0 03 20 FF          trap_ne     ;store to abs data
001104  1  FF           
001105  1  8A                   txa
001106  1  99 03 02             sta abst,y  ;clear
001109  1  88                   dey
00110A  1  10 E1                bpl tstx1
00110C  1  AD 00 02 C9          next_test
001110  1  10 F0 03 20  
001114  1  FF FF A9 11  
00111B  1               
00111B  1               ; LDY / STY - zp,x / abs,x
00111B  1  A2 03                ldx #3
00111D  1               tldy:
00111D  1  A9 00 48 28          set_stat 0
001121  1  B4 13                ldy zp1,x
001123  1  08                   php         ;test stores do not alter flags
001124  1  98                   tya
001125  1  49 C3                eor #$c3
001127  1  28                   plp
001128  1  9D 03 02             sta abst,x
00112B  1  08                   php         ;flags after load/store sequence
00112C  1  49 C3                eor #$c3
00112E  1  DD 17 02             cmp abs1,x  ;test result
001131  1  F0 03 20 FF          trap_ne
001135  1  FF           
001136  1  68                   pla         ;load status
001137  1  49 30                eor_flag 0
001139  1  DD 1C 02             cmp fLDx,x  ;test flags
00113C  1  F0 03 20 FF          trap_ne
001140  1  FF           
001141  1  CA                   dex
001142  1  10 D9                bpl tldy
001144  1               
001144  1  A2 03                ldx #3
001146  1               tldy1:
001146  1  A9 FF 48 28          set_stat $ff
00114A  1  B4 13                ldy zp1,x
00114C  1  08                   php         ;test stores do not alter flags
00114D  1  98                   tya
00114E  1  49 C3                eor #$c3
001150  1  28                   plp
001151  1  9D 03 02             sta abst,x
001154  1  08                   php         ;flags after load/store sequence
001155  1  49 C3                eor #$c3
001157  1  DD 17 02             cmp abs1,x  ;test result
00115A  1  F0 03 20 FF          trap_ne
00115E  1  FF           
00115F  1  68                   pla         ;load status
001160  1  49 7D                eor_flag <~fnz ;mask bits not altered
001162  1  DD 1C 02             cmp fLDx,x  ;test flags
001165  1  F0 03 20 FF          trap_ne
001169  1  FF           
00116A  1  CA                   dex
00116B  1  10 D9                bpl tldy1
00116D  1               
00116D  1  A2 03                ldx #3
00116F  1               tldy2:
00116F  1  A9 00 48 28          set_stat 0
001173  1  BC 17 02             ldy abs1,x
001176  1  08                   php         ;test stores do not alter flags
001177  1  98                   tya
001178  1  49 C3                eor #$c3
00117A  1  A8                   tay
00117B  1  28                   plp
00117C  1  94 0C                sty zpt,x
00117E  1  08                   php         ;flags after load/store sequence
00117F  1  49 C3                eor #$c3
001181  1  D5 13                cmp zp1,x   ;test result
001183  1  F0 03 20 FF          trap_ne
001187  1  FF           
001188  1  68                   pla         ;load status
001189  1  49 30                eor_flag 0
00118B  1  DD 1C 02             cmp fLDx,x  ;test flags
00118E  1  F0 03 20 FF          trap_ne
001192  1  FF           
001193  1  CA                   dex
001194  1  10 D9                bpl tldy2
001196  1               
001196  1  A2 03                ldx #3
001198  1               tldy3:
001198  1  A9 FF 48 28          set_stat $ff
00119C  1  BC 17 02             ldy abs1,x
00119F  1  08                   php         ;test stores do not alter flags
0011A0  1  98                   tya
0011A1  1  49 C3                eor #$c3
0011A3  1  A8                   tay
0011A4  1  28                   plp
0011A5  1  94 0C                sty zpt,x
0011A7  1  08                   php         ;flags after load/store sequence
0011A8  1  49 C3                eor #$c3
0011AA  1  D5 13                cmp zp1,x   ;test result
0011AC  1  F0 03 20 FF          trap_ne
0011B0  1  FF           
0011B1  1  68                   pla         ;load status
0011B2  1  49 7D                eor_flag <~fnz ;mask bits not altered
0011B4  1  DD 1C 02             cmp fLDx,x  ;test flags
0011B7  1  F0 03 20 FF          trap_ne
0011BB  1  FF           
0011BC  1  CA                   dex
0011BD  1  10 D9                bpl tldy3
0011BF  1               
0011BF  1  A2 03                ldx #3      ;testing store result
0011C1  1  A0 00                ldy #0
0011C3  1  B5 0C        tsty:   lda zpt,x
0011C5  1  49 C3                eor #$c3
0011C7  1  D5 13                cmp zp1,x
0011C9  1  F0 03 20 FF          trap_ne     ;store to zp,x data
0011CD  1  FF           
0011CE  1  94 0C                sty zpt,x   ;clear
0011D0  1  BD 03 02             lda abst,x
0011D3  1  49 C3                eor #$c3
0011D5  1  DD 17 02             cmp abs1,x
0011D8  1  F0 03 20 FF          trap_ne     ;store to abs,x data
0011DC  1  FF           
0011DD  1  8A                   txa
0011DE  1  9D 03 02             sta abst,x  ;clear
0011E1  1  CA                   dex
0011E2  1  10 DF                bpl tsty
0011E4  1  AD 00 02 C9          next_test
0011E8  1  11 F0 03 20  
0011EC  1  FF FF A9 12  
0011F3  1               
0011F3  1               ; indexed wraparound test (only zp should wrap)
0011F3  1  A2 FD                ldx #3+$fa
0011F5  1  B4 19        tldy4:  ldy <(zp1-$fa),x   ;wrap on indexed zp
0011F7  1  98                   tya
0011F8  1  9D 09 01             sta abst-$fa,x      ;no STX abs,x!
0011FB  1  CA                   dex
0011FC  1  E0 FA                cpx #$fa
0011FE  1  B0 F5                bcs tldy4
001200  1  A2 FD                ldx #3+$fa
001202  1  BC 1D 01     tldy5:  ldy abs1-$fa,x      ;no wrap on indexed abs
001205  1  94 12                sty <(zpt-$fa),x
001207  1  CA                   dex
001208  1  E0 FA                cpx #$fa
00120A  1  B0 F6                bcs tldy5
00120C  1  A2 03                ldx #3      ;testing wraparound result
00120E  1  A0 00                ldy #0
001210  1  B5 0C        tsty1:  lda zpt,x
001212  1  D5 13                cmp zp1,x
001214  1  F0 03 20 FF          trap_ne     ;store to zp,x data
001218  1  FF           
001219  1  94 0C                sty zpt,x   ;clear
00121B  1  BD 03 02             lda abst,x
00121E  1  DD 17 02             cmp abs1,x
001221  1  F0 03 20 FF          trap_ne     ;store to abs,x data
001225  1  FF           
001226  1  8A                   txa
001227  1  9D 03 02             sta abst,x  ;clear
00122A  1  CA                   dex
00122B  1  10 E3                bpl tsty1
00122D  1  AD 00 02 C9          next_test
001231  1  12 F0 03 20  
001235  1  FF FF A9 13  
00123C  1               
00123C  1               ; LDX / STX - zp / abs / #
00123C  1  A9 00 48 28          set_stat 0
001240  1  A6 13                ldx zp1
001242  1  08                   php         ;test stores do not alter flags
001243  1  8A                   txa
001244  1  49 C3                eor #$c3
001246  1  AA                   tax
001247  1  28                   plp
001248  1  8E 03 02             stx abst
00124B  1  08                   php         ;flags after load/store sequence
00124C  1  49 C3                eor #$c3
00124E  1  AA                   tax
00124F  1  E0 C3                cpx #$c3    ;test result
001251  1  F0 03 20 FF          trap_ne
001255  1  FF           
001256  1  68                   pla         ;load status
001257  1  49 30                eor_flag 0
001259  1  CD 1C 02             cmp fLDx    ;test flags
00125C  1  F0 03 20 FF          trap_ne
001260  1  FF           
001261  1  A9 00 48 28          set_stat 0
001265  1  A6 14                ldx zp1+1
001267  1  08                   php         ;test stores do not alter flags
001268  1  8A                   txa
001269  1  49 C3                eor #$c3
00126B  1  AA                   tax
00126C  1  28                   plp
00126D  1  8E 04 02             stx abst+1
001270  1  08                   php         ;flags after load/store sequence
001271  1  49 C3                eor #$c3
001273  1  AA                   tax
001274  1  E0 82                cpx #$82    ;test result
001276  1  F0 03 20 FF          trap_ne
00127A  1  FF           
00127B  1  68                   pla         ;load status
00127C  1  49 30                eor_flag 0
00127E  1  CD 1D 02             cmp fLDx+1  ;test flags
001281  1  F0 03 20 FF          trap_ne
001285  1  FF           
001286  1  A9 00 48 28          set_stat 0
00128A  1  A6 15                ldx zp1+2
00128C  1  08                   php         ;test stores do not alter flags
00128D  1  8A                   txa
00128E  1  49 C3                eor #$c3
001290  1  AA                   tax
001291  1  28                   plp
001292  1  8E 05 02             stx abst+2
001295  1  08                   php         ;flags after load/store sequence
001296  1  49 C3                eor #$c3
001298  1  AA                   tax
001299  1  E0 41                cpx #$41    ;test result
00129B  1  F0 03 20 FF          trap_ne
00129F  1  FF           
0012A0  1  68                   pla         ;load status
0012A1  1  49 30                eor_flag 0
0012A3  1  CD 1E 02             cmp fLDx+2  ;test flags
0012A6  1  F0 03 20 FF          trap_ne
0012AA  1  FF           
0012AB  1  A9 00 48 28          set_stat 0
0012AF  1  A6 16                ldx zp1+3
0012B1  1  08                   php         ;test stores do not alter flags
0012B2  1  8A                   txa
0012B3  1  49 C3                eor #$c3
0012B5  1  AA                   tax
0012B6  1  28                   plp
0012B7  1  8E 06 02             stx abst+3
0012BA  1  08                   php         ;flags after load/store sequence
0012BB  1  49 C3                eor #$c3
0012BD  1  AA                   tax
0012BE  1  E0 00                cpx #0      ;test result
0012C0  1  F0 03 20 FF          trap_ne
0012C4  1  FF           
0012C5  1  68                   pla         ;load status
0012C6  1  49 30                eor_flag 0
0012C8  1  CD 1F 02             cmp fLDx+3  ;test flags
0012CB  1  F0 03 20 FF          trap_ne
0012CF  1  FF           
0012D0  1               
0012D0  1  A9 FF 48 28          set_stat $ff
0012D4  1  A6 13                ldx zp1
0012D6  1  08                   php         ;test stores do not alter flags
0012D7  1  8A                   txa
0012D8  1  49 C3                eor #$c3
0012DA  1  AA                   tax
0012DB  1  28                   plp
0012DC  1  8E 03 02             stx abst
0012DF  1  08                   php         ;flags after load/store sequence
0012E0  1  49 C3                eor #$c3
0012E2  1  AA                   tax
0012E3  1  E0 C3                cpx #$c3    ;test result
0012E5  1  F0 03 20 FF          trap_ne     ;
0012E9  1  FF           
0012EA  1  68                   pla         ;load status
0012EB  1  49 7D                eor_flag <~fnz ;mask bits not altered
0012ED  1  CD 1C 02             cmp fLDx    ;test flags
0012F0  1  F0 03 20 FF          trap_ne
0012F4  1  FF           
0012F5  1  A9 FF 48 28          set_stat $ff
0012F9  1  A6 14                ldx zp1+1
0012FB  1  08                   php         ;test stores do not alter flags
0012FC  1  8A                   txa
0012FD  1  49 C3                eor #$c3
0012FF  1  AA                   tax
001300  1  28                   plp
001301  1  8E 04 02             stx abst+1
001304  1  08                   php         ;flags after load/store sequence
001305  1  49 C3                eor #$c3
001307  1  AA                   tax
001308  1  E0 82                cpx #$82    ;test result
00130A  1  F0 03 20 FF          trap_ne
00130E  1  FF           
00130F  1  68                   pla         ;load status
001310  1  49 7D                eor_flag <~fnz ;mask bits not altered
001312  1  CD 1D 02             cmp fLDx+1  ;test flags
001315  1  F0 03 20 FF          trap_ne
001319  1  FF           
00131A  1  A9 FF 48 28          set_stat $ff
00131E  1  A6 15                ldx zp1+2
001320  1  08                   php         ;test stores do not alter flags
001321  1  8A                   txa
001322  1  49 C3                eor #$c3
001324  1  AA                   tax
001325  1  28                   plp
001326  1  8E 05 02             stx abst+2
001329  1  08                   php         ;flags after load/store sequence
00132A  1  49 C3                eor #$c3
00132C  1  AA                   tax
00132D  1  E0 41                cpx #$41    ;test result
00132F  1  F0 03 20 FF          trap_ne     ;
001333  1  FF           
001334  1  68                   pla         ;load status
001335  1  49 7D                eor_flag <~fnz ;mask bits not altered
001337  1  CD 1E 02             cmp fLDx+2  ;test flags
00133A  1  F0 03 20 FF          trap_ne
00133E  1  FF           
00133F  1  A9 FF 48 28          set_stat $ff
001343  1  A6 16                ldx zp1+3
001345  1  08                   php         ;test stores do not alter flags
001346  1  8A                   txa
001347  1  49 C3                eor #$c3
001349  1  AA                   tax
00134A  1  28                   plp
00134B  1  8E 06 02             stx abst+3
00134E  1  08                   php         ;flags after load/store sequence
00134F  1  49 C3                eor #$c3
001351  1  AA                   tax
001352  1  E0 00                cpx #0      ;test result
001354  1  F0 03 20 FF          trap_ne
001358  1  FF           
001359  1  68                   pla         ;load status
00135A  1  49 7D                eor_flag <~fnz ;mask bits not altered
00135C  1  CD 1F 02             cmp fLDx+3  ;test flags
00135F  1  F0 03 20 FF          trap_ne
001363  1  FF           
001364  1               
001364  1  A9 00 48 28          set_stat 0
001368  1  AE 17 02             ldx abs1
00136B  1  08                   php         ;test stores do not alter flags
00136C  1  8A                   txa
00136D  1  49 C3                eor #$c3
00136F  1  AA                   tax
001370  1  28                   plp
001371  1  86 0C                stx zpt
001373  1  08                   php         ;flags after load/store sequence
001374  1  49 C3                eor #$c3
001376  1  C5 13                cmp zp1     ;test result
001378  1  F0 03 20 FF          trap_ne
00137C  1  FF           
00137D  1  68                   pla         ;load status
00137E  1  49 30                eor_flag 0
001380  1  CD 1C 02             cmp fLDx    ;test flags
001383  1  F0 03 20 FF          trap_ne
001387  1  FF           
001388  1  A9 00 48 28          set_stat 0
00138C  1  AE 18 02             ldx abs1+1
00138F  1  08                   php         ;test stores do not alter flags
001390  1  8A                   txa
001391  1  49 C3                eor #$c3
001393  1  AA                   tax
001394  1  28                   plp
001395  1  86 0D                stx zpt+1
001397  1  08                   php         ;flags after load/store sequence
001398  1  49 C3                eor #$c3
00139A  1  C5 14                cmp zp1+1   ;test result
00139C  1  F0 03 20 FF          trap_ne
0013A0  1  FF           
0013A1  1  68                   pla         ;load status
0013A2  1  49 30                eor_flag 0
0013A4  1  CD 1D 02             cmp fLDx+1  ;test flags
0013A7  1  F0 03 20 FF          trap_ne
0013AB  1  FF           
0013AC  1  A9 00 48 28          set_stat 0
0013B0  1  AE 19 02             ldx abs1+2
0013B3  1  08                   php         ;test stores do not alter flags
0013B4  1  8A                   txa
0013B5  1  49 C3                eor #$c3
0013B7  1  AA                   tax
0013B8  1  28                   plp
0013B9  1  86 0E                stx zpt+2
0013BB  1  08                   php         ;flags after load/store sequence
0013BC  1  49 C3                eor #$c3
0013BE  1  C5 15                cmp zp1+2   ;test result
0013C0  1  F0 03 20 FF          trap_ne
0013C4  1  FF           
0013C5  1  68                   pla         ;load status
0013C6  1  49 30                eor_flag 0
0013C8  1  CD 1E 02             cmp fLDx+2  ;test flags
0013CB  1  F0 03 20 FF          trap_ne
0013CF  1  FF           
0013D0  1  A9 00 48 28          set_stat 0
0013D4  1  AE 1A 02             ldx abs1+3
0013D7  1  08                   php         ;test stores do not alter flags
0013D8  1  8A                   txa
0013D9  1  49 C3                eor #$c3
0013DB  1  AA                   tax
0013DC  1  28                   plp
0013DD  1  86 0F                stx zpt+3
0013DF  1  08                   php         ;flags after load/store sequence
0013E0  1  49 C3                eor #$c3
0013E2  1  C5 16                cmp zp1+3   ;test result
0013E4  1  F0 03 20 FF          trap_ne
0013E8  1  FF           
0013E9  1  68                   pla         ;load status
0013EA  1  49 30                eor_flag 0
0013EC  1  CD 1F 02             cmp fLDx+3  ;test flags
0013EF  1  F0 03 20 FF          trap_ne
0013F3  1  FF           
0013F4  1               
0013F4  1  A9 FF 48 28          set_stat $ff
0013F8  1  AE 17 02             ldx abs1
0013FB  1  08                   php         ;test stores do not alter flags
0013FC  1  8A                   txa
0013FD  1  49 C3                eor #$c3
0013FF  1  AA                   tax
001400  1  28                   plp
001401  1  86 0C                stx zpt
001403  1  08                   php         ;flags after load/store sequence
001404  1  49 C3                eor #$c3
001406  1  AA                   tax
001407  1  E4 13                cpx zp1     ;test result
001409  1  F0 03 20 FF          trap_ne
00140D  1  FF           
00140E  1  68                   pla         ;load status
00140F  1  49 7D                eor_flag <~fnz ;mask bits not altered
001411  1  CD 1C 02             cmp fLDx    ;test flags
001414  1  F0 03 20 FF          trap_ne
001418  1  FF           
001419  1  A9 FF 48 28          set_stat $ff
00141D  1  AE 18 02             ldx abs1+1
001420  1  08                   php         ;test stores do not alter flags
001421  1  8A                   txa
001422  1  49 C3                eor #$c3
001424  1  AA                   tax
001425  1  28                   plp
001426  1  86 0D                stx zpt+1
001428  1  08                   php         ;flags after load/store sequence
001429  1  49 C3                eor #$c3
00142B  1  AA                   tax
00142C  1  E4 14                cpx zp1+1   ;test result
00142E  1  F0 03 20 FF          trap_ne
001432  1  FF           
001433  1  68                   pla         ;load status
001434  1  49 7D                eor_flag <~fnz ;mask bits not altered
001436  1  CD 1D 02             cmp fLDx+1  ;test flags
001439  1  F0 03 20 FF          trap_ne
00143D  1  FF           
00143E  1  A9 FF 48 28          set_stat $ff
001442  1  AE 19 02             ldx abs1+2
001445  1  08                   php         ;test stores do not alter flags
001446  1  8A                   txa
001447  1  49 C3                eor #$c3
001449  1  AA                   tax
00144A  1  28                   plp
00144B  1  86 0E                stx zpt+2
00144D  1  08                   php         ;flags after load/store sequence
00144E  1  49 C3                eor #$c3
001450  1  AA                   tax
001451  1  E4 15                cpx zp1+2   ;test result
001453  1  F0 03 20 FF          trap_ne
001457  1  FF           
001458  1  68                   pla         ;load status
001459  1  49 7D                eor_flag <~fnz ;mask bits not altered
00145B  1  CD 1E 02             cmp fLDx+2  ;test flags
00145E  1  F0 03 20 FF          trap_ne
001462  1  FF           
001463  1  A9 FF 48 28          set_stat $ff
001467  1  AE 1A 02             ldx abs1+3
00146A  1  08                   php         ;test stores do not alter flags
00146B  1  8A                   txa
00146C  1  49 C3                eor #$c3
00146E  1  AA                   tax
00146F  1  28                   plp
001470  1  86 0F                stx zpt+3
001472  1  08                   php         ;flags after load/store sequence
001473  1  49 C3                eor #$c3
001475  1  AA                   tax
001476  1  E4 16                cpx zp1+3   ;test result
001478  1  F0 03 20 FF          trap_ne
00147C  1  FF           
00147D  1  68                   pla         ;load status
00147E  1  49 7D                eor_flag <~fnz ;mask bits not altered
001480  1  CD 1F 02             cmp fLDx+3  ;test flags
001483  1  F0 03 20 FF          trap_ne
001487  1  FF           
001488  1               
001488  1  A9 00 48 28          set_stat 0
00148C  1  A2 C3                ldx #$c3
00148E  1  08                   php
00148F  1  EC 17 02             cpx abs1    ;test result
001492  1  F0 03 20 FF          trap_ne
001496  1  FF           
001497  1  68                   pla         ;load status
001498  1  49 30                eor_flag 0
00149A  1  CD 1C 02             cmp fLDx    ;test flags
00149D  1  F0 03 20 FF          trap_ne
0014A1  1  FF           
0014A2  1  A9 00 48 28          set_stat 0
0014A6  1  A2 82                ldx #$82
0014A8  1  08                   php
0014A9  1  EC 18 02             cpx abs1+1  ;test result
0014AC  1  F0 03 20 FF          trap_ne
0014B0  1  FF           
0014B1  1  68                   pla         ;load status
0014B2  1  49 30                eor_flag 0
0014B4  1  CD 1D 02             cmp fLDx+1  ;test flags
0014B7  1  F0 03 20 FF          trap_ne
0014BB  1  FF           
0014BC  1  A9 00 48 28          set_stat 0
0014C0  1  A2 41                ldx #$41
0014C2  1  08                   php
0014C3  1  EC 19 02             cpx abs1+2  ;test result
0014C6  1  F0 03 20 FF          trap_ne
0014CA  1  FF           
0014CB  1  68                   pla         ;load status
0014CC  1  49 30                eor_flag 0
0014CE  1  CD 1E 02             cmp fLDx+2  ;test flags
0014D1  1  F0 03 20 FF          trap_ne
0014D5  1  FF           
0014D6  1  A9 00 48 28          set_stat 0
0014DA  1  A2 00                ldx #0
0014DC  1  08                   php
0014DD  1  EC 1A 02             cpx abs1+3  ;test result
0014E0  1  F0 03 20 FF          trap_ne
0014E4  1  FF           
0014E5  1  68                   pla         ;load status
0014E6  1  49 30                eor_flag 0
0014E8  1  CD 1F 02             cmp fLDx+3  ;test flags
0014EB  1  F0 03 20 FF          trap_ne
0014EF  1  FF           
0014F0  1               
0014F0  1  A9 FF 48 28          set_stat $ff
0014F4  1  A2 C3                ldx #$c3
0014F6  1  08                   php
0014F7  1  EC 17 02             cpx abs1    ;test result
0014FA  1  F0 03 20 FF          trap_ne
0014FE  1  FF           
0014FF  1  68                   pla         ;load status
001500  1  49 7D                eor_flag <~fnz ;mask bits not altered
001502  1  CD 1C 02             cmp fLDx    ;test flags
001505  1  F0 03 20 FF          trap_ne
001509  1  FF           
00150A  1  A9 FF 48 28          set_stat $ff
00150E  1  A2 82                ldx #$82
001510  1  08                   php
001511  1  EC 18 02             cpx abs1+1  ;test result
001514  1  F0 03 20 FF          trap_ne
001518  1  FF           
001519  1  68                   pla         ;load status
00151A  1  49 7D                eor_flag <~fnz ;mask bits not altered
00151C  1  CD 1D 02             cmp fLDx+1  ;test flags
00151F  1  F0 03 20 FF          trap_ne
001523  1  FF           
001524  1  A9 FF 48 28          set_stat $ff
001528  1  A2 41                ldx #$41
00152A  1  08                   php
00152B  1  EC 19 02             cpx abs1+2  ;test result
00152E  1  F0 03 20 FF          trap_ne
001532  1  FF           
001533  1  68                   pla         ;load status
001534  1  49 7D                eor_flag <~fnz ;mask bits not altered
001536  1  CD 1E 02             cmp fLDx+2  ;test flags
001539  1  F0 03 20 FF          trap_ne
00153D  1  FF           
00153E  1  A9 FF 48 28          set_stat $ff
001542  1  A2 00                ldx #0
001544  1  08                   php
001545  1  EC 1A 02             cpx abs1+3  ;test result
001548  1  F0 03 20 FF          trap_ne
00154C  1  FF           
00154D  1  68                   pla         ;load status
00154E  1  49 7D                eor_flag <~fnz ;mask bits not altered
001550  1  CD 1F 02             cmp fLDx+3  ;test flags
001553  1  F0 03 20 FF          trap_ne
001557  1  FF           
001558  1               
001558  1  A2 00                ldx #0
00155A  1  A5 0C                lda zpt
00155C  1  49 C3                eor #$c3
00155E  1  C5 13                cmp zp1
001560  1  F0 03 20 FF          trap_ne     ;store to zp data
001564  1  FF           
001565  1  86 0C                stx zpt     ;clear
001567  1  AD 03 02             lda abst
00156A  1  49 C3                eor #$c3
00156C  1  CD 17 02             cmp abs1
00156F  1  F0 03 20 FF          trap_ne     ;store to abs data
001573  1  FF           
001574  1  8E 03 02             stx abst    ;clear
001577  1  A5 0D                lda zpt+1
001579  1  49 C3                eor #$c3
00157B  1  C5 14                cmp zp1+1
00157D  1  F0 03 20 FF          trap_ne     ;store to zp data
001581  1  FF           
001582  1  86 0D                stx zpt+1   ;clear
001584  1  AD 04 02             lda abst+1
001587  1  49 C3                eor #$c3
001589  1  CD 18 02             cmp abs1+1
00158C  1  F0 03 20 FF          trap_ne     ;store to abs data
001590  1  FF           
001591  1  8E 04 02             stx abst+1  ;clear
001594  1  A5 0E                lda zpt+2
001596  1  49 C3                eor #$c3
001598  1  C5 15                cmp zp1+2
00159A  1  F0 03 20 FF          trap_ne     ;store to zp data
00159E  1  FF           
00159F  1  86 0E                stx zpt+2   ;clear
0015A1  1  AD 05 02             lda abst+2
0015A4  1  49 C3                eor #$c3
0015A6  1  CD 19 02             cmp abs1+2
0015A9  1  F0 03 20 FF          trap_ne     ;store to abs data
0015AD  1  FF           
0015AE  1  8E 05 02             stx abst+2  ;clear
0015B1  1  A5 0F                lda zpt+3
0015B3  1  49 C3                eor #$c3
0015B5  1  C5 16                cmp zp1+3
0015B7  1  F0 03 20 FF          trap_ne     ;store to zp data
0015BB  1  FF           
0015BC  1  86 0F                stx zpt+3   ;clear
0015BE  1  AD 06 02             lda abst+3
0015C1  1  49 C3                eor #$c3
0015C3  1  CD 1A 02             cmp abs1+3
0015C6  1  F0 03 20 FF          trap_ne     ;store to abs data
0015CA  1  FF           
0015CB  1  8E 06 02             stx abst+3  ;clear
0015CE  1  AD 00 02 C9          next_test
0015D2  1  13 F0 03 20  
0015D6  1  FF FF A9 14  
0015DD  1               
0015DD  1               ; LDY / STY - zp / abs / #
0015DD  1  A9 00 48 28          set_stat 0
0015E1  1  A4 13                ldy zp1
0015E3  1  08                   php         ;test stores do not alter flags
0015E4  1  98                   tya
0015E5  1  49 C3                eor #$c3
0015E7  1  A8                   tay
0015E8  1  28                   plp
0015E9  1  8C 03 02             sty abst
0015EC  1  08                   php         ;flags after load/store sequence
0015ED  1  49 C3                eor #$c3
0015EF  1  A8                   tay
0015F0  1  C0 C3                cpy #$c3    ;test result
0015F2  1  F0 03 20 FF          trap_ne
0015F6  1  FF           
0015F7  1  68                   pla         ;load status
0015F8  1  49 30                eor_flag 0
0015FA  1  CD 1C 02             cmp fLDx    ;test flags
0015FD  1  F0 03 20 FF          trap_ne
001601  1  FF           
001602  1  A9 00 48 28          set_stat 0
001606  1  A4 14                ldy zp1+1
001608  1  08                   php         ;test stores do not alter flags
001609  1  98                   tya
00160A  1  49 C3                eor #$c3
00160C  1  A8                   tay
00160D  1  28                   plp
00160E  1  8C 04 02             sty abst+1
001611  1  08                   php         ;flags after load/store sequence
001612  1  49 C3                eor #$c3
001614  1  A8                   tay
001615  1  C0 82                cpy #$82    ;test result
001617  1  F0 03 20 FF          trap_ne
00161B  1  FF           
00161C  1  68                   pla         ;load status
00161D  1  49 30                eor_flag 0
00161F  1  CD 1D 02             cmp fLDx+1  ;test flags
001622  1  F0 03 20 FF          trap_ne
001626  1  FF           
001627  1  A9 00 48 28          set_stat 0
00162B  1  A4 15                ldy zp1+2
00162D  1  08                   php         ;test stores do not alter flags
00162E  1  98                   tya
00162F  1  49 C3                eor #$c3
001631  1  A8                   tay
001632  1  28                   plp
001633  1  8C 05 02             sty abst+2
001636  1  08                   php         ;flags after load/store sequence
001637  1  49 C3                eor #$c3
001639  1  A8                   tay
00163A  1  C0 41                cpy #$41    ;test result
00163C  1  F0 03 20 FF          trap_ne
001640  1  FF           
001641  1  68                   pla         ;load status
001642  1  49 30                eor_flag 0
001644  1  CD 1E 02             cmp fLDx+2  ;test flags
001647  1  F0 03 20 FF          trap_ne
00164B  1  FF           
00164C  1  A9 00 48 28          set_stat 0
001650  1  A4 16                ldy zp1+3
001652  1  08                   php         ;test stores do not alter flags
001653  1  98                   tya
001654  1  49 C3                eor #$c3
001656  1  A8                   tay
001657  1  28                   plp
001658  1  8C 06 02             sty abst+3
00165B  1  08                   php         ;flags after load/store sequence
00165C  1  49 C3                eor #$c3
00165E  1  A8                   tay
00165F  1  C0 00                cpy #0      ;test result
001661  1  F0 03 20 FF          trap_ne
001665  1  FF           
001666  1  68                   pla         ;load status
001667  1  49 30                eor_flag 0
001669  1  CD 1F 02             cmp fLDx+3  ;test flags
00166C  1  F0 03 20 FF          trap_ne
001670  1  FF           
001671  1               
001671  1  A9 FF 48 28          set_stat $ff
001675  1  A4 13                ldy zp1
001677  1  08                   php         ;test stores do not alter flags
001678  1  98                   tya
001679  1  49 C3                eor #$c3
00167B  1  A8                   tay
00167C  1  28                   plp
00167D  1  8C 03 02             sty abst
001680  1  08                   php         ;flags after load/store sequence
001681  1  49 C3                eor #$c3
001683  1  A8                   tay
001684  1  C0 C3                cpy #$c3    ;test result
001686  1  F0 03 20 FF          trap_ne
00168A  1  FF           
00168B  1  68                   pla         ;load status
00168C  1  49 7D                eor_flag <~fnz ;mask bits not altered
00168E  1  CD 1C 02             cmp fLDx    ;test flags
001691  1  F0 03 20 FF          trap_ne
001695  1  FF           
001696  1  A9 FF 48 28          set_stat $ff
00169A  1  A4 14                ldy zp1+1
00169C  1  08                   php         ;test stores do not alter flags
00169D  1  98                   tya
00169E  1  49 C3                eor #$c3
0016A0  1  A8                   tay
0016A1  1  28                   plp
0016A2  1  8C 04 02             sty abst+1
0016A5  1  08                   php         ;flags after load/store sequence
0016A6  1  49 C3                eor #$c3
0016A8  1  A8                   tay
0016A9  1  C0 82                cpy #$82   ;test result
0016AB  1  F0 03 20 FF          trap_ne
0016AF  1  FF           
0016B0  1  68                   pla         ;load status
0016B1  1  49 7D                eor_flag <~fnz ;mask bits not altered
0016B3  1  CD 1D 02             cmp fLDx+1  ;test flags
0016B6  1  F0 03 20 FF          trap_ne
0016BA  1  FF           
0016BB  1  A9 FF 48 28          set_stat $ff
0016BF  1  A4 15                ldy zp1+2
0016C1  1  08                   php         ;test stores do not alter flags
0016C2  1  98                   tya
0016C3  1  49 C3                eor #$c3
0016C5  1  A8                   tay
0016C6  1  28                   plp
0016C7  1  8C 05 02             sty abst+2
0016CA  1  08                   php         ;flags after load/store sequence
0016CB  1  49 C3                eor #$c3
0016CD  1  A8                   tay
0016CE  1  C0 41                cpy #$41    ;test result
0016D0  1  F0 03 20 FF          trap_ne
0016D4  1  FF           
0016D5  1  68                   pla         ;load status
0016D6  1  49 7D                eor_flag <~fnz ;mask bits not altered
0016D8  1  CD 1E 02             cmp fLDx+2  ;test flags
0016DB  1  F0 03 20 FF          trap_ne
0016DF  1  FF           
0016E0  1  A9 FF 48 28          set_stat $ff
0016E4  1  A4 16                ldy zp1+3
0016E6  1  08                   php         ;test stores do not alter flags
0016E7  1  98                   tya
0016E8  1  49 C3                eor #$c3
0016EA  1  A8                   tay
0016EB  1  28                   plp
0016EC  1  8C 06 02             sty abst+3
0016EF  1  08                   php         ;flags after load/store sequence
0016F0  1  49 C3                eor #$c3
0016F2  1  A8                   tay
0016F3  1  C0 00                cpy #0      ;test result
0016F5  1  F0 03 20 FF          trap_ne
0016F9  1  FF           
0016FA  1  68                   pla         ;load status
0016FB  1  49 7D                eor_flag <~fnz ;mask bits not altered
0016FD  1  CD 1F 02             cmp fLDx+3  ;test flags
001700  1  F0 03 20 FF          trap_ne
001704  1  FF           
001705  1               
001705  1  A9 00 48 28          set_stat 0
001709  1  AC 17 02             ldy abs1
00170C  1  08                   php         ;test stores do not alter flags
00170D  1  98                   tya
00170E  1  49 C3                eor #$c3
001710  1  A8                   tay
001711  1  28                   plp
001712  1  84 0C                sty zpt
001714  1  08                   php         ;flags after load/store sequence
001715  1  49 C3                eor #$c3
001717  1  A8                   tay
001718  1  C4 13                cpy zp1     ;test result
00171A  1  F0 03 20 FF          trap_ne
00171E  1  FF           
00171F  1  68                   pla         ;load status
001720  1  49 30                eor_flag 0
001722  1  CD 1C 02             cmp fLDx    ;test flags
001725  1  F0 03 20 FF          trap_ne
001729  1  FF           
00172A  1  A9 00 48 28          set_stat 0
00172E  1  AC 18 02             ldy abs1+1
001731  1  08                   php         ;test stores do not alter flags
001732  1  98                   tya
001733  1  49 C3                eor #$c3
001735  1  A8                   tay
001736  1  28                   plp
001737  1  84 0D                sty zpt+1
001739  1  08                   php         ;flags after load/store sequence
00173A  1  49 C3                eor #$c3
00173C  1  A8                   tay
00173D  1  C4 14                cpy zp1+1   ;test result
00173F  1  F0 03 20 FF          trap_ne
001743  1  FF           
001744  1  68                   pla         ;load status
001745  1  49 30                eor_flag 0
001747  1  CD 1D 02             cmp fLDx+1  ;test flags
00174A  1  F0 03 20 FF          trap_ne
00174E  1  FF           
00174F  1  A9 00 48 28          set_stat 0
001753  1  AC 19 02             ldy abs1+2
001756  1  08                   php         ;test stores do not alter flags
001757  1  98                   tya
001758  1  49 C3                eor #$c3
00175A  1  A8                   tay
00175B  1  28                   plp
00175C  1  84 0E                sty zpt+2
00175E  1  08                   php         ;flags after load/store sequence
00175F  1  49 C3                eor #$c3
001761  1  A8                   tay
001762  1  C4 15                cpy zp1+2   ;test result
001764  1  F0 03 20 FF          trap_ne
001768  1  FF           
001769  1  68                   pla         ;load status
00176A  1  49 30                eor_flag 0
00176C  1  CD 1E 02             cmp fLDx+2  ;test flags
00176F  1  F0 03 20 FF          trap_ne
001773  1  FF           
001774  1  A9 00 48 28          set_stat 0
001778  1  AC 1A 02             ldy abs1+3
00177B  1  08                   php         ;test stores do not alter flags
00177C  1  98                   tya
00177D  1  49 C3                eor #$c3
00177F  1  A8                   tay
001780  1  28                   plp
001781  1  84 0F                sty zpt+3
001783  1  08                   php         ;flags after load/store sequence
001784  1  49 C3                eor #$c3
001786  1  A8                   tay
001787  1  C4 16                cpy zp1+3   ;test result
001789  1  F0 03 20 FF          trap_ne
00178D  1  FF           
00178E  1  68                   pla         ;load status
00178F  1  49 30                eor_flag 0
001791  1  CD 1F 02             cmp fLDx+3  ;test flags
001794  1  F0 03 20 FF          trap_ne
001798  1  FF           
001799  1               
001799  1  A9 FF 48 28          set_stat $ff
00179D  1  AC 17 02             ldy abs1
0017A0  1  08                   php         ;test stores do not alter flags
0017A1  1  98                   tya
0017A2  1  49 C3                eor #$c3
0017A4  1  A8                   tay
0017A5  1  28                   plp
0017A6  1  84 0C                sty zpt
0017A8  1  08                   php         ;flags after load/store sequence
0017A9  1  49 C3                eor #$c3
0017AB  1  A8                   tay
0017AC  1  C5 13                cmp zp1     ;test result
0017AE  1  F0 03 20 FF          trap_ne
0017B2  1  FF           
0017B3  1  68                   pla         ;load status
0017B4  1  49 7D                eor_flag <~fnz ;mask bits not altered
0017B6  1  CD 1C 02             cmp fLDx    ;test flags
0017B9  1  F0 03 20 FF          trap_ne
0017BD  1  FF           
0017BE  1  A9 FF 48 28          set_stat $ff
0017C2  1  AC 18 02             ldy abs1+1
0017C5  1  08                   php         ;test stores do not alter flags
0017C6  1  98                   tya
0017C7  1  49 C3                eor #$c3
0017C9  1  A8                   tay
0017CA  1  28                   plp
0017CB  1  84 0D                sty zpt+1
0017CD  1  08                   php         ;flags after load/store sequence
0017CE  1  49 C3                eor #$c3
0017D0  1  A8                   tay
0017D1  1  C5 14                cmp zp1+1   ;test result
0017D3  1  F0 03 20 FF          trap_ne
0017D7  1  FF           
0017D8  1  68                   pla         ;load status
0017D9  1  49 7D                eor_flag <~fnz ;mask bits not altered
0017DB  1  CD 1D 02             cmp fLDx+1  ;test flags
0017DE  1  F0 03 20 FF          trap_ne
0017E2  1  FF           
0017E3  1  A9 FF 48 28          set_stat $ff
0017E7  1  AC 19 02             ldy abs1+2
0017EA  1  08                   php         ;test stores do not alter flags
0017EB  1  98                   tya
0017EC  1  49 C3                eor #$c3
0017EE  1  A8                   tay
0017EF  1  28                   plp
0017F0  1  84 0E                sty zpt+2
0017F2  1  08                   php         ;flags after load/store sequence
0017F3  1  49 C3                eor #$c3
0017F5  1  A8                   tay
0017F6  1  C5 15                cmp zp1+2   ;test result
0017F8  1  F0 03 20 FF          trap_ne
0017FC  1  FF           
0017FD  1  68                   pla         ;load status
0017FE  1  49 7D                eor_flag <~fnz ;mask bits not altered
001800  1  CD 1E 02             cmp fLDx+2  ;test flags
001803  1  F0 03 20 FF          trap_ne
001807  1  FF           
001808  1  A9 FF 48 28          set_stat $ff
00180C  1  AC 1A 02             ldy abs1+3
00180F  1  08                   php         ;test stores do not alter flags
001810  1  98                   tya
001811  1  49 C3                eor #$c3
001813  1  A8                   tay
001814  1  28                   plp
001815  1  84 0F                sty zpt+3
001817  1  08                   php         ;flags after load/store sequence
001818  1  49 C3                eor #$c3
00181A  1  A8                   tay
00181B  1  C5 16                cmp zp1+3   ;test result
00181D  1  F0 03 20 FF          trap_ne
001821  1  FF           
001822  1  68                   pla         ;load status
001823  1  49 7D                eor_flag <~fnz ;mask bits not altered
001825  1  CD 1F 02             cmp fLDx+3  ;test flags
001828  1  F0 03 20 FF          trap_ne
00182C  1  FF           
00182D  1               
00182D  1               
00182D  1  A9 00 48 28          set_stat 0
001831  1  A0 C3                ldy #$c3
001833  1  08                   php
001834  1  CC 17 02             cpy abs1    ;test result
001837  1  F0 03 20 FF          trap_ne
00183B  1  FF           
00183C  1  68                   pla         ;load status
00183D  1  49 30                eor_flag 0
00183F  1  CD 1C 02             cmp fLDx    ;test flags
001842  1  F0 03 20 FF          trap_ne
001846  1  FF           
001847  1  A9 00 48 28          set_stat 0
00184B  1  A0 82                ldy #$82
00184D  1  08                   php
00184E  1  CC 18 02             cpy abs1+1  ;test result
001851  1  F0 03 20 FF          trap_ne
001855  1  FF           
001856  1  68                   pla         ;load status
001857  1  49 30                eor_flag 0
001859  1  CD 1D 02             cmp fLDx+1  ;test flags
00185C  1  F0 03 20 FF          trap_ne
001860  1  FF           
001861  1  A9 00 48 28          set_stat 0
001865  1  A0 41                ldy #$41
001867  1  08                   php
001868  1  CC 19 02             cpy abs1+2  ;test result
00186B  1  F0 03 20 FF          trap_ne
00186F  1  FF           
001870  1  68                   pla         ;load status
001871  1  49 30                eor_flag 0
001873  1  CD 1E 02             cmp fLDx+2  ;test flags
001876  1  F0 03 20 FF          trap_ne
00187A  1  FF           
00187B  1  A9 00 48 28          set_stat 0
00187F  1  A0 00                ldy #0
001881  1  08                   php
001882  1  CC 1A 02             cpy abs1+3  ;test result
001885  1  F0 03 20 FF          trap_ne
001889  1  FF           
00188A  1  68                   pla         ;load status
00188B  1  49 30                eor_flag 0
00188D  1  CD 1F 02             cmp fLDx+3  ;test flags
001890  1  F0 03 20 FF          trap_ne
001894  1  FF           
001895  1               
001895  1  A9 FF 48 28          set_stat $ff
001899  1  A0 C3                ldy #$c3
00189B  1  08                   php
00189C  1  CC 17 02             cpy abs1    ;test result
00189F  1  F0 03 20 FF          trap_ne
0018A3  1  FF           
0018A4  1  68                   pla         ;load status
0018A5  1  49 7D                eor_flag <~fnz ;mask bits not altered
0018A7  1  CD 1C 02             cmp fLDx    ;test flags
0018AA  1  F0 03 20 FF          trap_ne
0018AE  1  FF           
0018AF  1  A9 FF 48 28          set_stat $ff
0018B3  1  A0 82                ldy #$82
0018B5  1  08                   php
0018B6  1  CC 18 02             cpy abs1+1  ;test result
0018B9  1  F0 03 20 FF          trap_ne
0018BD  1  FF           
0018BE  1  68                   pla         ;load status
0018BF  1  49 7D                eor_flag <~fnz ;mask bits not altered
0018C1  1  CD 1D 02             cmp fLDx+1  ;test flags
0018C4  1  F0 03 20 FF          trap_ne
0018C8  1  FF           
0018C9  1  A9 FF 48 28          set_stat $ff
0018CD  1  A0 41                ldy #$41
0018CF  1  08                   php
0018D0  1  CC 19 02             cpy abs1+2   ;test result
0018D3  1  F0 03 20 FF          trap_ne
0018D7  1  FF           
0018D8  1  68                   pla         ;load status
0018D9  1  49 7D                eor_flag <~fnz ;mask bits not altered
0018DB  1  CD 1E 02             cmp fLDx+2  ;test flags
0018DE  1  F0 03 20 FF          trap_ne
0018E2  1  FF           
0018E3  1  A9 FF 48 28          set_stat $ff
0018E7  1  A0 00                ldy #0
0018E9  1  08                   php
0018EA  1  CC 1A 02             cpy abs1+3  ;test result
0018ED  1  F0 03 20 FF          trap_ne
0018F1  1  FF           
0018F2  1  68                   pla         ;load status
0018F3  1  49 7D                eor_flag <~fnz ;mask bits not altered
0018F5  1  CD 1F 02             cmp fLDx+3  ;test flags
0018F8  1  F0 03 20 FF          trap_ne
0018FC  1  FF           
0018FD  1               
0018FD  1  A0 00                ldy #0
0018FF  1  A5 0C                lda zpt
001901  1  49 C3                eor #$c3
001903  1  C5 13                cmp zp1
001905  1  F0 03 20 FF          trap_ne     ;store to zp   data
001909  1  FF           
00190A  1  84 0C                sty zpt     ;clear
00190C  1  AD 03 02             lda abst
00190F  1  49 C3                eor #$c3
001911  1  CD 17 02             cmp abs1
001914  1  F0 03 20 FF          trap_ne     ;store to abs   data
001918  1  FF           
001919  1  8C 03 02             sty abst    ;clear
00191C  1  A5 0D                lda zpt+1
00191E  1  49 C3                eor #$c3
001920  1  C5 14                cmp zp1+1
001922  1  F0 03 20 FF          trap_ne     ;store to zp+1 data
001926  1  FF           
001927  1  84 0D                sty zpt+1   ;clear
001929  1  AD 04 02             lda abst+1
00192C  1  49 C3                eor #$c3
00192E  1  CD 18 02             cmp abs1+1
001931  1  F0 03 20 FF          trap_ne     ;store to abs+1 data
001935  1  FF           
001936  1  8C 04 02             sty abst+1  ;clear
001939  1  A5 0E                lda zpt+2
00193B  1  49 C3                eor #$c3
00193D  1  C5 15                cmp zp1+2
00193F  1  F0 03 20 FF          trap_ne     ;store to zp+2 data
001943  1  FF           
001944  1  84 0E                sty zpt+2   ;clear
001946  1  AD 05 02             lda abst+2
001949  1  49 C3                eor #$c3
00194B  1  CD 19 02             cmp abs1+2
00194E  1  F0 03 20 FF          trap_ne     ;store to abs+2 data
001952  1  FF           
001953  1  8C 05 02             sty abst+2  ;clear
001956  1  A5 0F                lda zpt+3
001958  1  49 C3                eor #$c3
00195A  1  C5 16                cmp zp1+3
00195C  1  F0 03 20 FF          trap_ne     ;store to zp+3 data
001960  1  FF           
001961  1  84 0F                sty zpt+3   ;clear
001963  1  AD 06 02             lda abst+3
001966  1  49 C3                eor #$c3
001968  1  CD 1A 02             cmp abs1+3
00196B  1  F0 03 20 FF          trap_ne     ;store to abs+3 data
00196F  1  FF           
001970  1  8C 06 02             sty abst+3  ;clear
001973  1  AD 00 02 C9          next_test
001977  1  14 F0 03 20  
00197B  1  FF FF A9 15  
001982  1               
001982  1               ; testing load / store accumulator LDA / STA all addressing modes
001982  1               ; LDA / STA - zp,x / abs,x
001982  1  A2 03                ldx #3
001984  1               tldax:
001984  1  A9 00 48 28          set_stat 0
001988  1  B5 13                lda zp1,x
00198A  1  08                   php         ;test stores do not alter flags
00198B  1  49 C3                eor #$c3
00198D  1  28                   plp
00198E  1  9D 03 02             sta abst,x
001991  1  08                   php         ;flags after load/store sequence
001992  1  49 C3                eor #$c3
001994  1  DD 17 02             cmp abs1,x  ;test result
001997  1  F0 03 20 FF          trap_ne
00199B  1  FF           
00199C  1  68                   pla         ;load status
00199D  1  49 30                eor_flag 0
00199F  1  DD 1C 02             cmp fLDx,x  ;test flags
0019A2  1  F0 03 20 FF          trap_ne
0019A6  1  FF           
0019A7  1  CA                   dex
0019A8  1  10 DA                bpl tldax
0019AA  1               
0019AA  1  A2 03                ldx #3
0019AC  1               tldax1:
0019AC  1  A9 FF 48 28          set_stat $ff
0019B0  1  B5 13                lda zp1,x
0019B2  1  08                   php         ;test stores do not alter flags
0019B3  1  49 C3                eor #$c3
0019B5  1  28                   plp
0019B6  1  9D 03 02             sta abst,x
0019B9  1  08                   php         ;flags after load/store sequence
0019BA  1  49 C3                eor #$c3
0019BC  1  DD 17 02             cmp abs1,x   ;test result
0019BF  1  F0 03 20 FF          trap_ne
0019C3  1  FF           
0019C4  1  68                   pla         ;load status
0019C5  1  49 7D                eor_flag <~fnz ;mask bits not altered
0019C7  1  DD 1C 02             cmp fLDx,x  ;test flags
0019CA  1  F0 03 20 FF          trap_ne
0019CE  1  FF           
0019CF  1  CA                   dex
0019D0  1  10 DA                bpl tldax1
0019D2  1               
0019D2  1  A2 03                ldx #3
0019D4  1               tldax2:
0019D4  1  A9 00 48 28          set_stat 0
0019D8  1  BD 17 02             lda abs1,x
0019DB  1  08                   php         ;test stores do not alter flags
0019DC  1  49 C3                eor #$c3
0019DE  1  28                   plp
0019DF  1  95 0C                sta zpt,x
0019E1  1  08                   php         ;flags after load/store sequence
0019E2  1  49 C3                eor #$c3
0019E4  1  D5 13                cmp zp1,x   ;test result
0019E6  1  F0 03 20 FF          trap_ne
0019EA  1  FF           
0019EB  1  68                   pla         ;load status
0019EC  1  49 30                eor_flag 0
0019EE  1  DD 1C 02             cmp fLDx,x  ;test flags
0019F1  1  F0 03 20 FF          trap_ne
0019F5  1  FF           
0019F6  1  CA                   dex
0019F7  1  10 DB                bpl tldax2
0019F9  1               
0019F9  1  A2 03                ldx #3
0019FB  1               tldax3:
0019FB  1  A9 FF 48 28          set_stat $ff
0019FF  1  BD 17 02             lda abs1,x
001A02  1  08                   php         ;test stores do not alter flags
001A03  1  49 C3                eor #$c3
001A05  1  28                   plp
001A06  1  95 0C                sta zpt,x
001A08  1  08                   php         ;flags after load/store sequence
001A09  1  49 C3                eor #$c3
001A0B  1  D5 13                cmp zp1,x   ;test result
001A0D  1  F0 03 20 FF          trap_ne
001A11  1  FF           
001A12  1  68                   pla         ;load status
001A13  1  49 7D                eor_flag <~fnz ;mask bits not altered
001A15  1  DD 1C 02             cmp fLDx,x  ;test flags
001A18  1  F0 03 20 FF          trap_ne
001A1C  1  FF           
001A1D  1  CA                   dex
001A1E  1  10 DB                bpl tldax3
001A20  1               
001A20  1  A2 03                ldx #3      ;testing store result
001A22  1  A0 00                ldy #0
001A24  1  B5 0C        tstax:  lda zpt,x
001A26  1  49 C3                eor #$c3
001A28  1  D5 13                cmp zp1,x
001A2A  1  F0 03 20 FF          trap_ne     ;store to zp,x data
001A2E  1  FF           
001A2F  1  94 0C                sty zpt,x   ;clear
001A31  1  BD 03 02             lda abst,x
001A34  1  49 C3                eor #$c3
001A36  1  DD 17 02             cmp abs1,x
001A39  1  F0 03 20 FF          trap_ne     ;store to abs,x data
001A3D  1  FF           
001A3E  1  8A                   txa
001A3F  1  9D 03 02             sta abst,x  ;clear
001A42  1  CA                   dex
001A43  1  10 DF                bpl tstax
001A45  1  AD 00 02 C9          next_test
001A49  1  15 F0 03 20  
001A4D  1  FF FF A9 16  
001A54  1               
001A54  1               ; LDA / STA - (zp),y / abs,y / (zp,x)
001A54  1  A0 03                ldy #3
001A56  1               tlday:
001A56  1  A9 00 48 28          set_stat 0
001A5A  1  B1 24                lda (ind1),y
001A5C  1  08                   php         ;test stores do not alter flags
001A5D  1  49 C3                eor #$c3
001A5F  1  28                   plp
001A60  1  99 03 02             sta abst,y
001A63  1  08                   php         ;flags after load/store sequence
001A64  1  49 C3                eor #$c3
001A66  1  D9 17 02             cmp abs1,y  ;test result
001A69  1  F0 03 20 FF          trap_ne
001A6D  1  FF           
001A6E  1  68                   pla         ;load status
001A6F  1  49 30                eor_flag 0
001A71  1  D9 1C 02             cmp fLDx,y  ;test flags
001A74  1  F0 03 20 FF          trap_ne
001A78  1  FF           
001A79  1  88                   dey
001A7A  1  10 DA                bpl tlday
001A7C  1               
001A7C  1  A0 03                ldy #3
001A7E  1               tlday1:
001A7E  1  A9 FF 48 28          set_stat $ff
001A82  1  B1 24                lda (ind1),y
001A84  1  08                   php         ;test stores do not alter flags
001A85  1  49 C3                eor #$c3
001A87  1  28                   plp
001A88  1  99 03 02             sta abst,y
001A8B  1  08                   php         ;flags after load/store sequence
001A8C  1  49 C3                eor #$c3
001A8E  1  D9 17 02             cmp abs1,y  ;test result
001A91  1  F0 03 20 FF          trap_ne
001A95  1  FF           
001A96  1  68                   pla         ;load status
001A97  1  49 7D                eor_flag <~fnz ;mask bits not altered
001A99  1  D9 1C 02             cmp fLDx,y  ;test flags
001A9C  1  F0 03 20 FF          trap_ne
001AA0  1  FF           
001AA1  1  88                   dey
001AA2  1  10 DA                bpl tlday1
001AA4  1               
001AA4  1  A0 03                ldy #3      ;testing store result
001AA6  1  A2 00                ldx #0
001AA8  1  B9 03 02     tstay:  lda abst,y
001AAB  1  49 C3                eor #$c3
001AAD  1  D9 17 02             cmp abs1,y
001AB0  1  F0 03 20 FF          trap_ne     ;store to abs data
001AB4  1  FF           
001AB5  1  8A                   txa
001AB6  1  99 03 02             sta abst,y  ;clear
001AB9  1  88                   dey
001ABA  1  10 EC                bpl tstay
001ABC  1               
001ABC  1  A0 03                ldy #3
001ABE  1               tlday2:
001ABE  1  A9 00 48 28          set_stat 0
001AC2  1  B9 17 02             lda abs1,y
001AC5  1  08                   php         ;test stores do not alter flags
001AC6  1  49 C3                eor #$c3
001AC8  1  28                   plp
001AC9  1  91 30                sta (indt),y
001ACB  1  08                   php         ;flags after load/store sequence
001ACC  1  49 C3                eor #$c3
001ACE  1  D1 24                cmp (ind1),y    ;test result
001AD0  1  F0 03 20 FF          trap_ne
001AD4  1  FF           
001AD5  1  68                   pla         ;load status
001AD6  1  49 30                eor_flag 0
001AD8  1  D9 1C 02             cmp fLDx,y  ;test flags
001ADB  1  F0 03 20 FF          trap_ne
001ADF  1  FF           
001AE0  1  88                   dey
001AE1  1  10 DB                bpl tlday2
001AE3  1               
001AE3  1  A0 03                ldy #3
001AE5  1               tlday3:
001AE5  1  A9 FF 48 28          set_stat $ff
001AE9  1  B9 17 02             lda abs1,y
001AEC  1  08                   php         ;test stores do not alter flags
001AED  1  49 C3                eor #$c3
001AEF  1  28                   plp
001AF0  1  91 30                sta (indt),y
001AF2  1  08                   php         ;flags after load/store sequence
001AF3  1  49 C3                eor #$c3
001AF5  1  D1 24                cmp (ind1),y   ;test result
001AF7  1  F0 03 20 FF          trap_ne
001AFB  1  FF           
001AFC  1  68                   pla         ;load status
001AFD  1  49 7D                eor_flag <~fnz ;mask bits not altered
001AFF  1  D9 1C 02             cmp fLDx,y  ;test flags
001B02  1  F0 03 20 FF          trap_ne
001B06  1  FF           
001B07  1  88                   dey
001B08  1  10 DB                bpl tlday3
001B0A  1               
001B0A  1  A0 03                ldy #3      ;testing store result
001B0C  1  A2 00                ldx #0
001B0E  1  B9 03 02     tstay1: lda abst,y
001B11  1  49 C3                eor #$c3
001B13  1  D9 17 02             cmp abs1,y
001B16  1  F0 03 20 FF          trap_ne     ;store to abs data
001B1A  1  FF           
001B1B  1  8A                   txa
001B1C  1  99 03 02             sta abst,y  ;clear
001B1F  1  88                   dey
001B20  1  10 EC                bpl tstay1
001B22  1               
001B22  1  A2 06                ldx #6
001B24  1  A0 03                ldy #3
001B26  1               tldax4:
001B26  1  A9 00 48 28          set_stat 0
001B2A  1  A1 24                lda (ind1,x)
001B2C  1  08                   php         ;test stores do not alter flags
001B2D  1  49 C3                eor #$c3
001B2F  1  28                   plp
001B30  1  81 30                sta (indt,x)
001B32  1  08                   php         ;flags after load/store sequence
001B33  1  49 C3                eor #$c3
001B35  1  D9 17 02             cmp abs1,y  ;test result
001B38  1  F0 03 20 FF          trap_ne
001B3C  1  FF           
001B3D  1  68                   pla         ;load status
001B3E  1  49 30                eor_flag 0
001B40  1  D9 1C 02             cmp fLDx,y  ;test flags
001B43  1  F0 03 20 FF          trap_ne
001B47  1  FF           
001B48  1  CA                   dex
001B49  1  CA                   dex
001B4A  1  88                   dey
001B4B  1  10 D9                bpl tldax4
001B4D  1               
001B4D  1  A2 06                ldx #6
001B4F  1  A0 03                ldy #3
001B51  1               tldax5:
001B51  1  A9 FF 48 28          set_stat $ff
001B55  1  A1 24                lda (ind1,x)
001B57  1  08                   php         ;test stores do not alter flags
001B58  1  49 C3                eor #$c3
001B5A  1  28                   plp
001B5B  1  81 30                sta (indt,x)
001B5D  1  08                   php         ;flags after load/store sequence
001B5E  1  49 C3                eor #$c3
001B60  1  D9 17 02             cmp abs1,y  ;test result
001B63  1  F0 03 20 FF          trap_ne
001B67  1  FF           
001B68  1  68                   pla         ;load status
001B69  1  49 7D                eor_flag <~fnz ;mask bits not altered
001B6B  1  D9 1C 02             cmp fLDx,y  ;test flags
001B6E  1  F0 03 20 FF          trap_ne
001B72  1  FF           
001B73  1  CA                   dex
001B74  1  CA                   dex
001B75  1  88                   dey
001B76  1  10 D9                bpl tldax5
001B78  1               
001B78  1  A0 03                ldy #3      ;testing store result
001B7A  1  A2 00                ldx #0
001B7C  1  B9 03 02     tstay2: lda abst,y
001B7F  1  49 C3                eor #$c3
001B81  1  D9 17 02             cmp abs1,y
001B84  1  F0 03 20 FF          trap_ne     ;store to abs data
001B88  1  FF           
001B89  1  8A                   txa
001B8A  1  99 03 02             sta abst,y  ;clear
001B8D  1  88                   dey
001B8E  1  10 EC                bpl tstay2
001B90  1  AD 00 02 C9          next_test
001B94  1  16 F0 03 20  
001B98  1  FF FF A9 17  
001B9F  1               
001B9F  1               ; indexed wraparound test (only zp should wrap)
001B9F  1  A2 FD                ldx #3+$fa
001BA1  1  B5 19        tldax6: lda <(zp1-$fa),x   ;wrap on indexed zp
001BA3  1  9D 09 01             sta abst-$fa,x      ;no STX abs,x!
001BA6  1  CA                   dex
001BA7  1  E0 FA                cpx #$fa
001BA9  1  B0 F6                bcs tldax6
001BAB  1  A2 FD                ldx #3+$fa
001BAD  1  BD 1D 01     tldax7: lda abs1-$fa,x      ;no wrap on indexed abs
001BB0  1  95 12                sta <(zpt-$fa),x
001BB2  1  CA                   dex
001BB3  1  E0 FA                cpx #$fa
001BB5  1  B0 F6                bcs tldax7
001BB7  1               
001BB7  1  A2 03                ldx #3      ;testing wraparound result
001BB9  1  A0 00                ldy #0
001BBB  1  B5 0C        tstax1: lda zpt,x
001BBD  1  D5 13                cmp zp1,x
001BBF  1  F0 03 20 FF          trap_ne     ;store to zp,x data
001BC3  1  FF           
001BC4  1  94 0C                sty zpt,x   ;clear
001BC6  1  BD 03 02             lda abst,x
001BC9  1  DD 17 02             cmp abs1,x
001BCC  1  F0 03 20 FF          trap_ne     ;store to abs,x data
001BD0  1  FF           
001BD1  1  8A                   txa
001BD2  1  9D 03 02             sta abst,x  ;clear
001BD5  1  CA                   dex
001BD6  1  10 E3                bpl tstax1
001BD8  1               
001BD8  1  A0 FB                ldy #3+$f8
001BDA  1  A2 FE                ldx #6+$f8
001BDC  1  A1 2C        tlday4: lda (<(ind1-$f8),x) ;wrap on indexed zp indirect
001BDE  1  99 0B 01             sta abst-$f8,y
001BE1  1  CA                   dex
001BE2  1  CA                   dex
001BE3  1  88                   dey
001BE4  1  C0 F8                cpy #$f8
001BE6  1  B0 F4                bcs tlday4
001BE8  1  A0 03                ldy #3      ;testing wraparound result
001BEA  1  A2 00                ldx #0
001BEC  1  B9 03 02     tstay4: lda abst,y
001BEF  1  D9 17 02             cmp abs1,y
001BF2  1  F0 03 20 FF          trap_ne     ;store to abs data
001BF6  1  FF           
001BF7  1  8A                   txa
001BF8  1  99 03 02             sta abst,y  ;clear
001BFB  1  88                   dey
001BFC  1  10 EE                bpl tstay4
001BFE  1               
001BFE  1  A0 FB                ldy #3+$f8
001C00  1  B9 1F 01     tlday5: lda abs1-$f8,y  ;no wrap on indexed abs
001C03  1  91 38                sta (inwt),y
001C05  1  88                   dey
001C06  1  C0 F8                cpy #$f8
001C08  1  B0 F6                bcs tlday5
001C0A  1  A0 03                ldy #3      ;testing wraparound result
001C0C  1  A2 00                ldx #0
001C0E  1  B9 03 02     tstay5: lda abst,y
001C11  1  D9 17 02             cmp abs1,y
001C14  1  F0 03 20 FF          trap_ne     ;store to abs data
001C18  1  FF           
001C19  1  8A                   txa
001C1A  1  99 03 02             sta abst,y  ;clear
001C1D  1  88                   dey
001C1E  1  10 EE                bpl tstay5
001C20  1               
001C20  1  A0 FB                ldy #3+$f8
001C22  1  A2 FE                ldx #6+$f8
001C24  1  B1 2E        tlday6: lda (inw1),y    ;no wrap on zp indirect indexed
001C26  1  81 38                sta (<(indt-$f8),x)
001C28  1  CA                   dex
001C29  1  CA                   dex
001C2A  1  88                   dey
001C2B  1  C0 F8                cpy #$f8
001C2D  1  B0 F5                bcs tlday6
001C2F  1  A0 03                ldy #3      ;testing wraparound result
001C31  1  A2 00                ldx #0
001C33  1  B9 03 02     tstay6: lda abst,y
001C36  1  D9 17 02             cmp abs1,y
001C39  1  F0 03 20 FF          trap_ne     ;store to abs data
001C3D  1  FF           
001C3E  1  8A                   txa
001C3F  1  99 03 02             sta abst,y  ;clear
001C42  1  88                   dey
001C43  1  10 EE                bpl tstay6
001C45  1  AD 00 02 C9          next_test
001C49  1  17 F0 03 20  
001C4D  1  FF FF A9 18  
001C54  1               
001C54  1               ; LDA / STA - zp / abs / #
001C54  1  A9 00 48 28          set_stat 0
001C58  1  A5 13                lda zp1
001C5A  1  08                   php         ;test stores do not alter flags
001C5B  1  49 C3                eor #$c3
001C5D  1  28                   plp
001C5E  1  8D 03 02             sta abst
001C61  1  08                   php         ;flags after load/store sequence
001C62  1  49 C3                eor #$c3
001C64  1  C9 C3                cmp #$c3    ;test result
001C66  1  F0 03 20 FF          trap_ne
001C6A  1  FF           
001C6B  1  68                   pla         ;load status
001C6C  1  49 30                eor_flag 0
001C6E  1  CD 1C 02             cmp fLDx    ;test flags
001C71  1  F0 03 20 FF          trap_ne
001C75  1  FF           
001C76  1  A9 00 48 28          set_stat 0
001C7A  1  A5 14                lda zp1+1
001C7C  1  08                   php         ;test stores do not alter flags
001C7D  1  49 C3                eor #$c3
001C7F  1  28                   plp
001C80  1  8D 04 02             sta abst+1
001C83  1  08                   php         ;flags after load/store sequence
001C84  1  49 C3                eor #$c3
001C86  1  C9 82                cmp #$82    ;test result
001C88  1  F0 03 20 FF          trap_ne
001C8C  1  FF           
001C8D  1  68                   pla         ;load status
001C8E  1  49 30                eor_flag 0
001C90  1  CD 1D 02             cmp fLDx+1  ;test flags
001C93  1  F0 03 20 FF          trap_ne
001C97  1  FF           
001C98  1  A9 00 48 28          set_stat 0
001C9C  1  A5 15                lda zp1+2
001C9E  1  08                   php         ;test stores do not alter flags
001C9F  1  49 C3                eor #$c3
001CA1  1  28                   plp
001CA2  1  8D 05 02             sta abst+2
001CA5  1  08                   php         ;flags after load/store sequence
001CA6  1  49 C3                eor #$c3
001CA8  1  C9 41                cmp #$41    ;test result
001CAA  1  F0 03 20 FF          trap_ne
001CAE  1  FF           
001CAF  1  68                   pla         ;load status
001CB0  1  49 30                eor_flag 0
001CB2  1  CD 1E 02             cmp fLDx+2  ;test flags
001CB5  1  F0 03 20 FF          trap_ne
001CB9  1  FF           
001CBA  1  A9 00 48 28          set_stat 0
001CBE  1  A5 16                lda zp1+3
001CC0  1  08                   php         ;test stores do not alter flags
001CC1  1  49 C3                eor #$c3
001CC3  1  28                   plp
001CC4  1  8D 06 02             sta abst+3
001CC7  1  08                   php         ;flags after load/store sequence
001CC8  1  49 C3                eor #$c3
001CCA  1  C9 00                cmp #0      ;test result
001CCC  1  F0 03 20 FF          trap_ne
001CD0  1  FF           
001CD1  1  68                   pla         ;load status
001CD2  1  49 30                eor_flag 0
001CD4  1  CD 1F 02             cmp fLDx+3  ;test flags
001CD7  1  F0 03 20 FF          trap_ne
001CDB  1  FF           
001CDC  1  A9 FF 48 28          set_stat $ff
001CE0  1  A5 13                lda zp1
001CE2  1  08                   php         ;test stores do not alter flags
001CE3  1  49 C3                eor #$c3
001CE5  1  28                   plp
001CE6  1  8D 03 02             sta abst
001CE9  1  08                   php         ;flags after load/store sequence
001CEA  1  49 C3                eor #$c3
001CEC  1  C9 C3                cmp #$c3    ;test result
001CEE  1  F0 03 20 FF          trap_ne
001CF2  1  FF           
001CF3  1  68                   pla         ;load status
001CF4  1  49 7D                eor_flag <~fnz ;mask bits not altered
001CF6  1  CD 1C 02             cmp fLDx    ;test flags
001CF9  1  F0 03 20 FF          trap_ne
001CFD  1  FF           
001CFE  1  A9 FF 48 28          set_stat $ff
001D02  1  A5 14                lda zp1+1
001D04  1  08                   php         ;test stores do not alter flags
001D05  1  49 C3                eor #$c3
001D07  1  28                   plp
001D08  1  8D 04 02             sta abst+1
001D0B  1  08                   php         ;flags after load/store sequence
001D0C  1  49 C3                eor #$c3
001D0E  1  C9 82                cmp #$82    ;test result
001D10  1  F0 03 20 FF          trap_ne
001D14  1  FF           
001D15  1  68                   pla         ;load status
001D16  1  49 7D                eor_flag <~fnz ;mask bits not altered
001D18  1  CD 1D 02             cmp fLDx+1  ;test flags
001D1B  1  F0 03 20 FF          trap_ne
001D1F  1  FF           
001D20  1  A9 FF 48 28          set_stat $ff
001D24  1  A5 15                lda zp1+2
001D26  1  08                   php         ;test stores do not alter flags
001D27  1  49 C3                eor #$c3
001D29  1  28                   plp
001D2A  1  8D 05 02             sta abst+2
001D2D  1  08                   php         ;flags after load/store sequence
001D2E  1  49 C3                eor #$c3
001D30  1  C9 41                cmp #$41    ;test result
001D32  1  F0 03 20 FF          trap_ne
001D36  1  FF           
001D37  1  68                   pla         ;load status
001D38  1  49 7D                eor_flag <~fnz ;mask bits not altered
001D3A  1  CD 1E 02             cmp fLDx+2  ;test flags
001D3D  1  F0 03 20 FF          trap_ne
001D41  1  FF           
001D42  1  A9 FF 48 28          set_stat $ff
001D46  1  A5 16                lda zp1+3
001D48  1  08                   php         ;test stores do not alter flags
001D49  1  49 C3                eor #$c3
001D4B  1  28                   plp
001D4C  1  8D 06 02             sta abst+3
001D4F  1  08                   php         ;flags after load/store sequence
001D50  1  49 C3                eor #$c3
001D52  1  C9 00                cmp #0      ;test result
001D54  1  F0 03 20 FF          trap_ne
001D58  1  FF           
001D59  1  68                   pla         ;load status
001D5A  1  49 7D                eor_flag <~fnz ;mask bits not altered
001D5C  1  CD 1F 02             cmp fLDx+3  ;test flags
001D5F  1  F0 03 20 FF          trap_ne
001D63  1  FF           
001D64  1  A9 00 48 28          set_stat 0
001D68  1  AD 17 02             lda abs1
001D6B  1  08                   php         ;test stores do not alter flags
001D6C  1  49 C3                eor #$c3
001D6E  1  28                   plp
001D6F  1  85 0C                sta zpt
001D71  1  08                   php         ;flags after load/store sequence
001D72  1  49 C3                eor #$c3
001D74  1  C5 13                cmp zp1     ;test result
001D76  1  F0 03 20 FF          trap_ne
001D7A  1  FF           
001D7B  1  68                   pla         ;load status
001D7C  1  49 30                eor_flag 0
001D7E  1  CD 1C 02             cmp fLDx    ;test flags
001D81  1  F0 03 20 FF          trap_ne
001D85  1  FF           
001D86  1  A9 00 48 28          set_stat 0
001D8A  1  AD 18 02             lda abs1+1
001D8D  1  08                   php         ;test stores do not alter flags
001D8E  1  49 C3                eor #$c3
001D90  1  28                   plp
001D91  1  85 0D                sta zpt+1
001D93  1  08                   php         ;flags after load/store sequence
001D94  1  49 C3                eor #$c3
001D96  1  C5 14                cmp zp1+1   ;test result
001D98  1  F0 03 20 FF          trap_ne
001D9C  1  FF           
001D9D  1  68                   pla         ;load status
001D9E  1  49 30                eor_flag 0
001DA0  1  CD 1D 02             cmp fLDx+1  ;test flags
001DA3  1  F0 03 20 FF          trap_ne
001DA7  1  FF           
001DA8  1  A9 00 48 28          set_stat 0
001DAC  1  AD 19 02             lda abs1+2
001DAF  1  08                   php         ;test stores do not alter flags
001DB0  1  49 C3                eor #$c3
001DB2  1  28                   plp
001DB3  1  85 0E                sta zpt+2
001DB5  1  08                   php         ;flags after load/store sequence
001DB6  1  49 C3                eor #$c3
001DB8  1  C5 15                cmp zp1+2   ;test result
001DBA  1  F0 03 20 FF          trap_ne
001DBE  1  FF           
001DBF  1  68                   pla         ;load status
001DC0  1  49 30                eor_flag 0
001DC2  1  CD 1E 02             cmp fLDx+2  ;test flags
001DC5  1  F0 03 20 FF          trap_ne
001DC9  1  FF           
001DCA  1  A9 00 48 28          set_stat 0
001DCE  1  AD 1A 02             lda abs1+3
001DD1  1  08                   php         ;test stores do not alter flags
001DD2  1  49 C3                eor #$c3
001DD4  1  28                   plp
001DD5  1  85 0F                sta zpt+3
001DD7  1  08                   php         ;flags after load/store sequence
001DD8  1  49 C3                eor #$c3
001DDA  1  C5 16                cmp zp1+3   ;test result
001DDC  1  F0 03 20 FF          trap_ne
001DE0  1  FF           
001DE1  1  68                   pla         ;load status
001DE2  1  49 30                eor_flag 0
001DE4  1  CD 1F 02             cmp fLDx+3  ;test flags
001DE7  1  F0 03 20 FF          trap_ne
001DEB  1  FF           
001DEC  1  A9 FF 48 28          set_stat $ff
001DF0  1  AD 17 02             lda abs1
001DF3  1  08                   php         ;test stores do not alter flags
001DF4  1  49 C3                eor #$c3
001DF6  1  28                   plp
001DF7  1  85 0C                sta zpt
001DF9  1  08                   php         ;flags after load/store sequence
001DFA  1  49 C3                eor #$c3
001DFC  1  C5 13                cmp zp1     ;test result
001DFE  1  F0 03 20 FF          trap_ne
001E02  1  FF           
001E03  1  68                   pla         ;load status
001E04  1  49 7D                eor_flag <~fnz ;mask bits not altered
001E06  1  CD 1C 02             cmp fLDx    ;test flags
001E09  1  F0 03 20 FF          trap_ne
001E0D  1  FF           
001E0E  1  A9 FF 48 28          set_stat $ff
001E12  1  AD 18 02             lda abs1+1
001E15  1  08                   php         ;test stores do not alter flags
001E16  1  49 C3                eor #$c3
001E18  1  28                   plp
001E19  1  85 0D                sta zpt+1
001E1B  1  08                   php         ;flags after load/store sequence
001E1C  1  49 C3                eor #$c3
001E1E  1  C5 14                cmp zp1+1   ;test result
001E20  1  F0 03 20 FF          trap_ne
001E24  1  FF           
001E25  1  68                   pla         ;load status
001E26  1  49 7D                eor_flag <~fnz ;mask bits not altered
001E28  1  CD 1D 02             cmp fLDx+1  ;test flags
001E2B  1  F0 03 20 FF          trap_ne
001E2F  1  FF           
001E30  1  A9 FF 48 28          set_stat $ff
001E34  1  AD 19 02             lda abs1+2
001E37  1  08                   php         ;test stores do not alter flags
001E38  1  49 C3                eor #$c3
001E3A  1  28                   plp
001E3B  1  85 0E                sta zpt+2
001E3D  1  08                   php         ;flags after load/store sequence
001E3E  1  49 C3                eor #$c3
001E40  1  C5 15                cmp zp1+2   ;test result
001E42  1  F0 03 20 FF          trap_ne
001E46  1  FF           
001E47  1  68                   pla         ;load status
001E48  1  49 7D                eor_flag <~fnz ;mask bits not altered
001E4A  1  CD 1E 02             cmp fLDx+2  ;test flags
001E4D  1  F0 03 20 FF          trap_ne
001E51  1  FF           
001E52  1  A9 FF 48 28          set_stat $ff
001E56  1  AD 1A 02             lda abs1+3
001E59  1  08                   php         ;test stores do not alter flags
001E5A  1  49 C3                eor #$c3
001E5C  1  28                   plp
001E5D  1  85 0F                sta zpt+3
001E5F  1  08                   php         ;flags after load/store sequence
001E60  1  49 C3                eor #$c3
001E62  1  C5 16                cmp zp1+3   ;test result
001E64  1  F0 03 20 FF          trap_ne
001E68  1  FF           
001E69  1  68                   pla         ;load status
001E6A  1  49 7D                eor_flag <~fnz ;mask bits not altered
001E6C  1  CD 1F 02             cmp fLDx+3  ;test flags
001E6F  1  F0 03 20 FF          trap_ne
001E73  1  FF           
001E74  1  A9 00 48 28          set_stat 0
001E78  1  A9 C3                lda #$c3
001E7A  1  08                   php
001E7B  1  CD 17 02             cmp abs1    ;test result
001E7E  1  F0 03 20 FF          trap_ne
001E82  1  FF           
001E83  1  68                   pla         ;load status
001E84  1  49 30                eor_flag 0
001E86  1  CD 1C 02             cmp fLDx    ;test flags
001E89  1  F0 03 20 FF          trap_ne
001E8D  1  FF           
001E8E  1  A9 00 48 28          set_stat 0
001E92  1  A9 82                lda #$82
001E94  1  08                   php
001E95  1  CD 18 02             cmp abs1+1  ;test result
001E98  1  F0 03 20 FF          trap_ne
001E9C  1  FF           
001E9D  1  68                   pla         ;load status
001E9E  1  49 30                eor_flag 0
001EA0  1  CD 1D 02             cmp fLDx+1  ;test flags
001EA3  1  F0 03 20 FF          trap_ne
001EA7  1  FF           
001EA8  1  A9 00 48 28          set_stat 0
001EAC  1  A9 41                lda #$41
001EAE  1  08                   php
001EAF  1  CD 19 02             cmp abs1+2  ;test result
001EB2  1  F0 03 20 FF          trap_ne
001EB6  1  FF           
001EB7  1  68                   pla         ;load status
001EB8  1  49 30                eor_flag 0
001EBA  1  CD 1E 02             cmp fLDx+2  ;test flags
001EBD  1  F0 03 20 FF          trap_ne
001EC1  1  FF           
001EC2  1  A9 00 48 28          set_stat 0
001EC6  1  A9 00                lda #0
001EC8  1  08                   php
001EC9  1  CD 1A 02             cmp abs1+3  ;test result
001ECC  1  F0 03 20 FF          trap_ne
001ED0  1  FF           
001ED1  1  68                   pla         ;load status
001ED2  1  49 30                eor_flag 0
001ED4  1  CD 1F 02             cmp fLDx+3  ;test flags
001ED7  1  F0 03 20 FF          trap_ne
001EDB  1  FF           
001EDC  1               
001EDC  1  A9 FF 48 28          set_stat $ff
001EE0  1  A9 C3                lda #$c3
001EE2  1  08                   php
001EE3  1  CD 17 02             cmp abs1    ;test result
001EE6  1  F0 03 20 FF          trap_ne
001EEA  1  FF           
001EEB  1  68                   pla         ;load status
001EEC  1  49 7D                eor_flag <~fnz ;mask bits not altered
001EEE  1  CD 1C 02             cmp fLDx    ;test flags
001EF1  1  F0 03 20 FF          trap_ne
001EF5  1  FF           
001EF6  1  A9 FF 48 28          set_stat $ff
001EFA  1  A9 82                lda #$82
001EFC  1  08                   php
001EFD  1  CD 18 02             cmp abs1+1  ;test result
001F00  1  F0 03 20 FF          trap_ne
001F04  1  FF           
001F05  1  68                   pla         ;load status
001F06  1  49 7D                eor_flag <~fnz ;mask bits not altered
001F08  1  CD 1D 02             cmp fLDx+1  ;test flags
001F0B  1  F0 03 20 FF          trap_ne
001F0F  1  FF           
001F10  1  A9 FF 48 28          set_stat $ff
001F14  1  A9 41                lda #$41
001F16  1  08                   php
001F17  1  CD 19 02             cmp abs1+2  ;test result
001F1A  1  F0 03 20 FF          trap_ne
001F1E  1  FF           
001F1F  1  68                   pla         ;load status
001F20  1  49 7D                eor_flag <~fnz ;mask bits not altered
001F22  1  CD 1E 02             cmp fLDx+2  ;test flags
001F25  1  F0 03 20 FF          trap_ne
001F29  1  FF           
001F2A  1  A9 FF 48 28          set_stat $ff
001F2E  1  A9 00                lda #0
001F30  1  08                   php
001F31  1  CD 1A 02             cmp abs1+3  ;test result
001F34  1  F0 03 20 FF          trap_ne
001F38  1  FF           
001F39  1  68                   pla         ;load status
001F3A  1  49 7D                eor_flag <~fnz ;mask bits not altered
001F3C  1  CD 1F 02             cmp fLDx+3  ;test flags
001F3F  1  F0 03 20 FF          trap_ne
001F43  1  FF           
001F44  1               
001F44  1  A2 00                ldx #0
001F46  1  A5 0C                lda zpt
001F48  1  49 C3                eor #$c3
001F4A  1  C5 13                cmp zp1
001F4C  1  F0 03 20 FF          trap_ne     ;store to zp data
001F50  1  FF           
001F51  1  86 0C                stx zpt     ;clear
001F53  1  AD 03 02             lda abst
001F56  1  49 C3                eor #$c3
001F58  1  CD 17 02             cmp abs1
001F5B  1  F0 03 20 FF          trap_ne     ;store to abs data
001F5F  1  FF           
001F60  1  8E 03 02             stx abst    ;clear
001F63  1  A5 0D                lda zpt+1
001F65  1  49 C3                eor #$c3
001F67  1  C5 14                cmp zp1+1
001F69  1  F0 03 20 FF          trap_ne     ;store to zp data
001F6D  1  FF           
001F6E  1  86 0D                stx zpt+1   ;clear
001F70  1  AD 04 02             lda abst+1
001F73  1  49 C3                eor #$c3
001F75  1  CD 18 02             cmp abs1+1
001F78  1  F0 03 20 FF          trap_ne     ;store to abs data
001F7C  1  FF           
001F7D  1  8E 04 02             stx abst+1  ;clear
001F80  1  A5 0E                lda zpt+2
001F82  1  49 C3                eor #$c3
001F84  1  C5 15                cmp zp1+2
001F86  1  F0 03 20 FF          trap_ne     ;store to zp data
001F8A  1  FF           
001F8B  1  86 0E                stx zpt+2   ;clear
001F8D  1  AD 05 02             lda abst+2
001F90  1  49 C3                eor #$c3
001F92  1  CD 19 02             cmp abs1+2
001F95  1  F0 03 20 FF          trap_ne     ;store to abs data
001F99  1  FF           
001F9A  1  8E 05 02             stx abst+2  ;clear
001F9D  1  A5 0F                lda zpt+3
001F9F  1  49 C3                eor #$c3
001FA1  1  C5 16                cmp zp1+3
001FA3  1  F0 03 20 FF          trap_ne     ;store to zp data
001FA7  1  FF           
001FA8  1  86 0F                stx zpt+3   ;clear
001FAA  1  AD 06 02             lda abst+3
001FAD  1  49 C3                eor #$c3
001FAF  1  CD 1A 02             cmp abs1+3
001FB2  1  F0 03 20 FF          trap_ne     ;store to abs data
001FB6  1  FF           
001FB7  1  8E 06 02             stx abst+3  ;clear
001FBA  1  AD 00 02 C9          next_test
001FBE  1  18 F0 03 20  
001FC2  1  FF FF A9 19  
001FC9  1               
001FC9  1               ; testing bit test & compares BIT CPX CPY CMP all addressing modes
001FC9  1               ; BIT - zp / abs
001FC9  1  A9 00 48 A9          set_a $ff,0
001FCD  1  FF 28        
001FCF  1  24 16                bit zp1+3   ;00 - should set Z / clear  NV
001FD1  1  08 C9 FF F0          tst_a $ff,fz
001FD5  1  03 20 FF FF  
001FD9  1  68 48 C9 32  
001FE3  1  A9 00 48 A9          set_a 1,0
001FE7  1  01 28        
001FE9  1  24 15                bit zp1+2   ;41 - should set V (M6) / clear NZ
001FEB  1  08 C9 01 F0          tst_a 1,fv
001FEF  1  03 20 FF FF  
001FF3  1  68 48 C9 70  
001FFD  1  A9 00 48 A9          set_a 1,0
002001  1  01 28        
002003  1  24 14                bit zp1+1   ;82 - should set N (M7) & Z / clear V
002005  1  08 C9 01 F0          tst_a 1,fnz
002009  1  03 20 FF FF  
00200D  1  68 48 C9 B2  
002017  1  A9 00 48 A9          set_a 1,0
00201B  1  01 28        
00201D  1  24 13                bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
00201F  1  08 C9 01 F0          tst_a 1,fnv
002023  1  03 20 FF FF  
002027  1  68 48 C9 F0  
002031  1               
002031  1  A9 FF 48 A9          set_a $ff,$ff
002035  1  FF 28        
002037  1  24 16                bit zp1+3   ;00 - should set Z / clear  NV
002039  1  08 C9 FF F0          tst_a $ff,~fnv
00203D  1  03 20 FF FF  
002041  1  68 48 C9 3F  
00204B  1  A9 FF 48 A9          set_a 1,$ff
00204F  1  01 28        
002051  1  24 15                bit zp1+2   ;41 - should set V (M6) / clear NZ
002053  1  08 C9 01 F0          tst_a 1,~fnz
002057  1  03 20 FF FF  
00205B  1  68 48 C9 7D  
002065  1  A9 FF 48 A9          set_a 1,$ff
002069  1  01 28        
00206B  1  24 14                bit zp1+1   ;82 - should set N (M7) & Z / clear V
00206D  1  08 C9 01 F0          tst_a 1,~fv
002071  1  03 20 FF FF  
002075  1  68 48 C9 BF  
00207F  1  A9 FF 48 A9          set_a 1,$ff
002083  1  01 28        
002085  1  24 13                bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
002087  1  08 C9 01 F0          tst_a 1,~fz
00208B  1  03 20 FF FF  
00208F  1  68 48 C9 FD  
002099  1               
002099  1  A9 00 48 A9          set_a $ff,0
00209D  1  FF 28        
00209F  1  2C 1A 02             bit abs1+3  ;00 - should set Z / clear  NV
0020A2  1  08 C9 FF F0          tst_a $ff,fz
0020A6  1  03 20 FF FF  
0020AA  1  68 48 C9 32  
0020B4  1  A9 00 48 A9          set_a 1,0
0020B8  1  01 28        
0020BA  1  2C 19 02             bit abs1+2  ;41 - should set V (M6) / clear NZ
0020BD  1  08 C9 01 F0          tst_a 1,fv
0020C1  1  03 20 FF FF  
0020C5  1  68 48 C9 70  
0020CF  1  A9 00 48 A9          set_a 1,0
0020D3  1  01 28        
0020D5  1  2C 18 02             bit abs1+1  ;82 - should set N (M7) & Z / clear V
0020D8  1  08 C9 01 F0          tst_a 1,fnz
0020DC  1  03 20 FF FF  
0020E0  1  68 48 C9 B2  
0020EA  1  A9 00 48 A9          set_a 1,0
0020EE  1  01 28        
0020F0  1  2C 17 02             bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
0020F3  1  08 C9 01 F0          tst_a 1,fnv
0020F7  1  03 20 FF FF  
0020FB  1  68 48 C9 F0  
002105  1               
002105  1  A9 FF 48 A9          set_a $ff,$ff
002109  1  FF 28        
00210B  1  2C 1A 02             bit abs1+3  ;00 - should set Z / clear  NV
00210E  1  08 C9 FF F0          tst_a $ff,~fnv
002112  1  03 20 FF FF  
002116  1  68 48 C9 3F  
002120  1  A9 FF 48 A9          set_a 1,$ff
002124  1  01 28        
002126  1  2C 19 02             bit abs1+2  ;41 - should set V (M6) / clear NZ
002129  1  08 C9 01 F0          tst_a 1,~fnz
00212D  1  03 20 FF FF  
002131  1  68 48 C9 7D  
00213B  1  A9 FF 48 A9          set_a 1,$ff
00213F  1  01 28        
002141  1  2C 18 02             bit abs1+1  ;82 - should set N (M7) & Z / clear V
002144  1  08 C9 01 F0          tst_a 1,~fv
002148  1  03 20 FF FF  
00214C  1  68 48 C9 BF  
002156  1  A9 FF 48 A9          set_a 1,$ff
00215A  1  01 28        
00215C  1  2C 17 02             bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
00215F  1  08 C9 01 F0          tst_a 1,~fz
002163  1  03 20 FF FF  
002167  1  68 48 C9 FD  
002171  1  AD 00 02 C9          next_test
002175  1  19 F0 03 20  
002179  1  FF FF A9 1A  
002180  1               
002180  1               ; CPX - zp / abs / #
002180  1  A9 00 48 A2          set_x $80,0
002184  1  80 28        
002186  1  E4 17                cpx zp7f
002188  1  08 68 48 C9          tst_stat fc
00218C  1  31 F0 03 20  
002190  1  FF FF 28     
002193  1  CA                   dex
002194  1  E4 17                cpx zp7f
002196  1  08 68 48 C9          tst_stat fzc
00219A  1  33 F0 03 20  
00219E  1  FF FF 28     
0021A1  1  CA                   dex
0021A2  1  E4 17                cpx zp7f
0021A4  1  08 E0 7E F0          tst_x $7e,fn
0021A8  1  03 20 FF FF  
0021AC  1  68 48 C9 B0  
0021B6  1  A9 FF 48 A2          set_x $80,$ff
0021BA  1  80 28        
0021BC  1  E4 17                cpx zp7f
0021BE  1  08 68 48 C9          tst_stat ~fnz
0021C2  1  7D F0 03 20  
0021C6  1  FF FF 28     
0021C9  1  CA                   dex
0021CA  1  E4 17                cpx zp7f
0021CC  1  08 68 48 C9          tst_stat ~fn
0021D0  1  7F F0 03 20  
0021D4  1  FF FF 28     
0021D7  1  CA                   dex
0021D8  1  E4 17                cpx zp7f
0021DA  1  08 E0 7E F0          tst_x $7e,~fzc
0021DE  1  03 20 FF FF  
0021E2  1  68 48 C9 FC  
0021EC  1               
0021EC  1  A9 00 48 A2          set_x $80,0
0021F0  1  80 28        
0021F2  1  EC 1B 02             cpx abs7f
0021F5  1  08 68 48 C9          tst_stat fc
0021F9  1  31 F0 03 20  
0021FD  1  FF FF 28     
002200  1  CA                   dex
002201  1  EC 1B 02             cpx abs7f
002204  1  08 68 48 C9          tst_stat fzc
002208  1  33 F0 03 20  
00220C  1  FF FF 28     
00220F  1  CA                   dex
002210  1  EC 1B 02             cpx abs7f
002213  1  08 E0 7E F0          tst_x $7e,fn
002217  1  03 20 FF FF  
00221B  1  68 48 C9 B0  
002225  1  A9 FF 48 A2          set_x $80,$ff
002229  1  80 28        
00222B  1  EC 1B 02             cpx abs7f
00222E  1  08 68 48 C9          tst_stat ~fnz
002232  1  7D F0 03 20  
002236  1  FF FF 28     
002239  1  CA                   dex
00223A  1  EC 1B 02             cpx abs7f
00223D  1  08 68 48 C9          tst_stat ~fn
002241  1  7F F0 03 20  
002245  1  FF FF 28     
002248  1  CA                   dex
002249  1  EC 1B 02             cpx abs7f
00224C  1  08 E0 7E F0          tst_x $7e,~fzc
002250  1  03 20 FF FF  
002254  1  68 48 C9 FC  
00225E  1               
00225E  1  A9 00 48 A2          set_x $80,0
002262  1  80 28        
002264  1  E0 7F                cpx #$7f
002266  1  08 68 48 C9          tst_stat fc
00226A  1  31 F0 03 20  
00226E  1  FF FF 28     
002271  1  CA                   dex
002272  1  E0 7F                cpx #$7f
002274  1  08 68 48 C9          tst_stat fzc
002278  1  33 F0 03 20  
00227C  1  FF FF 28     
00227F  1  CA                   dex
002280  1  E0 7F                cpx #$7f
002282  1  08 E0 7E F0          tst_x $7e,fn
002286  1  03 20 FF FF  
00228A  1  68 48 C9 B0  
002294  1  A9 FF 48 A2          set_x $80,$ff
002298  1  80 28        
00229A  1  E0 7F                cpx #$7f
00229C  1  08 68 48 C9          tst_stat ~fnz
0022A0  1  7D F0 03 20  
0022A4  1  FF FF 28     
0022A7  1  CA                   dex
0022A8  1  E0 7F                cpx #$7f
0022AA  1  08 68 48 C9          tst_stat ~fn
0022AE  1  7F F0 03 20  
0022B2  1  FF FF 28     
0022B5  1  CA                   dex
0022B6  1  E0 7F                cpx #$7f
0022B8  1  08 E0 7E F0          tst_x $7e,~fzc
0022BC  1  03 20 FF FF  
0022C0  1  68 48 C9 FC  
0022CA  1  AD 00 02 C9          next_test
0022CE  1  1A F0 03 20  
0022D2  1  FF FF A9 1B  
0022D9  1               
0022D9  1               ; CPY - zp / abs / #
0022D9  1  A9 00 48 A0          set_y $80,0
0022DD  1  80 28        
0022DF  1  C4 17                cpy zp7f
0022E1  1  08 68 48 C9          tst_stat fc
0022E5  1  31 F0 03 20  
0022E9  1  FF FF 28     
0022EC  1  88                   dey
0022ED  1  C4 17                cpy zp7f
0022EF  1  08 68 48 C9          tst_stat fzc
0022F3  1  33 F0 03 20  
0022F7  1  FF FF 28     
0022FA  1  88                   dey
0022FB  1  C4 17                cpy zp7f
0022FD  1  08 C0 7E F0          tst_y $7e,fn
002301  1  03 20 FF FF  
002305  1  68 48 C9 B0  
00230F  1  A9 FF 48 A0          set_y $80,$ff
002313  1  80 28        
002315  1  C4 17                cpy zp7f
002317  1  08 68 48 C9          tst_stat ~fnz
00231B  1  7D F0 03 20  
00231F  1  FF FF 28     
002322  1  88                   dey
002323  1  C4 17                cpy zp7f
002325  1  08 68 48 C9          tst_stat ~fn
002329  1  7F F0 03 20  
00232D  1  FF FF 28     
002330  1  88                   dey
002331  1  C4 17                cpy zp7f
002333  1  08 C0 7E F0          tst_y $7e,~fzc
002337  1  03 20 FF FF  
00233B  1  68 48 C9 FC  
002345  1               
002345  1  A9 00 48 A0          set_y $80,0
002349  1  80 28        
00234B  1  CC 1B 02             cpy abs7f
00234E  1  08 68 48 C9          tst_stat fc
002352  1  31 F0 03 20  
002356  1  FF FF 28     
002359  1  88                   dey
00235A  1  CC 1B 02             cpy abs7f
00235D  1  08 68 48 C9          tst_stat fzc
002361  1  33 F0 03 20  
002365  1  FF FF 28     
002368  1  88                   dey
002369  1  CC 1B 02             cpy abs7f
00236C  1  08 C0 7E F0          tst_y $7e,fn
002370  1  03 20 FF FF  
002374  1  68 48 C9 B0  
00237E  1  A9 FF 48 A0          set_y $80,$ff
002382  1  80 28        
002384  1  CC 1B 02             cpy abs7f
002387  1  08 68 48 C9          tst_stat ~fnz
00238B  1  7D F0 03 20  
00238F  1  FF FF 28     
002392  1  88                   dey
002393  1  CC 1B 02             cpy abs7f
002396  1  08 68 48 C9          tst_stat ~fn
00239A  1  7F F0 03 20  
00239E  1  FF FF 28     
0023A1  1  88                   dey
0023A2  1  CC 1B 02             cpy abs7f
0023A5  1  08 C0 7E F0          tst_y $7e,~fzc
0023A9  1  03 20 FF FF  
0023AD  1  68 48 C9 FC  
0023B7  1               
0023B7  1  A9 00 48 A0          set_y $80,0
0023BB  1  80 28        
0023BD  1  C0 7F                cpy #$7f
0023BF  1  08 68 48 C9          tst_stat fc
0023C3  1  31 F0 03 20  
0023C7  1  FF FF 28     
0023CA  1  88                   dey
0023CB  1  C0 7F                cpy #$7f
0023CD  1  08 68 48 C9          tst_stat fzc
0023D1  1  33 F0 03 20  
0023D5  1  FF FF 28     
0023D8  1  88                   dey
0023D9  1  C0 7F                cpy #$7f
0023DB  1  08 C0 7E F0          tst_y $7e,fn
0023DF  1  03 20 FF FF  
0023E3  1  68 48 C9 B0  
0023ED  1  A9 FF 48 A0          set_y $80,$ff
0023F1  1  80 28        
0023F3  1  C0 7F                cpy #$7f
0023F5  1  08 68 48 C9          tst_stat ~fnz
0023F9  1  7D F0 03 20  
0023FD  1  FF FF 28     
002400  1  88                   dey
002401  1  C0 7F                cpy #$7f
002403  1  08 68 48 C9          tst_stat ~fn
002407  1  7F F0 03 20  
00240B  1  FF FF 28     
00240E  1  88                   dey
00240F  1  C0 7F                cpy #$7f
002411  1  08 C0 7E F0          tst_y $7e,~fzc
002415  1  03 20 FF FF  
002419  1  68 48 C9 FC  
002423  1  AD 00 02 C9          next_test
002427  1  1B F0 03 20  
00242B  1  FF FF A9 1C  
002432  1               
002432  1               ; CMP - zp / abs / #
002432  1  A9 00 48 A9          set_a $80,0
002436  1  80 28        
002438  1  C5 17                cmp zp7f
00243A  1  08 C9 80 F0          tst_a $80,fc
00243E  1  03 20 FF FF  
002442  1  68 48 C9 31  
00244C  1  A9 00 48 A9          set_a $7f,0
002450  1  7F 28        
002452  1  C5 17                cmp zp7f
002454  1  08 C9 7F F0          tst_a $7f,fzc
002458  1  03 20 FF FF  
00245C  1  68 48 C9 33  
002466  1  A9 00 48 A9          set_a $7e,0
00246A  1  7E 28        
00246C  1  C5 17                cmp zp7f
00246E  1  08 C9 7E F0          tst_a $7e,fn
002472  1  03 20 FF FF  
002476  1  68 48 C9 B0  
002480  1  A9 FF 48 A9          set_a $80,$ff
002484  1  80 28        
002486  1  C5 17                cmp zp7f
002488  1  08 C9 80 F0          tst_a $80,~fnz
00248C  1  03 20 FF FF  
002490  1  68 48 C9 7D  
00249A  1  A9 FF 48 A9          set_a $7f,$ff
00249E  1  7F 28        
0024A0  1  C5 17                cmp zp7f
0024A2  1  08 C9 7F F0          tst_a $7f,~fn
0024A6  1  03 20 FF FF  
0024AA  1  68 48 C9 7F  
0024B4  1  A9 FF 48 A9          set_a $7e,$ff
0024B8  1  7E 28        
0024BA  1  C5 17                cmp zp7f
0024BC  1  08 C9 7E F0          tst_a $7e,~fzc
0024C0  1  03 20 FF FF  
0024C4  1  68 48 C9 FC  
0024CE  1               
0024CE  1  A9 00 48 A9          set_a $80,0
0024D2  1  80 28        
0024D4  1  CD 1B 02             cmp abs7f
0024D7  1  08 C9 80 F0          tst_a $80,fc
0024DB  1  03 20 FF FF  
0024DF  1  68 48 C9 31  
0024E9  1  A9 00 48 A9          set_a $7f,0
0024ED  1  7F 28        
0024EF  1  CD 1B 02             cmp abs7f
0024F2  1  08 C9 7F F0          tst_a $7f,fzc
0024F6  1  03 20 FF FF  
0024FA  1  68 48 C9 33  
002504  1  A9 00 48 A9          set_a $7e,0
002508  1  7E 28        
00250A  1  CD 1B 02             cmp abs7f
00250D  1  08 C9 7E F0          tst_a $7e,fn
002511  1  03 20 FF FF  
002515  1  68 48 C9 B0  
00251F  1  A9 FF 48 A9          set_a $80,$ff
002523  1  80 28        
002525  1  CD 1B 02             cmp abs7f
002528  1  08 C9 80 F0          tst_a $80,~fnz
00252C  1  03 20 FF FF  
002530  1  68 48 C9 7D  
00253A  1  A9 FF 48 A9          set_a $7f,$ff
00253E  1  7F 28        
002540  1  CD 1B 02             cmp abs7f
002543  1  08 C9 7F F0          tst_a $7f,~fn
002547  1  03 20 FF FF  
00254B  1  68 48 C9 7F  
002555  1  A9 FF 48 A9          set_a $7e,$ff
002559  1  7E 28        
00255B  1  CD 1B 02             cmp abs7f
00255E  1  08 C9 7E F0          tst_a $7e,~fzc
002562  1  03 20 FF FF  
002566  1  68 48 C9 FC  
002570  1               
002570  1  A9 00 48 A9          set_a $80,0
002574  1  80 28        
002576  1  C9 7F                cmp #$7f
002578  1  08 C9 80 F0          tst_a $80,fc
00257C  1  03 20 FF FF  
002580  1  68 48 C9 31  
00258A  1  A9 00 48 A9          set_a $7f,0
00258E  1  7F 28        
002590  1  C9 7F                cmp #$7f
002592  1  08 C9 7F F0          tst_a $7f,fzc
002596  1  03 20 FF FF  
00259A  1  68 48 C9 33  
0025A4  1  A9 00 48 A9          set_a $7e,0
0025A8  1  7E 28        
0025AA  1  C9 7F                cmp #$7f
0025AC  1  08 C9 7E F0          tst_a $7e,fn
0025B0  1  03 20 FF FF  
0025B4  1  68 48 C9 B0  
0025BE  1  A9 FF 48 A9          set_a $80,$ff
0025C2  1  80 28        
0025C4  1  C9 7F                cmp #$7f
0025C6  1  08 C9 80 F0          tst_a $80,~fnz
0025CA  1  03 20 FF FF  
0025CE  1  68 48 C9 7D  
0025D8  1  A9 FF 48 A9          set_a $7f,$ff
0025DC  1  7F 28        
0025DE  1  C9 7F                cmp #$7f
0025E0  1  08 C9 7F F0          tst_a $7f,~fn
0025E4  1  03 20 FF FF  
0025E8  1  68 48 C9 7F  
0025F2  1  A9 FF 48 A9          set_a $7e,$ff
0025F6  1  7E 28        
0025F8  1  C9 7F                cmp #$7f
0025FA  1  08 C9 7E F0          tst_a $7e,~fzc
0025FE  1  03 20 FF FF  
002602  1  68 48 C9 FC  
00260C  1               
00260C  1  A2 04                ldx #4          ;with indexing by X
00260E  1  A9 00 48 A9          set_a $80,0
002612  1  80 28        
002614  1  D5 13                cmp zp1,x
002616  1  08 C9 80 F0          tst_a $80,fc
00261A  1  03 20 FF FF  
00261E  1  68 48 C9 31  
002628  1  A9 00 48 A9          set_a $7f,0
00262C  1  7F 28        
00262E  1  D5 13                cmp zp1,x
002630  1  08 C9 7F F0          tst_a $7f,fzc
002634  1  03 20 FF FF  
002638  1  68 48 C9 33  
002642  1  A9 00 48 A9          set_a $7e,0
002646  1  7E 28        
002648  1  D5 13                cmp zp1,x
00264A  1  08 C9 7E F0          tst_a $7e,fn
00264E  1  03 20 FF FF  
002652  1  68 48 C9 B0  
00265C  1  A9 FF 48 A9          set_a $80,$ff
002660  1  80 28        
002662  1  D5 13                cmp zp1,x
002664  1  08 C9 80 F0          tst_a $80,~fnz
002668  1  03 20 FF FF  
00266C  1  68 48 C9 7D  
002676  1  A9 FF 48 A9          set_a $7f,$ff
00267A  1  7F 28        
00267C  1  D5 13                cmp zp1,x
00267E  1  08 C9 7F F0          tst_a $7f,~fn
002682  1  03 20 FF FF  
002686  1  68 48 C9 7F  
002690  1  A9 FF 48 A9          set_a $7e,$ff
002694  1  7E 28        
002696  1  D5 13                cmp zp1,x
002698  1  08 C9 7E F0          tst_a $7e,~fzc
00269C  1  03 20 FF FF  
0026A0  1  68 48 C9 FC  
0026AA  1               
0026AA  1  A9 00 48 A9          set_a $80,0
0026AE  1  80 28        
0026B0  1  DD 17 02             cmp abs1,x
0026B3  1  08 C9 80 F0          tst_a $80,fc
0026B7  1  03 20 FF FF  
0026BB  1  68 48 C9 31  
0026C5  1  A9 00 48 A9          set_a $7f,0
0026C9  1  7F 28        
0026CB  1  DD 17 02             cmp abs1,x
0026CE  1  08 C9 7F F0          tst_a $7f,fzc
0026D2  1  03 20 FF FF  
0026D6  1  68 48 C9 33  
0026E0  1  A9 00 48 A9          set_a $7e,0
0026E4  1  7E 28        
0026E6  1  DD 17 02             cmp abs1,x
0026E9  1  08 C9 7E F0          tst_a $7e,fn
0026ED  1  03 20 FF FF  
0026F1  1  68 48 C9 B0  
0026FB  1  A9 FF 48 A9          set_a $80,$ff
0026FF  1  80 28        
002701  1  DD 17 02             cmp abs1,x
002704  1  08 C9 80 F0          tst_a $80,~fnz
002708  1  03 20 FF FF  
00270C  1  68 48 C9 7D  
002716  1  A9 FF 48 A9          set_a $7f,$ff
00271A  1  7F 28        
00271C  1  DD 17 02             cmp abs1,x
00271F  1  08 C9 7F F0          tst_a $7f,~fn
002723  1  03 20 FF FF  
002727  1  68 48 C9 7F  
002731  1  A9 FF 48 A9          set_a $7e,$ff
002735  1  7E 28        
002737  1  DD 17 02             cmp abs1,x
00273A  1  08 C9 7E F0          tst_a $7e,~fzc
00273E  1  03 20 FF FF  
002742  1  68 48 C9 FC  
00274C  1               
00274C  1  A0 04                ldy #4          ;with indexing by Y
00274E  1  A2 08                ldx #8          ;with indexed indirect
002750  1  A9 00 48 A9          set_a $80,0
002754  1  80 28        
002756  1  D9 17 02             cmp abs1,y
002759  1  08 C9 80 F0          tst_a $80,fc
00275D  1  03 20 FF FF  
002761  1  68 48 C9 31  
00276B  1  A9 00 48 A9          set_a $7f,0
00276F  1  7F 28        
002771  1  D9 17 02             cmp abs1,y
002774  1  08 C9 7F F0          tst_a $7f,fzc
002778  1  03 20 FF FF  
00277C  1  68 48 C9 33  
002786  1  A9 00 48 A9          set_a $7e,0
00278A  1  7E 28        
00278C  1  D9 17 02             cmp abs1,y
00278F  1  08 C9 7E F0          tst_a $7e,fn
002793  1  03 20 FF FF  
002797  1  68 48 C9 B0  
0027A1  1  A9 FF 48 A9          set_a $80,$ff
0027A5  1  80 28        
0027A7  1  D9 17 02             cmp abs1,y
0027AA  1  08 C9 80 F0          tst_a $80,~fnz
0027AE  1  03 20 FF FF  
0027B2  1  68 48 C9 7D  
0027BC  1  A9 FF 48 A9          set_a $7f,$ff
0027C0  1  7F 28        
0027C2  1  D9 17 02             cmp abs1,y
0027C5  1  08 C9 7F F0          tst_a $7f,~fn
0027C9  1  03 20 FF FF  
0027CD  1  68 48 C9 7F  
0027D7  1  A9 FF 48 A9          set_a $7e,$ff
0027DB  1  7E 28        
0027DD  1  D9 17 02             cmp abs1,y
0027E0  1  08 C9 7E F0          tst_a $7e,~fzc
0027E4  1  03 20 FF FF  
0027E8  1  68 48 C9 FC  
0027F2  1               
0027F2  1  A9 00 48 A9          set_a $80,0
0027F6  1  80 28        
0027F8  1  C1 24                cmp (ind1,x)
0027FA  1  08 C9 80 F0          tst_a $80,fc
0027FE  1  03 20 FF FF  
002802  1  68 48 C9 31  
00280C  1  A9 00 48 A9          set_a $7f,0
002810  1  7F 28        
002812  1  C1 24                cmp (ind1,x)
002814  1  08 C9 7F F0          tst_a $7f,fzc
002818  1  03 20 FF FF  
00281C  1  68 48 C9 33  
002826  1  A9 00 48 A9          set_a $7e,0
00282A  1  7E 28        
00282C  1  C1 24                cmp (ind1,x)
00282E  1  08 C9 7E F0          tst_a $7e,fn
002832  1  03 20 FF FF  
002836  1  68 48 C9 B0  
002840  1  A9 FF 48 A9          set_a $80,$ff
002844  1  80 28        
002846  1  C1 24                cmp (ind1,x)
002848  1  08 C9 80 F0          tst_a $80,~fnz
00284C  1  03 20 FF FF  
002850  1  68 48 C9 7D  
00285A  1  A9 FF 48 A9          set_a $7f,$ff
00285E  1  7F 28        
002860  1  C1 24                cmp (ind1,x)
002862  1  08 C9 7F F0          tst_a $7f,~fn
002866  1  03 20 FF FF  
00286A  1  68 48 C9 7F  
002874  1  A9 FF 48 A9          set_a $7e,$ff
002878  1  7E 28        
00287A  1  C1 24                cmp (ind1,x)
00287C  1  08 C9 7E F0          tst_a $7e,~fzc
002880  1  03 20 FF FF  
002884  1  68 48 C9 FC  
00288E  1               
00288E  1  A9 00 48 A9          set_a $80,0
002892  1  80 28        
002894  1  D1 24                cmp (ind1),y
002896  1  08 C9 80 F0          tst_a $80,fc
00289A  1  03 20 FF FF  
00289E  1  68 48 C9 31  
0028A8  1  A9 00 48 A9          set_a $7f,0
0028AC  1  7F 28        
0028AE  1  D1 24                cmp (ind1),y
0028B0  1  08 C9 7F F0          tst_a $7f,fzc
0028B4  1  03 20 FF FF  
0028B8  1  68 48 C9 33  
0028C2  1  A9 00 48 A9          set_a $7e,0
0028C6  1  7E 28        
0028C8  1  D1 24                cmp (ind1),y
0028CA  1  08 C9 7E F0          tst_a $7e,fn
0028CE  1  03 20 FF FF  
0028D2  1  68 48 C9 B0  
0028DC  1  A9 FF 48 A9          set_a $80,$ff
0028E0  1  80 28        
0028E2  1  D1 24                cmp (ind1),y
0028E4  1  08 C9 80 F0          tst_a $80,~fnz
0028E8  1  03 20 FF FF  
0028EC  1  68 48 C9 7D  
0028F6  1  A9 FF 48 A9          set_a $7f,$ff
0028FA  1  7F 28        
0028FC  1  D1 24                cmp (ind1),y
0028FE  1  08 C9 7F F0          tst_a $7f,~fn
002902  1  03 20 FF FF  
002906  1  68 48 C9 7F  
002910  1  A9 FF 48 A9          set_a $7e,$ff
002914  1  7E 28        
002916  1  D1 24                cmp (ind1),y
002918  1  08 C9 7E F0          tst_a $7e,~fzc
00291C  1  03 20 FF FF  
002920  1  68 48 C9 FC  
00292A  1  AD 00 02 C9          next_test
00292E  1  1C F0 03 20  
002932  1  FF FF A9 1D  
002939  1               
002939  1               ; testing shifts - ASL LSR ROL ROR all addressing modes
002939  1               ; shifts - accumulator
002939  1  A2 03                ldx #3
00293B  1               tasl:
00293B  1  A9 00 48 B5          set_ax zp1,0
00293F  1  13 28        
002941  1  0A                   asl a
002942  1  08 DD 20 02          tst_ax rASL,fASL,0
002946  1  F0 03 20 FF  
00294A  1  FF 68 49 30  
002956  1  CA                   dex
002957  1  10 E2                bpl tasl
002959  1  A2 03                ldx #3
00295B  1               tasl1:
00295B  1  A9 FF 48 B5          set_ax zp1,$ff
00295F  1  13 28        
002961  1  0A                   asl a
002962  1  08 DD 20 02          tst_ax rASL,fASL,$ff-fnzc
002966  1  F0 03 20 FF  
00296A  1  FF 68 49 7C  
002976  1  CA                   dex
002977  1  10 E2                bpl tasl1
002979  1               
002979  1  A2 03                ldx #3
00297B  1               tlsr:
00297B  1  A9 00 48 B5          set_ax zp1,0
00297F  1  13 28        
002981  1  4A                   lsr a
002982  1  08 DD 28 02          tst_ax rLSR,fLSR,0
002986  1  F0 03 20 FF  
00298A  1  FF 68 49 30  
002996  1  CA                   dex
002997  1  10 E2                bpl tlsr
002999  1  A2 03                ldx #3
00299B  1               tlsr1:
00299B  1  A9 FF 48 B5          set_ax zp1,$ff
00299F  1  13 28        
0029A1  1  4A                   lsr a
0029A2  1  08 DD 28 02          tst_ax rLSR,fLSR,$ff-fnzc
0029A6  1  F0 03 20 FF  
0029AA  1  FF 68 49 7C  
0029B6  1  CA                   dex
0029B7  1  10 E2                bpl tlsr1
0029B9  1               
0029B9  1  A2 03                ldx #3
0029BB  1               trol:
0029BB  1  A9 00 48 B5          set_ax zp1,0
0029BF  1  13 28        
0029C1  1  2A                   rol a
0029C2  1  08 DD 20 02          tst_ax rROL,fROL,0
0029C6  1  F0 03 20 FF  
0029CA  1  FF 68 49 30  
0029D6  1  CA                   dex
0029D7  1  10 E2                bpl trol
0029D9  1  A2 03                ldx #3
0029DB  1               trol1:
0029DB  1  A9 FE 48 B5          set_ax zp1,$ff-fc
0029DF  1  13 28        
0029E1  1  2A                   rol a
0029E2  1  08 DD 20 02          tst_ax rROL,fROL,$ff-fnzc
0029E6  1  F0 03 20 FF  
0029EA  1  FF 68 49 7C  
0029F6  1  CA                   dex
0029F7  1  10 E2                bpl trol1
0029F9  1               
0029F9  1  A2 03                ldx #3
0029FB  1               trolc:
0029FB  1  A9 01 48 B5          set_ax zp1,fc
0029FF  1  13 28        
002A01  1  2A                   rol a
002A02  1  08 DD 24 02          tst_ax rROLc,fROLc,0
002A06  1  F0 03 20 FF  
002A0A  1  FF 68 49 30  
002A16  1  CA                   dex
002A17  1  10 E2                bpl trolc
002A19  1  A2 03                ldx #3
002A1B  1               trolc1:
002A1B  1  A9 FF 48 B5          set_ax zp1,$ff
002A1F  1  13 28        
002A21  1  2A                   rol a
002A22  1  08 DD 24 02          tst_ax rROLc,fROLc,$ff-fnzc
002A26  1  F0 03 20 FF  
002A2A  1  FF 68 49 7C  
002A36  1  CA                   dex
002A37  1  10 E2                bpl trolc1
002A39  1               
002A39  1  A2 03                ldx #3
002A3B  1               tror:
002A3B  1  A9 00 48 B5          set_ax zp1,0
002A3F  1  13 28        
002A41  1  6A                   ror a
002A42  1  08 DD 28 02          tst_ax rROR,fROR,0
002A46  1  F0 03 20 FF  
002A4A  1  FF 68 49 30  
002A56  1  CA                   dex
002A57  1  10 E2                bpl tror
002A59  1  A2 03                ldx #3
002A5B  1               tror1:
002A5B  1  A9 FE 48 B5          set_ax zp1,$ff-fc
002A5F  1  13 28        
002A61  1  6A                   ror a
002A62  1  08 DD 28 02          tst_ax rROR,fROR,$ff-fnzc
002A66  1  F0 03 20 FF  
002A6A  1  FF 68 49 7C  
002A76  1  CA                   dex
002A77  1  10 E2                bpl tror1
002A79  1               
002A79  1  A2 03                ldx #3
002A7B  1               trorc:
002A7B  1  A9 01 48 B5          set_ax zp1,fc
002A7F  1  13 28        
002A81  1  6A                   ror a
002A82  1  08 DD 2C 02          tst_ax rRORc,fRORc,0
002A86  1  F0 03 20 FF  
002A8A  1  FF 68 49 30  
002A96  1  CA                   dex
002A97  1  10 E2                bpl trorc
002A99  1  A2 03                ldx #3
002A9B  1               trorc1:
002A9B  1  A9 FF 48 B5          set_ax zp1,$ff
002A9F  1  13 28        
002AA1  1  6A                   ror a
002AA2  1  08 DD 2C 02          tst_ax rRORc,fRORc,$ff-fnzc
002AA6  1  F0 03 20 FF  
002AAA  1  FF 68 49 7C  
002AB6  1  CA                   dex
002AB7  1  10 E2                bpl trorc1
002AB9  1  AD 00 02 C9          next_test
002ABD  1  1D F0 03 20  
002AC1  1  FF FF A9 1E  
002AC8  1               
002AC8  1               ; shifts - zeropage
002AC8  1  A2 03                ldx #3
002ACA  1               tasl2:
002ACA  1  A9 00 48 B5          set_z zp1,0
002ACE  1  13 85 0C 28  
002AD2  1  06 0C                asl zpt
002AD4  1  08 A5 0C DD          tst_z rASL,fASL,0
002AD8  1  20 02 F0 03  
002ADC  1  20 FF FF 68  
002AEA  1  CA                   dex
002AEB  1  10 DD                bpl tasl2
002AED  1  A2 03                ldx #3
002AEF  1               tasl3:
002AEF  1  A9 FF 48 B5          set_z zp1,$ff
002AF3  1  13 85 0C 28  
002AF7  1  06 0C                asl zpt
002AF9  1  08 A5 0C DD          tst_z rASL,fASL,$ff-fnzc
002AFD  1  20 02 F0 03  
002B01  1  20 FF FF 68  
002B0F  1  CA                   dex
002B10  1  10 DD                bpl tasl3
002B12  1               
002B12  1  A2 03                ldx #3
002B14  1               tlsr2:
002B14  1  A9 00 48 B5          set_z zp1,0
002B18  1  13 85 0C 28  
002B1C  1  46 0C                lsr zpt
002B1E  1  08 A5 0C DD          tst_z rLSR,fLSR,0
002B22  1  28 02 F0 03  
002B26  1  20 FF FF 68  
002B34  1  CA                   dex
002B35  1  10 DD                bpl tlsr2
002B37  1  A2 03                ldx #3
002B39  1               tlsr3:
002B39  1  A9 FF 48 B5          set_z zp1,$ff
002B3D  1  13 85 0C 28  
002B41  1  46 0C                lsr zpt
002B43  1  08 A5 0C DD          tst_z rLSR,fLSR,$ff-fnzc
002B47  1  28 02 F0 03  
002B4B  1  20 FF FF 68  
002B59  1  CA                   dex
002B5A  1  10 DD                bpl tlsr3
002B5C  1               
002B5C  1  A2 03                ldx #3
002B5E  1               trol2:
002B5E  1  A9 00 48 B5          set_z zp1,0
002B62  1  13 85 0C 28  
002B66  1  26 0C                rol zpt
002B68  1  08 A5 0C DD          tst_z rROL,fROL,0
002B6C  1  20 02 F0 03  
002B70  1  20 FF FF 68  
002B7E  1  CA                   dex
002B7F  1  10 DD                bpl trol2
002B81  1  A2 03                ldx #3
002B83  1               trol3:
002B83  1  A9 FE 48 B5          set_z zp1,$ff-fc
002B87  1  13 85 0C 28  
002B8B  1  26 0C                rol zpt
002B8D  1  08 A5 0C DD          tst_z rROL,fROL,$ff-fnzc
002B91  1  20 02 F0 03  
002B95  1  20 FF FF 68  
002BA3  1  CA                   dex
002BA4  1  10 DD                bpl trol3
002BA6  1               
002BA6  1  A2 03                ldx #3
002BA8  1               trolc2:
002BA8  1  A9 01 48 B5          set_z zp1,fc
002BAC  1  13 85 0C 28  
002BB0  1  26 0C                rol zpt
002BB2  1  08 A5 0C DD          tst_z rROLc,fROLc,0
002BB6  1  24 02 F0 03  
002BBA  1  20 FF FF 68  
002BC8  1  CA                   dex
002BC9  1  10 DD                bpl trolc2
002BCB  1  A2 03                ldx #3
002BCD  1               trolc3:
002BCD  1  A9 FF 48 B5          set_z zp1,$ff
002BD1  1  13 85 0C 28  
002BD5  1  26 0C                rol zpt
002BD7  1  08 A5 0C DD          tst_z rROLc,fROLc,$ff-fnzc
002BDB  1  24 02 F0 03  
002BDF  1  20 FF FF 68  
002BED  1  CA                   dex
002BEE  1  10 DD                bpl trolc3
002BF0  1               
002BF0  1  A2 03                ldx #3
002BF2  1               tror2:
002BF2  1  A9 00 48 B5          set_z zp1,0
002BF6  1  13 85 0C 28  
002BFA  1  66 0C                ror zpt
002BFC  1  08 A5 0C DD          tst_z rROR,fROR,0
002C00  1  28 02 F0 03  
002C04  1  20 FF FF 68  
002C12  1  CA                   dex
002C13  1  10 DD                bpl tror2
002C15  1  A2 03                ldx #3
002C17  1               tror3:
002C17  1  A9 FE 48 B5          set_z zp1,$ff-fc
002C1B  1  13 85 0C 28  
002C1F  1  66 0C                ror zpt
002C21  1  08 A5 0C DD          tst_z rROR,fROR,$ff-fnzc
002C25  1  28 02 F0 03  
002C29  1  20 FF FF 68  
002C37  1  CA                   dex
002C38  1  10 DD                bpl tror3
002C3A  1               
002C3A  1  A2 03                ldx #3
002C3C  1               trorc2:
002C3C  1  A9 01 48 B5          set_z zp1,fc
002C40  1  13 85 0C 28  
002C44  1  66 0C                ror zpt
002C46  1  08 A5 0C DD          tst_z rRORc,fRORc,0
002C4A  1  2C 02 F0 03  
002C4E  1  20 FF FF 68  
002C5C  1  CA                   dex
002C5D  1  10 DD                bpl trorc2
002C5F  1  A2 03                ldx #3
002C61  1               trorc3:
002C61  1  A9 FF 48 B5          set_z zp1,$ff
002C65  1  13 85 0C 28  
002C69  1  66 0C                ror zpt
002C6B  1  08 A5 0C DD          tst_z rRORc,fRORc,$ff-fnzc
002C6F  1  2C 02 F0 03  
002C73  1  20 FF FF 68  
002C81  1  CA                   dex
002C82  1  10 DD                bpl trorc3
002C84  1  AD 00 02 C9          next_test
002C88  1  1E F0 03 20  
002C8C  1  FF FF A9 1F  
002C93  1               
002C93  1               ; shifts - absolute
002C93  1  A2 03                ldx #3
002C95  1               tasl4:
002C95  1  A9 00 48 B5          set_abs zp1,0
002C99  1  13 8D 03 02  
002C9D  1  28           
002C9E  1  0E 03 02             asl abst
002CA1  1  08 AD 03 02          tst_abs rASL,fASL,0
002CA5  1  DD 20 02 F0  
002CA9  1  03 20 FF FF  
002CB8  1  CA                   dex
002CB9  1  10 DA                bpl tasl4
002CBB  1  A2 03                ldx #3
002CBD  1               tasl5:
002CBD  1  A9 FF 48 B5          set_abs zp1,$ff
002CC1  1  13 8D 03 02  
002CC5  1  28           
002CC6  1  0E 03 02             asl abst
002CC9  1  08 AD 03 02          tst_abs rASL,fASL,$ff-fnzc
002CCD  1  DD 20 02 F0  
002CD1  1  03 20 FF FF  
002CE0  1  CA                   dex
002CE1  1  10 DA                bpl tasl5
002CE3  1               
002CE3  1  A2 03                ldx #3
002CE5  1               tlsr4:
002CE5  1  A9 00 48 B5          set_abs zp1,0
002CE9  1  13 8D 03 02  
002CED  1  28           
002CEE  1  4E 03 02             lsr abst
002CF1  1  08 AD 03 02          tst_abs rLSR,fLSR,0
002CF5  1  DD 28 02 F0  
002CF9  1  03 20 FF FF  
002D08  1  CA                   dex
002D09  1  10 DA                bpl tlsr4
002D0B  1  A2 03                ldx #3
002D0D  1               tlsr5:
002D0D  1  A9 FF 48 B5          set_abs zp1,$ff
002D11  1  13 8D 03 02  
002D15  1  28           
002D16  1  4E 03 02             lsr abst
002D19  1  08 AD 03 02          tst_abs rLSR,fLSR,$ff-fnzc
002D1D  1  DD 28 02 F0  
002D21  1  03 20 FF FF  
002D30  1  CA                   dex
002D31  1  10 DA                bpl tlsr5
002D33  1               
002D33  1  A2 03                ldx #3
002D35  1               trol4:
002D35  1  A9 00 48 B5          set_abs zp1,0
002D39  1  13 8D 03 02  
002D3D  1  28           
002D3E  1  2E 03 02             rol abst
002D41  1  08 AD 03 02          tst_abs rROL,fROL,0
002D45  1  DD 20 02 F0  
002D49  1  03 20 FF FF  
002D58  1  CA                   dex
002D59  1  10 DA                bpl trol4
002D5B  1  A2 03                ldx #3
002D5D  1               trol5:
002D5D  1  A9 FE 48 B5          set_abs zp1,$ff-fc
002D61  1  13 8D 03 02  
002D65  1  28           
002D66  1  2E 03 02             rol abst
002D69  1  08 AD 03 02          tst_abs rROL,fROL,$ff-fnzc
002D6D  1  DD 20 02 F0  
002D71  1  03 20 FF FF  
002D80  1  CA                   dex
002D81  1  10 DA                bpl trol5
002D83  1               
002D83  1  A2 03                ldx #3
002D85  1               trolc4:
002D85  1  A9 01 48 B5          set_abs zp1,fc
002D89  1  13 8D 03 02  
002D8D  1  28           
002D8E  1  2E 03 02             rol abst
002D91  1  08 AD 03 02          tst_abs rROLc,fROLc,0
002D95  1  DD 24 02 F0  
002D99  1  03 20 FF FF  
002DA8  1  CA                   dex
002DA9  1  10 DA                bpl trolc4
002DAB  1  A2 03                ldx #3
002DAD  1               trolc5:
002DAD  1  A9 FF 48 B5          set_abs zp1,$ff
002DB1  1  13 8D 03 02  
002DB5  1  28           
002DB6  1  2E 03 02             rol abst
002DB9  1  08 AD 03 02          tst_abs rROLc,fROLc,$ff-fnzc
002DBD  1  DD 24 02 F0  
002DC1  1  03 20 FF FF  
002DD0  1  CA                   dex
002DD1  1  10 DA                bpl trolc5
002DD3  1               
002DD3  1  A2 03                ldx #3
002DD5  1               tror4:
002DD5  1  A9 00 48 B5          set_abs zp1,0
002DD9  1  13 8D 03 02  
002DDD  1  28           
002DDE  1  6E 03 02             ror abst
002DE1  1  08 AD 03 02          tst_abs rROR,fROR,0
002DE5  1  DD 28 02 F0  
002DE9  1  03 20 FF FF  
002DF8  1  CA                   dex
002DF9  1  10 DA                bpl tror4
002DFB  1  A2 03                ldx #3
002DFD  1               tror5:
002DFD  1  A9 FE 48 B5          set_abs zp1,$ff-fc
002E01  1  13 8D 03 02  
002E05  1  28           
002E06  1  6E 03 02             ror abst
002E09  1  08 AD 03 02          tst_abs rROR,fROR,$ff-fnzc
002E0D  1  DD 28 02 F0  
002E11  1  03 20 FF FF  
002E20  1  CA                   dex
002E21  1  10 DA                bpl tror5
002E23  1               
002E23  1  A2 03                ldx #3
002E25  1               trorc4:
002E25  1  A9 01 48 B5          set_abs zp1,fc
002E29  1  13 8D 03 02  
002E2D  1  28           
002E2E  1  6E 03 02             ror abst
002E31  1  08 AD 03 02          tst_abs rRORc,fRORc,0
002E35  1  DD 2C 02 F0  
002E39  1  03 20 FF FF  
002E48  1  CA                   dex
002E49  1  10 DA                bpl trorc4
002E4B  1  A2 03                ldx #3
002E4D  1               trorc5:
002E4D  1  A9 FF 48 B5          set_abs zp1,$ff
002E51  1  13 8D 03 02  
002E55  1  28           
002E56  1  6E 03 02             ror abst
002E59  1  08 AD 03 02          tst_abs rRORc,fRORc,$ff-fnzc
002E5D  1  DD 2C 02 F0  
002E61  1  03 20 FF FF  
002E70  1  CA                   dex
002E71  1  10 DA                bpl trorc5
002E73  1  AD 00 02 C9          next_test
002E77  1  1F F0 03 20  
002E7B  1  FF FF A9 20  
002E82  1               
002E82  1               ; shifts - zp indexed
002E82  1  A2 03                ldx #3
002E84  1               tasl6:
002E84  1  A9 00 48 B5          set_zx zp1,0
002E88  1  13 95 0C 28  
002E8C  1  16 0C                asl zpt,x
002E8E  1  08 B5 0C DD          tst_zx rASL,fASL,0
002E92  1  20 02 F0 03  
002E96  1  20 FF FF 68  
002EA4  1  CA                   dex
002EA5  1  10 DD                bpl tasl6
002EA7  1  A2 03                ldx #3
002EA9  1               tasl7:
002EA9  1  A9 FF 48 B5          set_zx zp1,$ff
002EAD  1  13 95 0C 28  
002EB1  1  16 0C                asl zpt,x
002EB3  1  08 B5 0C DD          tst_zx rASL,fASL,$ff-fnzc
002EB7  1  20 02 F0 03  
002EBB  1  20 FF FF 68  
002EC9  1  CA                   dex
002ECA  1  10 DD                bpl tasl7
002ECC  1               
002ECC  1  A2 03                ldx #3
002ECE  1               tlsr6:
002ECE  1  A9 00 48 B5          set_zx zp1,0
002ED2  1  13 95 0C 28  
002ED6  1  56 0C                lsr zpt,x
002ED8  1  08 B5 0C DD          tst_zx rLSR,fLSR,0
002EDC  1  28 02 F0 03  
002EE0  1  20 FF FF 68  
002EEE  1  CA                   dex
002EEF  1  10 DD                bpl tlsr6
002EF1  1  A2 03                ldx #3
002EF3  1               tlsr7:
002EF3  1  A9 FF 48 B5          set_zx zp1,$ff
002EF7  1  13 95 0C 28  
002EFB  1  56 0C                lsr zpt,x
002EFD  1  08 B5 0C DD          tst_zx rLSR,fLSR,$ff-fnzc
002F01  1  28 02 F0 03  
002F05  1  20 FF FF 68  
002F13  1  CA                   dex
002F14  1  10 DD                bpl tlsr7
002F16  1               
002F16  1  A2 03                ldx #3
002F18  1               trol6:
002F18  1  A9 00 48 B5          set_zx zp1,0
002F1C  1  13 95 0C 28  
002F20  1  36 0C                rol zpt,x
002F22  1  08 B5 0C DD          tst_zx rROL,fROL,0
002F26  1  20 02 F0 03  
002F2A  1  20 FF FF 68  
002F38  1  CA                   dex
002F39  1  10 DD                bpl trol6
002F3B  1  A2 03                ldx #3
002F3D  1               trol7:
002F3D  1  A9 FE 48 B5          set_zx zp1,$ff-fc
002F41  1  13 95 0C 28  
002F45  1  36 0C                rol zpt,x
002F47  1  08 B5 0C DD          tst_zx rROL,fROL,$ff-fnzc
002F4B  1  20 02 F0 03  
002F4F  1  20 FF FF 68  
002F5D  1  CA                   dex
002F5E  1  10 DD                bpl trol7
002F60  1               
002F60  1  A2 03                ldx #3
002F62  1               trolc6:
002F62  1  A9 01 48 B5          set_zx zp1,fc
002F66  1  13 95 0C 28  
002F6A  1  36 0C                rol zpt,x
002F6C  1  08 B5 0C DD          tst_zx rROLc,fROLc,0
002F70  1  24 02 F0 03  
002F74  1  20 FF FF 68  
002F82  1  CA                   dex
002F83  1  10 DD                bpl trolc6
002F85  1  A2 03                ldx #3
002F87  1               trolc7:
002F87  1  A9 FF 48 B5          set_zx zp1,$ff
002F8B  1  13 95 0C 28  
002F8F  1  36 0C                rol zpt,x
002F91  1  08 B5 0C DD          tst_zx rROLc,fROLc,$ff-fnzc
002F95  1  24 02 F0 03  
002F99  1  20 FF FF 68  
002FA7  1  CA                   dex
002FA8  1  10 DD                bpl trolc7
002FAA  1               
002FAA  1  A2 03                ldx #3
002FAC  1               tror6:
002FAC  1  A9 00 48 B5          set_zx zp1,0
002FB0  1  13 95 0C 28  
002FB4  1  76 0C                ror zpt,x
002FB6  1  08 B5 0C DD          tst_zx rROR,fROR,0
002FBA  1  28 02 F0 03  
002FBE  1  20 FF FF 68  
002FCC  1  CA                   dex
002FCD  1  10 DD                bpl tror6
002FCF  1  A2 03                ldx #3
002FD1  1               tror7:
002FD1  1  A9 FE 48 B5          set_zx zp1,$ff-fc
002FD5  1  13 95 0C 28  
002FD9  1  76 0C                ror zpt,x
002FDB  1  08 B5 0C DD          tst_zx rROR,fROR,$ff-fnzc
002FDF  1  28 02 F0 03  
002FE3  1  20 FF FF 68  
002FF1  1  CA                   dex
002FF2  1  10 DD                bpl tror7
002FF4  1               
002FF4  1  A2 03                ldx #3
002FF6  1               trorc6:
002FF6  1  A9 01 48 B5          set_zx zp1,fc
002FFA  1  13 95 0C 28  
002FFE  1  76 0C                ror zpt,x
003000  1  08 B5 0C DD          tst_zx rRORc,fRORc,0
003004  1  2C 02 F0 03  
003008  1  20 FF FF 68  
003016  1  CA                   dex
003017  1  10 DD                bpl trorc6
003019  1  A2 03                ldx #3
00301B  1               trorc7:
00301B  1  A9 FF 48 B5          set_zx zp1,$ff
00301F  1  13 95 0C 28  
003023  1  76 0C                ror zpt,x
003025  1  08 B5 0C DD          tst_zx rRORc,fRORc,$ff-fnzc
003029  1  2C 02 F0 03  
00302D  1  20 FF FF 68  
00303B  1  CA                   dex
00303C  1  10 DD                bpl trorc7
00303E  1  AD 00 02 C9          next_test
003042  1  20 F0 03 20  
003046  1  FF FF A9 21  
00304D  1               
00304D  1               ; shifts - abs indexed
00304D  1  A2 03                ldx #3
00304F  1               tasl8:
00304F  1  A9 00 48 B5          set_absx zp1,0
003053  1  13 9D 03 02  
003057  1  28           
003058  1  1E 03 02             asl abst,x
00305B  1  08 BD 03 02          tst_absx rASL,fASL,0
00305F  1  DD 20 02 F0  
003063  1  03 20 FF FF  
003072  1  CA                   dex
003073  1  10 DA                bpl tasl8
003075  1  A2 03                ldx #3
003077  1               tasl9:
003077  1  A9 FF 48 B5          set_absx zp1,$ff
00307B  1  13 9D 03 02  
00307F  1  28           
003080  1  1E 03 02             asl abst,x
003083  1  08 BD 03 02          tst_absx rASL,fASL,$ff-fnzc
003087  1  DD 20 02 F0  
00308B  1  03 20 FF FF  
00309A  1  CA                   dex
00309B  1  10 DA                bpl tasl9
00309D  1               
00309D  1  A2 03                ldx #3
00309F  1               tlsr8:
00309F  1  A9 00 48 B5          set_absx zp1,0
0030A3  1  13 9D 03 02  
0030A7  1  28           
0030A8  1  5E 03 02             lsr abst,x
0030AB  1  08 BD 03 02          tst_absx rLSR,fLSR,0
0030AF  1  DD 28 02 F0  
0030B3  1  03 20 FF FF  
0030C2  1  CA                   dex
0030C3  1  10 DA                bpl tlsr8
0030C5  1  A2 03                ldx #3
0030C7  1               tlsr9:
0030C7  1  A9 FF 48 B5          set_absx zp1,$ff
0030CB  1  13 9D 03 02  
0030CF  1  28           
0030D0  1  5E 03 02             lsr abst,x
0030D3  1  08 BD 03 02          tst_absx rLSR,fLSR,$ff-fnzc
0030D7  1  DD 28 02 F0  
0030DB  1  03 20 FF FF  
0030EA  1  CA                   dex
0030EB  1  10 DA                bpl tlsr9
0030ED  1               
0030ED  1  A2 03                ldx #3
0030EF  1               trol8:
0030EF  1  A9 00 48 B5          set_absx zp1,0
0030F3  1  13 9D 03 02  
0030F7  1  28           
0030F8  1  3E 03 02             rol abst,x
0030FB  1  08 BD 03 02          tst_absx rROL,fROL,0
0030FF  1  DD 20 02 F0  
003103  1  03 20 FF FF  
003112  1  CA                   dex
003113  1  10 DA                bpl trol8
003115  1  A2 03                ldx #3
003117  1               trol9:
003117  1  A9 FE 48 B5          set_absx zp1,$ff-fc
00311B  1  13 9D 03 02  
00311F  1  28           
003120  1  3E 03 02             rol abst,x
003123  1  08 BD 03 02          tst_absx rROL,fROL,$ff-fnzc
003127  1  DD 20 02 F0  
00312B  1  03 20 FF FF  
00313A  1  CA                   dex
00313B  1  10 DA                bpl trol9
00313D  1               
00313D  1  A2 03                ldx #3
00313F  1               trolc8:
00313F  1  A9 01 48 B5          set_absx zp1,fc
003143  1  13 9D 03 02  
003147  1  28           
003148  1  3E 03 02             rol abst,x
00314B  1  08 BD 03 02          tst_absx rROLc,fROLc,0
00314F  1  DD 24 02 F0  
003153  1  03 20 FF FF  
003162  1  CA                   dex
003163  1  10 DA                bpl trolc8
003165  1  A2 03                ldx #3
003167  1               trolc9:
003167  1  A9 FF 48 B5          set_absx zp1,$ff
00316B  1  13 9D 03 02  
00316F  1  28           
003170  1  3E 03 02             rol abst,x
003173  1  08 BD 03 02          tst_absx rROLc,fROLc,$ff-fnzc
003177  1  DD 24 02 F0  
00317B  1  03 20 FF FF  
00318A  1  CA                   dex
00318B  1  10 DA                bpl trolc9
00318D  1               
00318D  1  A2 03                ldx #3
00318F  1               tror8:
00318F  1  A9 00 48 B5          set_absx zp1,0
003193  1  13 9D 03 02  
003197  1  28           
003198  1  7E 03 02             ror abst,x
00319B  1  08 BD 03 02          tst_absx rROR,fROR,0
00319F  1  DD 28 02 F0  
0031A3  1  03 20 FF FF  
0031B2  1  CA                   dex
0031B3  1  10 DA                bpl tror8
0031B5  1  A2 03                ldx #3
0031B7  1               tror9:
0031B7  1  A9 FE 48 B5          set_absx zp1,$ff-fc
0031BB  1  13 9D 03 02  
0031BF  1  28           
0031C0  1  7E 03 02             ror abst,x
0031C3  1  08 BD 03 02          tst_absx rROR,fROR,$ff-fnzc
0031C7  1  DD 28 02 F0  
0031CB  1  03 20 FF FF  
0031DA  1  CA                   dex
0031DB  1  10 DA                bpl tror9
0031DD  1               
0031DD  1  A2 03                ldx #3
0031DF  1               trorc8:
0031DF  1  A9 01 48 B5          set_absx zp1,fc
0031E3  1  13 9D 03 02  
0031E7  1  28           
0031E8  1  7E 03 02             ror abst,x
0031EB  1  08 BD 03 02          tst_absx rRORc,fRORc,0
0031EF  1  DD 2C 02 F0  
0031F3  1  03 20 FF FF  
003202  1  CA                   dex
003203  1  10 DA                bpl trorc8
003205  1  A2 03                ldx #3
003207  1               trorc9:
003207  1  A9 FF 48 B5          set_absx zp1,$ff
00320B  1  13 9D 03 02  
00320F  1  28           
003210  1  7E 03 02             ror abst,x
003213  1  08 BD 03 02          tst_absx rRORc,fRORc,$ff-fnzc
003217  1  DD 2C 02 F0  
00321B  1  03 20 FF FF  
00322A  1  CA                   dex
00322B  1  10 DA                bpl trorc9
00322D  1  AD 00 02 C9          next_test
003231  1  21 F0 03 20  
003235  1  FF FF A9 22  
00323C  1               
00323C  1               ; testing memory increment/decrement - INC DEC all addressing modes
00323C  1               ; zeropage
00323C  1  A2 00                ldx #0
00323E  1  A9 7E                lda #$7e
003240  1  85 0C                sta zpt
003242  1               tinc:
003242  1  A9 00 48 28          set_stat 0
003246  1  E6 0C                inc zpt
003248  1  08 A5 0C DD          tst_z rINC,fINC,0
00324C  1  40 02 F0 03  
003250  1  20 FF FF 68  
00325E  1  E8                   inx
00325F  1  E0 02                cpx #2
003261  1  D0 04                bne tinc1
003263  1  A9 FE                lda #$fe
003265  1  85 0C                sta zpt
003267  1  E0 05        tinc1:  cpx #5
003269  1  D0 D7                bne tinc
00326B  1  CA                   dex
00326C  1  E6 0C                inc zpt
00326E  1               tdec:
00326E  1  A9 00 48 28          set_stat 0
003272  1  C6 0C                dec zpt
003274  1  08 A5 0C DD          tst_z rINC,fINC,0
003278  1  40 02 F0 03  
00327C  1  20 FF FF 68  
00328A  1  CA                   dex
00328B  1  30 0A                bmi tdec1
00328D  1  E0 01                cpx #1
00328F  1  D0 DD                bne tdec
003291  1  A9 81                lda #$81
003293  1  85 0C                sta zpt
003295  1  D0 D7                bne tdec
003297  1               tdec1:
003297  1  A2 00                ldx #0
003299  1  A9 7E                lda #$7e
00329B  1  85 0C                sta zpt
00329D  1               tinc10:
00329D  1  A9 FF 48 28          set_stat $ff
0032A1  1  E6 0C                inc zpt
0032A3  1  08 A5 0C DD          tst_z rINC,fINC,$ff-fnz
0032A7  1  40 02 F0 03  
0032AB  1  20 FF FF 68  
0032B9  1  E8                   inx
0032BA  1  E0 02                cpx #2
0032BC  1  D0 04                bne tinc11
0032BE  1  A9 FE                lda #$fe
0032C0  1  85 0C                sta zpt
0032C2  1  E0 05        tinc11: cpx #5
0032C4  1  D0 D7                bne tinc10
0032C6  1  CA                   dex
0032C7  1  E6 0C                inc zpt
0032C9  1               tdec10:
0032C9  1  A9 FF 48 28          set_stat $ff
0032CD  1  C6 0C                dec zpt
0032CF  1  08 A5 0C DD          tst_z rINC,fINC,$ff-fnz
0032D3  1  40 02 F0 03  
0032D7  1  20 FF FF 68  
0032E5  1  CA                   dex
0032E6  1  30 0A                bmi tdec11
0032E8  1  E0 01                cpx #1
0032EA  1  D0 DD                bne tdec10
0032EC  1  A9 81                lda #$81
0032EE  1  85 0C                sta zpt
0032F0  1  D0 D7                bne tdec10
0032F2  1               tdec11:
0032F2  1  AD 00 02 C9          next_test
0032F6  1  22 F0 03 20  
0032FA  1  FF FF A9 23  
003301  1               
003301  1               ; absolute memory
003301  1  A2 00                ldx #0
003303  1  A9 7E                lda #$7e
003305  1  8D 03 02             sta abst
003308  1               tinc2:
003308  1  A9 00 48 28          set_stat 0
00330C  1  EE 03 02             inc abst
00330F  1  08 AD 03 02          tst_abs rINC,fINC,0
003313  1  DD 40 02 F0  
003317  1  03 20 FF FF  
003326  1  E8                   inx
003327  1  E0 02                cpx #2
003329  1  D0 05                bne tinc3
00332B  1  A9 FE                lda #$fe
00332D  1  8D 03 02             sta abst
003330  1  E0 05        tinc3:  cpx #5
003332  1  D0 D4                bne tinc2
003334  1  CA                   dex
003335  1  EE 03 02             inc abst
003338  1               tdec2:
003338  1  A9 00 48 28          set_stat 0
00333C  1  CE 03 02             dec abst
00333F  1  08 AD 03 02          tst_abs rINC,fINC,0
003343  1  DD 40 02 F0  
003347  1  03 20 FF FF  
003356  1  CA                   dex
003357  1  30 0B                bmi tdec3
003359  1  E0 01                cpx #1
00335B  1  D0 DB                bne tdec2
00335D  1  A9 81                lda #$81
00335F  1  8D 03 02             sta abst
003362  1  D0 D4                bne tdec2
003364  1               tdec3:
003364  1  A2 00                ldx #0
003366  1  A9 7E                lda #$7e
003368  1  8D 03 02             sta abst
00336B  1               tinc12:
00336B  1  A9 FF 48 28          set_stat $ff
00336F  1  EE 03 02             inc abst
003372  1  08 AD 03 02          tst_abs rINC,fINC,$ff-fnz
003376  1  DD 40 02 F0  
00337A  1  03 20 FF FF  
003389  1  E8                   inx
00338A  1  E0 02                cpx #2
00338C  1  D0 05                bne tinc13
00338E  1  A9 FE                lda #$fe
003390  1  8D 03 02             sta abst
003393  1  E0 05        tinc13:  cpx #5
003395  1  D0 D4                bne tinc12
003397  1  CA                   dex
003398  1  EE 03 02             inc abst
00339B  1               tdec12:
00339B  1  A9 FF 48 28          set_stat $ff
00339F  1  CE 03 02             dec abst
0033A2  1  08 AD 03 02          tst_abs rINC,fINC,$ff-fnz
0033A6  1  DD 40 02 F0  
0033AA  1  03 20 FF FF  
0033B9  1  CA                   dex
0033BA  1  30 0B                bmi tdec13
0033BC  1  E0 01                cpx #1
0033BE  1  D0 DB                bne tdec12
0033C0  1  A9 81                lda #$81
0033C2  1  8D 03 02             sta abst
0033C5  1  D0 D4                bne tdec12
0033C7  1               tdec13:
0033C7  1  AD 00 02 C9          next_test
0033CB  1  23 F0 03 20  
0033CF  1  FF FF A9 24  
0033D6  1               
0033D6  1               ; zeropage indexed
0033D6  1  A2 00                ldx #0
0033D8  1  A9 7E                lda #$7e
0033DA  1  95 0C        tinc4:  sta zpt,x
0033DC  1  A9 00 48 28          set_stat 0
0033E0  1  F6 0C                inc zpt,x
0033E2  1  08 B5 0C DD          tst_zx rINC,fINC,0
0033E6  1  40 02 F0 03  
0033EA  1  20 FF FF 68  
0033F8  1  B5 0C                lda zpt,x
0033FA  1  E8                   inx
0033FB  1  E0 02                cpx #2
0033FD  1  D0 02                bne tinc5
0033FF  1  A9 FE                lda #$fe
003401  1  E0 05        tinc5:  cpx #5
003403  1  D0 D5                bne tinc4
003405  1  CA                   dex
003406  1  A9 02                lda #2
003408  1  95 0C        tdec4:  sta zpt,x
00340A  1  A9 00 48 28          set_stat 0
00340E  1  D6 0C                dec zpt,x
003410  1  08 B5 0C DD          tst_zx rINC,fINC,0
003414  1  40 02 F0 03  
003418  1  20 FF FF 68  
003426  1  B5 0C                lda zpt,x
003428  1  CA                   dex
003429  1  30 08                bmi tdec5
00342B  1  E0 01                cpx #1
00342D  1  D0 D9                bne tdec4
00342F  1  A9 81                lda #$81
003431  1  D0 D5                bne tdec4
003433  1               tdec5:
003433  1  A2 00                ldx #0
003435  1  A9 7E                lda #$7e
003437  1  95 0C        tinc14: sta zpt,x
003439  1  A9 FF 48 28          set_stat $ff
00343D  1  F6 0C                inc zpt,x
00343F  1  08 B5 0C DD          tst_zx rINC,fINC,$ff-fnz
003443  1  40 02 F0 03  
003447  1  20 FF FF 68  
003455  1  B5 0C                lda zpt,x
003457  1  E8                   inx
003458  1  E0 02                cpx #2
00345A  1  D0 02                bne tinc15
00345C  1  A9 FE                lda #$fe
00345E  1  E0 05        tinc15: cpx #5
003460  1  D0 D5                bne tinc14
003462  1  CA                   dex
003463  1  A9 02                lda #2
003465  1  95 0C        tdec14: sta zpt,x
003467  1  A9 FF 48 28          set_stat $ff
00346B  1  D6 0C                dec zpt,x
00346D  1  08 B5 0C DD          tst_zx rINC,fINC,$ff-fnz
003471  1  40 02 F0 03  
003475  1  20 FF FF 68  
003483  1  B5 0C                lda zpt,x
003485  1  CA                   dex
003486  1  30 08                bmi tdec15
003488  1  E0 01                cpx #1
00348A  1  D0 D9                bne tdec14
00348C  1  A9 81                lda #$81
00348E  1  D0 D5                bne tdec14
003490  1               tdec15:
003490  1  AD 00 02 C9          next_test
003494  1  24 F0 03 20  
003498  1  FF FF A9 25  
00349F  1               
00349F  1               ; memory indexed
00349F  1  A2 00                ldx #0
0034A1  1  A9 7E                lda #$7e
0034A3  1  9D 03 02     tinc6:  sta abst,x
0034A6  1  A9 00 48 28          set_stat 0
0034AA  1  FE 03 02             inc abst,x
0034AD  1  08 BD 03 02          tst_absx rINC,fINC,0
0034B1  1  DD 40 02 F0  
0034B5  1  03 20 FF FF  
0034C4  1  BD 03 02             lda abst,x
0034C7  1  E8                   inx
0034C8  1  E0 02                cpx #2
0034CA  1  D0 02                bne tinc7
0034CC  1  A9 FE                lda #$fe
0034CE  1  E0 05        tinc7:  cpx #5
0034D0  1  D0 D1                bne tinc6
0034D2  1  CA                   dex
0034D3  1  A9 02                lda #2
0034D5  1  9D 03 02     tdec6:  sta abst,x
0034D8  1  A9 00 48 28          set_stat 0
0034DC  1  DE 03 02             dec abst,x
0034DF  1  08 BD 03 02          tst_absx rINC,fINC,0
0034E3  1  DD 40 02 F0  
0034E7  1  03 20 FF FF  
0034F6  1  BD 03 02             lda abst,x
0034F9  1  CA                   dex
0034FA  1  30 08                bmi tdec7
0034FC  1  E0 01                cpx #1
0034FE  1  D0 D5                bne tdec6
003500  1  A9 81                lda #$81
003502  1  D0 D1                bne tdec6
003504  1               tdec7:
003504  1  A2 00                ldx #0
003506  1  A9 7E                lda #$7e
003508  1  9D 03 02     tinc16: sta abst,x
00350B  1  A9 FF 48 28          set_stat $ff
00350F  1  FE 03 02             inc abst,x
003512  1  08 BD 03 02          tst_absx rINC,fINC,$ff-fnz
003516  1  DD 40 02 F0  
00351A  1  03 20 FF FF  
003529  1  BD 03 02             lda abst,x
00352C  1  E8                   inx
00352D  1  E0 02                cpx #2
00352F  1  D0 02                bne tinc17
003531  1  A9 FE                lda #$fe
003533  1  E0 05        tinc17: cpx #5
003535  1  D0 D1                bne tinc16
003537  1  CA                   dex
003538  1  A9 02                lda #2
00353A  1  9D 03 02     tdec16: sta abst,x
00353D  1  A9 FF 48 28          set_stat $ff
003541  1  DE 03 02             dec abst,x
003544  1  08 BD 03 02          tst_absx rINC,fINC,$ff-fnz
003548  1  DD 40 02 F0  
00354C  1  03 20 FF FF  
00355B  1  BD 03 02             lda abst,x
00355E  1  CA                   dex
00355F  1  30 08                bmi tdec17
003561  1  E0 01                cpx #1
003563  1  D0 D5                bne tdec16
003565  1  A9 81                lda #$81
003567  1  D0 D1                bne tdec16
003569  1               tdec17:
003569  1  AD 00 02 C9          next_test
00356D  1  25 F0 03 20  
003571  1  FF FF A9 26  
003578  1               
003578  1               ; testing logical instructions - AND EOR ORA all addressing modes
003578  1               ; AND
003578  1  A2 03                ldx #3          ;immediate
00357A  1  B5 1C        tand:   lda zpAN,x
00357C  1  8D 09 02             sta ex_andi+1   ;set AND # operand
00357F  1  A9 00 48 BD          set_ax  absANa,0
003583  1  5A 02 28     
003586  1  20 08 02             jsr ex_andi     ;execute AND # in RAM
003589  1  08 DD 62 02          tst_ax  absrlo,absflo,0
00358D  1  F0 03 20 FF  
003591  1  FF 68 49 30  
00359D  1  CA                   dex
00359E  1  10 DA                bpl tand
0035A0  1  A2 03                ldx #3
0035A2  1  B5 1C        tand1:  lda zpAN,x
0035A4  1  8D 09 02             sta ex_andi+1   ;set AND # operand
0035A7  1  A9 FF 48 BD          set_ax  absANa,$ff
0035AB  1  5A 02 28     
0035AE  1  20 08 02             jsr ex_andi     ;execute AND # in RAM
0035B1  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
0035B5  1  F0 03 20 FF  
0035B9  1  FF 68 49 7D  
0035C5  1  CA                   dex
0035C6  1  10 DA                bpl tand1
0035C8  1               
0035C8  1  A2 03                ldx #3      ;zp
0035CA  1  B5 1C        tand2:  lda zpAN,x
0035CC  1  85 0C                sta zpt
0035CE  1  A9 00 48 BD          set_ax  absANa,0
0035D2  1  5A 02 28     
0035D5  1  25 0C                and zpt
0035D7  1  08 DD 62 02          tst_ax  absrlo,absflo,0
0035DB  1  F0 03 20 FF  
0035DF  1  FF 68 49 30  
0035EB  1  CA                   dex
0035EC  1  10 DC                bpl tand2
0035EE  1  A2 03                ldx #3
0035F0  1  B5 1C        tand3:  lda zpAN,x
0035F2  1  85 0C                sta zpt
0035F4  1  A9 FF 48 BD          set_ax  absANa,$ff
0035F8  1  5A 02 28     
0035FB  1  25 0C                and zpt
0035FD  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003601  1  F0 03 20 FF  
003605  1  FF 68 49 7D  
003611  1  CA                   dex
003612  1  10 DC                bpl tand3
003614  1               
003614  1  A2 03                ldx #3      ;abs
003616  1  B5 1C        tand4:  lda zpAN,x
003618  1  8D 03 02             sta abst
00361B  1  A9 00 48 BD          set_ax  absANa,0
00361F  1  5A 02 28     
003622  1  2D 03 02             and abst
003625  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003629  1  F0 03 20 FF  
00362D  1  FF 68 49 30  
003639  1  CA                   dex
00363A  1  10 DA                bpl tand4
00363C  1  A2 03                ldx #3
00363E  1  B5 1C        tand5:  lda zpAN,x
003640  1  8D 03 02             sta abst
003643  1  A9 FF 48 BD          set_ax  absANa,$ff
003647  1  5A 02 28     
00364A  1  2D 03 02             and abst
00364D  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003651  1  F0 03 20 FF  
003655  1  FF 68 49 7D  
003661  1  CA                   dex
003662  1  10 02                bpl tand6
003664  1               
003664  1  A2 03                ldx #3      ;zp,x
003666  1               tand6:
003666  1  A9 00 48 BD          set_ax  absANa,0
00366A  1  5A 02 28     
00366D  1  35 1C                and zpAN,x
00366F  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003673  1  F0 03 20 FF  
003677  1  FF 68 49 30  
003683  1  CA                   dex
003684  1  10 E0                bpl tand6
003686  1  A2 03                ldx #3
003688  1               tand7:
003688  1  A9 FF 48 BD          set_ax  absANa,$ff
00368C  1  5A 02 28     
00368F  1  35 1C                and zpAN,x
003691  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003695  1  F0 03 20 FF  
003699  1  FF 68 49 7D  
0036A5  1  CA                   dex
0036A6  1  10 E0                bpl tand7
0036A8  1               
0036A8  1  A2 03                ldx #3      ;abs,x
0036AA  1               tand8:
0036AA  1  A9 00 48 BD          set_ax  absANa,0
0036AE  1  5A 02 28     
0036B1  1  3D 4E 02             and absAN,x
0036B4  1  08 DD 62 02          tst_ax  absrlo,absflo,0
0036B8  1  F0 03 20 FF  
0036BC  1  FF 68 49 30  
0036C8  1  CA                   dex
0036C9  1  10 DF                bpl tand8
0036CB  1  A2 03                ldx #3
0036CD  1               tand9:
0036CD  1  A9 FF 48 BD          set_ax  absANa,$ff
0036D1  1  5A 02 28     
0036D4  1  3D 4E 02             and absAN,x
0036D7  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
0036DB  1  F0 03 20 FF  
0036DF  1  FF 68 49 7D  
0036EB  1  CA                   dex
0036EC  1  10 DF                bpl tand9
0036EE  1               
0036EE  1  A0 03                ldy #3      ;abs,y
0036F0  1               tand10:
0036F0  1  A9 00 48 B9          set_ay  absANa,0
0036F4  1  5A 02 28     
0036F7  1  39 4E 02             and absAN,y
0036FA  1  08 D9 62 02          tst_ay  absrlo,absflo,0
0036FE  1  F0 03 20 FF  
003702  1  FF 68 49 30  
00370E  1  88                   dey
00370F  1  10 DF                bpl tand10
003711  1  A0 03                ldy #3
003713  1               tand11:
003713  1  A9 FF 48 B9          set_ay  absANa,$ff
003717  1  5A 02 28     
00371A  1  39 4E 02             and absAN,y
00371D  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003721  1  F0 03 20 FF  
003725  1  FF 68 49 7D  
003731  1  88                   dey
003732  1  10 DF                bpl tand11
003734  1               
003734  1  A2 06                ldx #6      ;(zp,x)
003736  1  A0 03                ldy #3
003738  1               tand12:
003738  1  A9 00 48 B9          set_ay  absANa,0
00373C  1  5A 02 28     
00373F  1  21 3A                and (indAN,x)
003741  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003745  1  F0 03 20 FF  
003749  1  FF 68 49 30  
003755  1  CA                   dex
003756  1  CA                   dex
003757  1  88                   dey
003758  1  10 DE                bpl tand12
00375A  1  A2 06                ldx #6
00375C  1  A0 03                ldy #3
00375E  1               tand13:
00375E  1  A9 FF 48 B9          set_ay  absANa,$ff
003762  1  5A 02 28     
003765  1  21 3A                and (indAN,x)
003767  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
00376B  1  F0 03 20 FF  
00376F  1  FF 68 49 7D  
00377B  1  CA                   dex
00377C  1  CA                   dex
00377D  1  88                   dey
00377E  1  10 DE                bpl tand13
003780  1               
003780  1  A0 03                ldy #3      ;(zp),y
003782  1               tand14:
003782  1  A9 00 48 B9          set_ay  absANa,0
003786  1  5A 02 28     
003789  1  31 3A                and (indAN),y
00378B  1  08 D9 62 02          tst_ay  absrlo,absflo,0
00378F  1  F0 03 20 FF  
003793  1  FF 68 49 30  
00379F  1  88                   dey
0037A0  1  10 E0                bpl tand14
0037A2  1  A0 03                ldy #3
0037A4  1               tand15:
0037A4  1  A9 FF 48 B9          set_ay  absANa,$ff
0037A8  1  5A 02 28     
0037AB  1  31 3A                and (indAN),y
0037AD  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
0037B1  1  F0 03 20 FF  
0037B5  1  FF 68 49 7D  
0037C1  1  88                   dey
0037C2  1  10 E0                bpl tand15
0037C4  1  AD 00 02 C9          next_test
0037C8  1  26 F0 03 20  
0037CC  1  FF FF A9 27  
0037D3  1               
0037D3  1               ; EOR
0037D3  1  A2 03                ldx #3          ;immediate - self modifying code
0037D5  1  B5 20        teor:   lda zpEO,x
0037D7  1  8D 0C 02             sta ex_eori+1   ;set EOR # operand
0037DA  1  A9 00 48 BD          set_ax  absEOa,0
0037DE  1  5E 02 28     
0037E1  1  20 0B 02             jsr ex_eori     ;execute EOR # in RAM
0037E4  1  08 DD 62 02          tst_ax  absrlo,absflo,0
0037E8  1  F0 03 20 FF  
0037EC  1  FF 68 49 30  
0037F8  1  CA                   dex
0037F9  1  10 DA                bpl teor
0037FB  1  A2 03                ldx #3
0037FD  1  B5 20        teor1:  lda zpEO,x
0037FF  1  8D 0C 02             sta ex_eori+1   ;set EOR # operand
003802  1  A9 FF 48 BD          set_ax  absEOa,$ff
003806  1  5E 02 28     
003809  1  20 0B 02             jsr ex_eori     ;execute EOR # in RAM
00380C  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003810  1  F0 03 20 FF  
003814  1  FF 68 49 7D  
003820  1  CA                   dex
003821  1  10 DA                bpl teor1
003823  1               
003823  1  A2 03                ldx #3      ;zp
003825  1  B5 20        teor2:   lda zpEO,x
003827  1  85 0C                sta zpt
003829  1  A9 00 48 BD          set_ax  absEOa,0
00382D  1  5E 02 28     
003830  1  45 0C                eor zpt
003832  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003836  1  F0 03 20 FF  
00383A  1  FF 68 49 30  
003846  1  CA                   dex
003847  1  10 DC                bpl teor2
003849  1  A2 03                ldx #3
00384B  1  B5 20        teor3:  lda zpEO,x
00384D  1  85 0C                sta zpt
00384F  1  A9 FF 48 BD          set_ax  absEOa,$ff
003853  1  5E 02 28     
003856  1  45 0C                eor zpt
003858  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
00385C  1  F0 03 20 FF  
003860  1  FF 68 49 7D  
00386C  1  CA                   dex
00386D  1  10 DC                bpl teor3
00386F  1               
00386F  1  A2 03                ldx #3      ;abs
003871  1  B5 20        teor4:  lda zpEO,x
003873  1  8D 03 02             sta abst
003876  1  A9 00 48 BD          set_ax  absEOa,0
00387A  1  5E 02 28     
00387D  1  4D 03 02             eor abst
003880  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003884  1  F0 03 20 FF  
003888  1  FF 68 49 30  
003894  1  CA                   dex
003895  1  10 DA                bpl teor4
003897  1  A2 03                ldx #3
003899  1  B5 20        teor5:  lda zpEO,x
00389B  1  8D 03 02             sta abst
00389E  1  A9 FF 48 BD          set_ax  absEOa,$ff
0038A2  1  5E 02 28     
0038A5  1  4D 03 02             eor abst
0038A8  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
0038AC  1  F0 03 20 FF  
0038B0  1  FF 68 49 7D  
0038BC  1  CA                   dex
0038BD  1  10 02                bpl teor6
0038BF  1               
0038BF  1  A2 03                ldx #3      ;zp,x
0038C1  1               teor6:
0038C1  1  A9 00 48 BD          set_ax  absEOa,0
0038C5  1  5E 02 28     
0038C8  1  55 20                eor zpEO,x
0038CA  1  08 DD 62 02          tst_ax  absrlo,absflo,0
0038CE  1  F0 03 20 FF  
0038D2  1  FF 68 49 30  
0038DE  1  CA                   dex
0038DF  1  10 E0                bpl teor6
0038E1  1  A2 03                ldx #3
0038E3  1               teor7:
0038E3  1  A9 FF 48 BD          set_ax  absEOa,$ff
0038E7  1  5E 02 28     
0038EA  1  55 20                eor zpEO,x
0038EC  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
0038F0  1  F0 03 20 FF  
0038F4  1  FF 68 49 7D  
003900  1  CA                   dex
003901  1  10 E0                bpl teor7
003903  1               
003903  1  A2 03                ldx #3      ;abs,x
003905  1               teor8:
003905  1  A9 00 48 BD          set_ax  absEOa,0
003909  1  5E 02 28     
00390C  1  5D 52 02             eor absEO,x
00390F  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003913  1  F0 03 20 FF  
003917  1  FF 68 49 30  
003923  1  CA                   dex
003924  1  10 DF                bpl teor8
003926  1  A2 03                ldx #3
003928  1               teor9:
003928  1  A9 FF 48 BD          set_ax  absEOa,$ff
00392C  1  5E 02 28     
00392F  1  5D 52 02             eor absEO,x
003932  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003936  1  F0 03 20 FF  
00393A  1  FF 68 49 7D  
003946  1  CA                   dex
003947  1  10 DF                bpl teor9
003949  1               
003949  1  A0 03                ldy #3      ;abs,y
00394B  1               teor10:
00394B  1  A9 00 48 B9          set_ay  absEOa,0
00394F  1  5E 02 28     
003952  1  59 52 02             eor absEO,y
003955  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003959  1  F0 03 20 FF  
00395D  1  FF 68 49 30  
003969  1  88                   dey
00396A  1  10 DF                bpl teor10
00396C  1  A0 03                ldy #3
00396E  1               teor11:
00396E  1  A9 FF 48 B9          set_ay  absEOa,$ff
003972  1  5E 02 28     
003975  1  59 52 02             eor absEO,y
003978  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
00397C  1  F0 03 20 FF  
003980  1  FF 68 49 7D  
00398C  1  88                   dey
00398D  1  10 DF                bpl teor11
00398F  1               
00398F  1  A2 06                ldx #6      ;(zp,x)
003991  1  A0 03                ldy #3
003993  1               teor12:
003993  1  A9 00 48 B9          set_ay  absEOa,0
003997  1  5E 02 28     
00399A  1  41 42                eor (indEO,x)
00399C  1  08 D9 62 02          tst_ay  absrlo,absflo,0
0039A0  1  F0 03 20 FF  
0039A4  1  FF 68 49 30  
0039B0  1  CA                   dex
0039B1  1  CA                   dex
0039B2  1  88                   dey
0039B3  1  10 DE                bpl teor12
0039B5  1  A2 06                ldx #6
0039B7  1  A0 03                ldy #3
0039B9  1               teor13:
0039B9  1  A9 FF 48 B9          set_ay  absEOa,$ff
0039BD  1  5E 02 28     
0039C0  1  41 42                eor (indEO,x)
0039C2  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
0039C6  1  F0 03 20 FF  
0039CA  1  FF 68 49 7D  
0039D6  1  CA                   dex
0039D7  1  CA                   dex
0039D8  1  88                   dey
0039D9  1  10 DE                bpl teor13
0039DB  1               
0039DB  1  A0 03                ldy #3      ;(zp),y
0039DD  1               teor14:
0039DD  1  A9 00 48 B9          set_ay  absEOa,0
0039E1  1  5E 02 28     
0039E4  1  51 42                eor (indEO),y
0039E6  1  08 D9 62 02          tst_ay  absrlo,absflo,0
0039EA  1  F0 03 20 FF  
0039EE  1  FF 68 49 30  
0039FA  1  88                   dey
0039FB  1  10 E0                bpl teor14
0039FD  1  A0 03                ldy #3
0039FF  1               teor15:
0039FF  1  A9 FF 48 B9          set_ay  absEOa,$ff
003A03  1  5E 02 28     
003A06  1  51 42                eor (indEO),y
003A08  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003A0C  1  F0 03 20 FF  
003A10  1  FF 68 49 7D  
003A1C  1  88                   dey
003A1D  1  10 E0                bpl teor15
003A1F  1  AD 00 02 C9          next_test
003A23  1  27 F0 03 20  
003A27  1  FF FF A9 28  
003A2E  1               
003A2E  1               ; OR
003A2E  1  A2 03                ldx #3          ;immediate - self modifying code
003A30  1  B5 18        tora:   lda zpOR,x
003A32  1  8D 0F 02             sta ex_orai+1   ;set ORA # operand
003A35  1  A9 00 48 BD          set_ax  absORa,0
003A39  1  56 02 28     
003A3C  1  20 0E 02             jsr ex_orai     ;execute ORA # in RAM
003A3F  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003A43  1  F0 03 20 FF  
003A47  1  FF 68 49 30  
003A53  1  CA                   dex
003A54  1  10 DA                bpl tora
003A56  1  A2 03                ldx #3
003A58  1  B5 18        tora1:  lda zpOR,x
003A5A  1  8D 0F 02             sta ex_orai+1   ;set ORA # operand
003A5D  1  A9 FF 48 BD          set_ax  absORa,$ff
003A61  1  56 02 28     
003A64  1  20 0E 02             jsr ex_orai     ;execute ORA # in RAM
003A67  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003A6B  1  F0 03 20 FF  
003A6F  1  FF 68 49 7D  
003A7B  1  CA                   dex
003A7C  1  10 DA                bpl tora1
003A7E  1               
003A7E  1  A2 03                ldx #3      ;zp
003A80  1  B5 18        tora2:  lda zpOR,x
003A82  1  85 0C                sta zpt
003A84  1  A9 00 48 BD          set_ax  absORa,0
003A88  1  56 02 28     
003A8B  1  05 0C                ora zpt
003A8D  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003A91  1  F0 03 20 FF  
003A95  1  FF 68 49 30  
003AA1  1  CA                   dex
003AA2  1  10 DC                bpl tora2
003AA4  1  A2 03                ldx #3
003AA6  1  B5 18        tora3:  lda zpOR,x
003AA8  1  85 0C                sta zpt
003AAA  1  A9 FF 48 BD          set_ax  absORa,$ff
003AAE  1  56 02 28     
003AB1  1  05 0C                ora zpt
003AB3  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003AB7  1  F0 03 20 FF  
003ABB  1  FF 68 49 7D  
003AC7  1  CA                   dex
003AC8  1  10 DC                bpl tora3
003ACA  1               
003ACA  1  A2 03                ldx #3      ;abs
003ACC  1  B5 18        tora4:  lda zpOR,x
003ACE  1  8D 03 02             sta abst
003AD1  1  A9 00 48 BD          set_ax  absORa,0
003AD5  1  56 02 28     
003AD8  1  0D 03 02             ora abst
003ADB  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003ADF  1  F0 03 20 FF  
003AE3  1  FF 68 49 30  
003AEF  1  CA                   dex
003AF0  1  10 DA                bpl tora4
003AF2  1  A2 03                ldx #3
003AF4  1  B5 18        tora5:  lda zpOR,x
003AF6  1  8D 03 02             sta abst
003AF9  1  A9 FF 48 BD          set_ax  absORa,$ff
003AFD  1  56 02 28     
003B00  1  0D 03 02             ora abst
003B03  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003B07  1  F0 03 20 FF  
003B0B  1  FF 68 49 7D  
003B17  1  CA                   dex
003B18  1  10 02                bpl tora6
003B1A  1               
003B1A  1  A2 03                ldx #3      ;zp,x
003B1C  1               tora6:
003B1C  1  A9 00 48 BD          set_ax  absORa,0
003B20  1  56 02 28     
003B23  1  15 18                ora zpOR,x
003B25  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003B29  1  F0 03 20 FF  
003B2D  1  FF 68 49 30  
003B39  1  CA                   dex
003B3A  1  10 E0                bpl tora6
003B3C  1  A2 03                ldx #3
003B3E  1               tora7:
003B3E  1  A9 FF 48 BD          set_ax  absORa,$ff
003B42  1  56 02 28     
003B45  1  15 18                ora zpOR,x
003B47  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003B4B  1  F0 03 20 FF  
003B4F  1  FF 68 49 7D  
003B5B  1  CA                   dex
003B5C  1  10 E0                bpl tora7
003B5E  1               
003B5E  1  A2 03                ldx #3      ;abs,x
003B60  1               tora8:
003B60  1  A9 00 48 BD          set_ax  absORa,0
003B64  1  56 02 28     
003B67  1  1D 4A 02             ora absOR,x
003B6A  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003B6E  1  F0 03 20 FF  
003B72  1  FF 68 49 30  
003B7E  1  CA                   dex
003B7F  1  10 DF                bpl tora8
003B81  1  A2 03                ldx #3
003B83  1               tora9:
003B83  1  A9 FF 48 BD          set_ax  absORa,$ff
003B87  1  56 02 28     
003B8A  1  1D 4A 02             ora absOR,x
003B8D  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003B91  1  F0 03 20 FF  
003B95  1  FF 68 49 7D  
003BA1  1  CA                   dex
003BA2  1  10 DF                bpl tora9
003BA4  1               
003BA4  1  A0 03                ldy #3      ;abs,y
003BA6  1               tora10:
003BA6  1  A9 00 48 B9          set_ay  absORa,0
003BAA  1  56 02 28     
003BAD  1  19 4A 02             ora absOR,y
003BB0  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003BB4  1  F0 03 20 FF  
003BB8  1  FF 68 49 30  
003BC4  1  88                   dey
003BC5  1  10 DF                bpl tora10
003BC7  1  A0 03                ldy #3
003BC9  1               tora11:
003BC9  1  A9 FF 48 B9          set_ay  absORa,$ff
003BCD  1  56 02 28     
003BD0  1  19 4A 02             ora absOR,y
003BD3  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003BD7  1  F0 03 20 FF  
003BDB  1  FF 68 49 7D  
003BE7  1  88                   dey
003BE8  1  10 DF                bpl tora11
003BEA  1               
003BEA  1  A2 06                ldx #6      ;(zp,x)
003BEC  1  A0 03                ldy #3
003BEE  1               tora12:
003BEE  1  A9 00 48 B9          set_ay  absORa,0
003BF2  1  56 02 28     
003BF5  1  01 4A                ora (indOR,x)
003BF7  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003BFB  1  F0 03 20 FF  
003BFF  1  FF 68 49 30  
003C0B  1  CA                   dex
003C0C  1  CA                   dex
003C0D  1  88                   dey
003C0E  1  10 DE                bpl tora12
003C10  1  A2 06                ldx #6
003C12  1  A0 03                ldy #3
003C14  1               tora13:
003C14  1  A9 FF 48 B9          set_ay  absORa,$ff
003C18  1  56 02 28     
003C1B  1  01 4A                ora (indOR,x)
003C1D  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003C21  1  F0 03 20 FF  
003C25  1  FF 68 49 7D  
003C31  1  CA                   dex
003C32  1  CA                   dex
003C33  1  88                   dey
003C34  1  10 DE                bpl tora13
003C36  1               
003C36  1  A0 03                ldy #3      ;(zp),y
003C38  1               tora14:
003C38  1  A9 00 48 B9          set_ay  absORa,0
003C3C  1  56 02 28     
003C3F  1  11 4A                ora (indOR),y
003C41  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003C45  1  F0 03 20 FF  
003C49  1  FF 68 49 30  
003C55  1  88                   dey
003C56  1  10 E0                bpl tora14
003C58  1  A0 03                ldy #3
003C5A  1               tora15:
003C5A  1  A9 FF 48 B9          set_ay  absORa,$ff
003C5E  1  56 02 28     
003C61  1  11 4A                ora (indOR),y
003C63  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003C67  1  F0 03 20 FF  
003C6B  1  FF 68 49 7D  
003C77  1  88                   dey
003C78  1  10 E0                bpl tora15
003C7A  1                   .if I_flag = 3
003C7A  1  58                   cli
003C7B  1                   .endif
003C7B  1  AD 00 02 C9          next_test
003C7F  1  28 F0 03 20  
003C83  1  FF FF A9 29  
003C8A  1               
003C8A  1               ; full binary add/subtract test
003C8A  1               ; iterates through all combinations of operands and carry input
003C8A  1               ; uses increments/decrements to predict result & result flags
003C8A  1  D8                   cld
003C8B  1  A2 0E                ldx #ad2        ;for indexed test
003C8D  1  A0 FF                ldy #$ff        ;max range
003C8F  1  A9 00                lda #0          ;start with adding zeroes & no carry
003C91  1  85 0C                sta adfc        ;carry in - for diag
003C93  1  85 0D                sta ad1         ;operand 1 - accumulator
003C95  1  85 0E                sta ad2         ;operand 2 - memory or immediate
003C97  1  8D 03 02             sta ada2        ;non zp
003C9A  1  85 0F                sta adrl        ;expected result bits 0-7
003C9C  1  85 10                sta adrh        ;expected result bit 8 (carry out)
003C9E  1  A9 FF                lda #$ff        ;complemented operand 2 for subtract
003CA0  1  85 12                sta sb2
003CA2  1  8D 04 02             sta sba2        ;non zp
003CA5  1  A9 02                lda #2          ;expected Z-flag
003CA7  1  85 11                sta adrf
003CA9  1  18           tadd:   clc             ;test with carry clear
003CAA  1  20 9F 3F             jsr chkadd
003CAD  1  E6 0C                inc adfc        ;now with carry
003CAF  1  E6 0F                inc adrl        ;result +1
003CB1  1  08                   php             ;save N & Z from low result
003CB2  1  08                   php
003CB3  1  68                   pla             ;accu holds expected flags
003CB4  1  29 82                and #$82        ;mask N & Z
003CB6  1  28                   plp
003CB7  1  D0 02                bne tadd1
003CB9  1  E6 10                inc adrh        ;result bit 8 - carry
003CBB  1  05 10        tadd1:  ora adrh        ;merge C to expected flags
003CBD  1  85 11                sta adrf        ;save expected flags except overflow
003CBF  1  38                   sec             ;test with carry set
003CC0  1  20 9F 3F             jsr chkadd
003CC3  1  C6 0C                dec adfc        ;same for operand +1 but no carry
003CC5  1  E6 0D                inc ad1
003CC7  1  D0 E0                bne tadd        ;iterate op1
003CC9  1  A9 00                lda #0          ;preset result to op2 when op1 = 0
003CCB  1  85 10                sta adrh
003CCD  1  EE 03 02             inc ada2
003CD0  1  E6 0E                inc ad2
003CD2  1  08                   php             ;save NZ as operand 2 becomes the new result
003CD3  1  68                   pla
003CD4  1  29 82                and #$82        ;mask N00000Z0
003CD6  1  85 11                sta adrf        ;no need to check carry as we are adding to 0
003CD8  1  C6 12                dec sb2         ;complement subtract operand 2
003CDA  1  CE 04 02             dec sba2
003CDD  1  A5 0E                lda ad2
003CDF  1  85 0F                sta adrl
003CE1  1  D0 C6                bne tadd        ;iterate op2
003CE3  1                   .if disable_decimal < 1
003CE3  1  AD 00 02 C9          next_test
003CE7  1  29 F0 03 20  
003CEB  1  FF FF A9 2A  
003CF2  1               
003CF2  1               ; decimal add/subtract test
003CF2  1               ; *** WARNING - tests documented behavior only! ***
003CF2  1               ;   only valid BCD operands are tested, N V Z flags are ignored
003CF2  1               ; iterates through all valid combinations of operands and carry input
003CF2  1               ; uses increments/decrements to predict result & carry flag
003CF2  1  F8                   sed
003CF3  1  A2 0E                ldx #ad2        ;for indexed test
003CF5  1  A0 FF                ldy #$ff        ;max range
003CF7  1  A9 99                lda #$99        ;start with adding 99 to 99 with carry
003CF9  1  85 0D                sta ad1         ;operand 1 - accumulator
003CFB  1  85 0E                sta ad2         ;operand 2 - memory or immediate
003CFD  1  8D 03 02             sta ada2        ;non zp
003D00  1  85 0F                sta adrl        ;expected result bits 0-7
003D02  1  A9 01                lda #1          ;set carry in & out
003D04  1  85 0C                sta adfc        ;carry in - for diag
003D06  1  85 10                sta adrh        ;expected result bit 8 (carry out)
003D08  1  A9 00                lda #0          ;complemented operand 2 for subtract
003D0A  1  85 12                sta sb2
003D0C  1  8D 04 02             sta sba2        ;non zp
003D0F  1  38           tdad:   sec             ;test with carry set
003D10  1  20 0C 3E             jsr chkdad
003D13  1  C6 0C                dec adfc        ;now with carry clear
003D15  1  A5 0F                lda adrl        ;decimal adjust result
003D17  1  D0 08                bne tdad1       ;skip clear carry & preset result 99 (9A-1)
003D19  1  C6 10                dec adrh
003D1B  1  A9 99                lda #$99
003D1D  1  85 0F                sta adrl
003D1F  1  D0 12                bne tdad3
003D21  1  29 0F        tdad1:  and #$f         ;lower nibble mask
003D23  1  D0 0C                bne tdad2       ;no decimal adjust needed
003D25  1  C6 0F                dec adrl        ;decimal adjust (?0-6)
003D27  1  C6 0F                dec adrl
003D29  1  C6 0F                dec adrl
003D2B  1  C6 0F                dec adrl
003D2D  1  C6 0F                dec adrl
003D2F  1  C6 0F                dec adrl
003D31  1  C6 0F        tdad2:  dec adrl        ;result -1
003D33  1  18           tdad3:  clc             ;test with carry clear
003D34  1  20 0C 3E             jsr chkdad
003D37  1  E6 0C                inc adfc        ;same for operand -1 but with carry
003D39  1  A5 0D                lda ad1         ;decimal adjust operand 1
003D3B  1  F0 15                beq tdad5       ;iterate operand 2
003D3D  1  29 0F                and #$f         ;lower nibble mask
003D3F  1  D0 0C                bne tdad4       ;skip decimal adjust
003D41  1  C6 0D                dec ad1         ;decimal adjust (?0-6)
003D43  1  C6 0D                dec ad1
003D45  1  C6 0D                dec ad1
003D47  1  C6 0D                dec ad1
003D49  1  C6 0D                dec ad1
003D4B  1  C6 0D                dec ad1
003D4D  1  C6 0D        tdad4:  dec ad1         ;operand 1 -1
003D4F  1  4C 0F 3D             jmp tdad        ;iterate op1
003D52  1               
003D52  1  A9 99        tdad5:  lda #$99        ;precharge op1 max
003D54  1  85 0D                sta ad1
003D56  1  A5 0E                lda ad2         ;decimal adjust operand 2
003D58  1  F0 30                beq tdad7       ;end of iteration
003D5A  1  29 0F                and #$f         ;lower nibble mask
003D5C  1  D0 18                bne tdad6       ;skip decimal adjust
003D5E  1  C6 0E                dec ad2         ;decimal adjust (?0-6)
003D60  1  C6 0E                dec ad2
003D62  1  C6 0E                dec ad2
003D64  1  C6 0E                dec ad2
003D66  1  C6 0E                dec ad2
003D68  1  C6 0E                dec ad2
003D6A  1  E6 12                inc sb2         ;complemented decimal adjust for subtract (?9+6)
003D6C  1  E6 12                inc sb2
003D6E  1  E6 12                inc sb2
003D70  1  E6 12                inc sb2
003D72  1  E6 12                inc sb2
003D74  1  E6 12                inc sb2
003D76  1  C6 0E        tdad6:  dec ad2         ;operand 2 -1
003D78  1  E6 12                inc sb2         ;complemented operand for subtract
003D7A  1  A5 12                lda sb2
003D7C  1  8D 04 02             sta sba2        ;copy as non zp operand
003D7F  1  A5 0E                lda ad2
003D81  1  8D 03 02             sta ada2        ;copy as non zp operand
003D84  1  85 0F                sta adrl        ;new result since op1+carry=00+carry +op2=op2
003D86  1  E6 10                inc adrh        ;result carry
003D88  1  D0 85                bne tdad        ;iterate op2
003D8A  1               tdad7:
003D8A  1  AD 00 02 C9          next_test
003D8E  1  2A F0 03 20  
003D92  1  FF FF A9 2B  
003D99  1               
003D99  1               ; decimal/binary switch test
003D99  1               ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
003D99  1               ;   tables
003D99  1  18                   clc
003D9A  1  D8                   cld
003D9B  1  08                   php
003D9C  1  A9 55                lda #$55
003D9E  1  69 55                adc #$55
003DA0  1  C9 AA                cmp #$aa
003DA2  1  F0 03 20 FF          trap_ne         ;expected binary result after cld
003DA6  1  FF           
003DA7  1  18                   clc
003DA8  1  F8                   sed
003DA9  1  08                   php
003DAA  1  A9 55                lda #$55
003DAC  1  69 55                adc #$55
003DAE  1  C9 10                cmp #$10
003DB0  1  F0 03 20 FF          trap_ne         ;expected decimal result after sed
003DB4  1  FF           
003DB5  1  D8                   cld
003DB6  1  28                   plp
003DB7  1  A9 55                lda #$55
003DB9  1  69 55                adc #$55
003DBB  1  C9 10                cmp #$10
003DBD  1  F0 03 20 FF          trap_ne         ;expected decimal result after plp D=1
003DC1  1  FF           
003DC2  1  28                   plp
003DC3  1  A9 55                lda #$55
003DC5  1  69 55                adc #$55
003DC7  1  C9 AA                cmp #$aa
003DC9  1  F0 03 20 FF          trap_ne         ;expected binary result after plp D=0
003DCD  1  FF           
003DCE  1  18                   clc
003DCF  1  A9 3D                lda #>bin_rti_ret ;emulated interrupt for rti
003DD1  1  48                   pha
003DD2  1  A9 EC                lda #<bin_rti_ret
003DD4  1  48                   pha
003DD5  1  08                   php
003DD6  1  F8                   sed
003DD7  1  A9 3D                lda #>dec_rti_ret ;emulated interrupt for rti
003DD9  1  48                   pha
003DDA  1  A9 E0                lda #<dec_rti_ret
003DDC  1  48                   pha
003DDD  1  08                   php
003DDE  1  D8                   cld
003DDF  1  40                   rti
003DE0  1               dec_rti_ret:
003DE0  1  A9 55                lda #$55
003DE2  1  69 55                adc #$55
003DE4  1  C9 10                cmp #$10
003DE6  1  F0 03 20 FF          trap_ne         ;expected decimal result after rti D=1
003DEA  1  FF           
003DEB  1  40                   rti
003DEC  1               bin_rti_ret:
003DEC  1  A9 55                lda #$55
003DEE  1  69 55                adc #$55
003DF0  1  C9 AA                cmp #$aa
003DF2  1  F0 03 20 FF          trap_ne         ;expected binary result after rti D=0
003DF6  1  FF           
003DF7  1                   .endif
003DF7  1               
003DF7  1  AD 00 02             lda test_case
003DFA  1  C9 2B                cmp #test_num
003DFC  1  F0 03 20 FF          trap_ne         ;previous test is out of sequence
003E00  1  FF           
003E01  1  A9 F0                lda #$f0        ;mark opcode testing complete
003E03  1  8D 00 02             sta test_case
003E06  1               
003E06  1               ; final RAM integrity test
003E06  1               ;   verifies that none of the previous tests has altered RAM outside of the
003E06  1               ;   designated write areas.
003E06  1                       check_ram
003E06  1               ; *** DEBUG INFO ***
003E06  1               ; to debug checksum errors uncomment check_ram in the next_test macro to
003E06  1               ; narrow down the responsible opcode.
003E06  1               ; may give false errors when monitor, OS or other background activity is
003E06  1               ; allowed during previous tests.
003E06  1               
003E06  1               
003E06  1               ; S U C C E S S ************************************************
003E06  1               ; -------------
003E06  1  20 FE FF             success         ;if you get here everything went well
003E09  1               ; -------------
003E09  1               ; S U C C E S S ************************************************
003E09  1  4C 00 04             jmp start       ;run again
003E0C  1               
003E0C  1                   .if disable_decimal < 1
003E0C  1               ; core subroutine of the decimal add/subtract test
003E0C  1               ; *** WARNING - tests documented behavior only! ***
003E0C  1               ;   only valid BCD operands are tested, N V Z flags are ignored
003E0C  1               ; iterates through all valid combinations of operands and carry input
003E0C  1               ; uses increments/decrements to predict result & carry flag
003E0C  1               chkdad:
003E0C  1               ; decimal ADC / SBC zp
003E0C  1  08                   php             ;save carry for subtract
003E0D  1  A5 0D                lda ad1
003E0F  1  65 0E                adc ad2         ;perform add
003E11  1  08                   php
003E12  1  C5 0F                cmp adrl        ;check result
003E14  1  F0 03 20 FF          trap_ne         ;bad result
003E18  1  FF           
003E19  1  68                   pla             ;check flags
003E1A  1  29 01                and #1          ;mask carry
003E1C  1  C5 10                cmp adrh
003E1E  1  F0 03 20 FF          trap_ne         ;bad carry
003E22  1  FF           
003E23  1  28                   plp
003E24  1  08                   php             ;save carry for next add
003E25  1  A5 0D                lda ad1
003E27  1  E5 12                sbc sb2         ;perform subtract
003E29  1  08                   php
003E2A  1  C5 0F                cmp adrl        ;check result
003E2C  1  F0 03 20 FF          trap_ne         ;bad result
003E30  1  FF           
003E31  1  68                   pla             ;check flags
003E32  1  29 01                and #1          ;mask carry
003E34  1  C5 10                cmp adrh
003E36  1  F0 03 20 FF          trap_ne         ;bad flags
003E3A  1  FF           
003E3B  1  28                   plp
003E3C  1               ; decimal ADC / SBC abs
003E3C  1  08                   php             ;save carry for subtract
003E3D  1  A5 0D                lda ad1
003E3F  1  6D 03 02             adc ada2        ;perform add
003E42  1  08                   php
003E43  1  C5 0F                cmp adrl        ;check result
003E45  1  F0 03 20 FF          trap_ne         ;bad result
003E49  1  FF           
003E4A  1  68                   pla             ;check flags
003E4B  1  29 01                and #1          ;mask carry
003E4D  1  C5 10                cmp adrh
003E4F  1  F0 03 20 FF          trap_ne         ;bad carry
003E53  1  FF           
003E54  1  28                   plp
003E55  1  08                   php             ;save carry for next add
003E56  1  A5 0D                lda ad1
003E58  1  ED 04 02             sbc sba2        ;perform subtract
003E5B  1  08                   php
003E5C  1  C5 0F                cmp adrl        ;check result
003E5E  1  F0 03 20 FF          trap_ne         ;bad result
003E62  1  FF           
003E63  1  68                   pla             ;check flags
003E64  1  29 01                and #1          ;mask carry
003E66  1  C5 10                cmp adrh
003E68  1  F0 03 20 FF          trap_ne         ;bad carry
003E6C  1  FF           
003E6D  1  28                   plp
003E6E  1               ; decimal ADC / SBC #
003E6E  1  08                   php             ;save carry for subtract
003E6F  1  A5 0E                lda ad2
003E71  1  8D 12 02             sta ex_adci+1   ;set ADC # operand
003E74  1  A5 0D                lda ad1
003E76  1  20 11 02             jsr ex_adci     ;execute ADC # in RAM
003E79  1  08                   php
003E7A  1  C5 0F                cmp adrl        ;check result
003E7C  1  F0 03 20 FF          trap_ne         ;bad result
003E80  1  FF           
003E81  1  68                   pla             ;check flags
003E82  1  29 01                and #1          ;mask carry
003E84  1  C5 10                cmp adrh
003E86  1  F0 03 20 FF          trap_ne         ;bad carry
003E8A  1  FF           
003E8B  1  28                   plp
003E8C  1  08                   php             ;save carry for next add
003E8D  1  A5 12                lda sb2
003E8F  1  8D 15 02             sta ex_sbci+1   ;set SBC # operand
003E92  1  A5 0D                lda ad1
003E94  1  20 14 02             jsr ex_sbci     ;execute SBC # in RAM
003E97  1  08                   php
003E98  1  C5 0F                cmp adrl        ;check result
003E9A  1  F0 03 20 FF          trap_ne         ;bad result
003E9E  1  FF           
003E9F  1  68                   pla             ;check flags
003EA0  1  29 01                and #1          ;mask carry
003EA2  1  C5 10                cmp adrh
003EA4  1  F0 03 20 FF          trap_ne         ;bad carry
003EA8  1  FF           
003EA9  1  28                   plp
003EAA  1               ; decimal ADC / SBC zp,x
003EAA  1  08                   php             ;save carry for subtract
003EAB  1  A5 0D                lda ad1
003EAD  1  75 00                adc 0,x         ;perform add
003EAF  1  08                   php
003EB0  1  C5 0F                cmp adrl        ;check result
003EB2  1  F0 03 20 FF          trap_ne         ;bad result
003EB6  1  FF           
003EB7  1  68                   pla             ;check flags
003EB8  1  29 01                and #1          ;mask carry
003EBA  1  C5 10                cmp adrh
003EBC  1  F0 03 20 FF          trap_ne         ;bad carry
003EC0  1  FF           
003EC1  1  28                   plp
003EC2  1  08                   php             ;save carry for next add
003EC3  1  A5 0D                lda ad1
003EC5  1  F5 04                sbc sb2-ad2,x   ;perform subtract
003EC7  1  08                   php
003EC8  1  C5 0F                cmp adrl        ;check result
003ECA  1  F0 03 20 FF          trap_ne         ;bad result
003ECE  1  FF           
003ECF  1  68                   pla             ;check flags
003ED0  1  29 01                and #1          ;mask carry
003ED2  1  C5 10                cmp adrh
003ED4  1  F0 03 20 FF          trap_ne         ;bad carry
003ED8  1  FF           
003ED9  1  28                   plp
003EDA  1               ; decimal ADC / SBC abs,x
003EDA  1  08                   php             ;save carry for subtract
003EDB  1  A5 0D                lda ad1
003EDD  1  7D F5 01             adc ada2-ad2,x  ;perform add
003EE0  1  08                   php
003EE1  1  C5 0F                cmp adrl        ;check result
003EE3  1  F0 03 20 FF          trap_ne         ;bad result
003EE7  1  FF           
003EE8  1  68                   pla             ;check flags
003EE9  1  29 01                and #1          ;mask carry
003EEB  1  C5 10                cmp adrh
003EED  1  F0 03 20 FF          trap_ne         ;bad carry
003EF1  1  FF           
003EF2  1  28                   plp
003EF3  1  08                   php             ;save carry for next add
003EF4  1  A5 0D                lda ad1
003EF6  1  FD F6 01             sbc sba2-ad2,x  ;perform subtract
003EF9  1  08                   php
003EFA  1  C5 0F                cmp adrl        ;check result
003EFC  1  F0 03 20 FF          trap_ne         ;bad result
003F00  1  FF           
003F01  1  68                   pla             ;check flags
003F02  1  29 01                and #1          ;mask carry
003F04  1  C5 10                cmp adrh
003F06  1  F0 03 20 FF          trap_ne         ;bad carry
003F0A  1  FF           
003F0B  1  28                   plp
003F0C  1               ; decimal ADC / SBC abs,y
003F0C  1  08                   php             ;save carry for subtract
003F0D  1  A5 0D                lda ad1
003F0F  1  79 04 01             adc ada2-$ff,y  ;perform add
003F12  1  08                   php
003F13  1  C5 0F                cmp adrl        ;check result
003F15  1  F0 03 20 FF          trap_ne         ;bad result
003F19  1  FF           
003F1A  1  68                   pla             ;check flags
003F1B  1  29 01                and #1          ;mask carry
003F1D  1  C5 10                cmp adrh
003F1F  1  F0 03 20 FF          trap_ne         ;bad carry
003F23  1  FF           
003F24  1  28                   plp
003F25  1  08                   php             ;save carry for next add
003F26  1  A5 0D                lda ad1
003F28  1  F9 05 01             sbc sba2-$ff,y  ;perform subtract
003F2B  1  08                   php
003F2C  1  C5 0F                cmp adrl        ;check result
003F2E  1  F0 03 20 FF          trap_ne         ;bad result
003F32  1  FF           
003F33  1  68                   pla             ;check flags
003F34  1  29 01                and #1          ;mask carry
003F36  1  C5 10                cmp adrh
003F38  1  F0 03 20 FF          trap_ne         ;bad carry
003F3C  1  FF           
003F3D  1  28                   plp
003F3E  1               ; decimal ADC / SBC (zp,x)
003F3E  1  08                   php             ;save carry for subtract
003F3F  1  A5 0D                lda ad1
003F41  1  61 44                adc (<adi2-ad2,x) ;perform add
003F43  1  08                   php
003F44  1  C5 0F                cmp adrl        ;check result
003F46  1  F0 03 20 FF          trap_ne         ;bad result
003F4A  1  FF           
003F4B  1  68                   pla             ;check flags
003F4C  1  29 01                and #1          ;mask carry
003F4E  1  C5 10                cmp adrh
003F50  1  F0 03 20 FF          trap_ne         ;bad carry
003F54  1  FF           
003F55  1  28                   plp
003F56  1  08                   php             ;save carry for next add
003F57  1  A5 0D                lda ad1
003F59  1  E1 46                sbc (<sbi2-ad2,x) ;perform subtract
003F5B  1  08                   php
003F5C  1  C5 0F                cmp adrl        ;check result
003F5E  1  F0 03 20 FF          trap_ne         ;bad result
003F62  1  FF           
003F63  1  68                   pla             ;check flags
003F64  1  29 01                and #1          ;mask carry
003F66  1  C5 10                cmp adrh
003F68  1  F0 03 20 FF          trap_ne         ;bad carry
003F6C  1  FF           
003F6D  1  28                   plp
003F6E  1               ; decimal ADC / SBC (abs),y
003F6E  1  08                   php             ;save carry for subtract
003F6F  1  A5 0D                lda ad1
003F71  1  71 56                adc (adiy2),y   ;perform add
003F73  1  08                   php
003F74  1  C5 0F                cmp adrl        ;check result
003F76  1  F0 03 20 FF          trap_ne         ;bad result
003F7A  1  FF           
003F7B  1  68                   pla             ;check flags
003F7C  1  29 01                and #1          ;mask carry
003F7E  1  C5 10                cmp adrh
003F80  1  F0 03 20 FF          trap_ne         ;bad carry
003F84  1  FF           
003F85  1  28                   plp
003F86  1  08                   php             ;save carry for next add
003F87  1  A5 0D                lda ad1
003F89  1  F1 58                sbc (sbiy2),y   ;perform subtract
003F8B  1  08                   php
003F8C  1  C5 0F                cmp adrl        ;check result
003F8E  1  F0 03 20 FF          trap_ne         ;bad result
003F92  1  FF           
003F93  1  68                   pla             ;check flags
003F94  1  29 01                and #1          ;mask carry
003F96  1  C5 10                cmp adrh
003F98  1  F0 03 20 FF          trap_ne         ;bad carry
003F9C  1  FF           
003F9D  1  28                   plp
003F9E  1  60                   rts
003F9F  1                   .endif
003F9F  1               
003F9F  1               ; core subroutine of the full binary add/subtract test
003F9F  1               ; iterates through all combinations of operands and carry input
003F9F  1               ; uses increments/decrements to predict result & result flags
003F9F  1  A5 11        chkadd: lda adrf        ;add V-flag if overflow
003FA1  1  29 83                and #$83        ;keep N-----ZC / clear V
003FA3  1  48                   pha
003FA4  1  A5 0D                lda ad1         ;test sign unequal between operands
003FA6  1  45 0E                eor ad2
003FA8  1  30 0A                bmi ckad1       ;no overflow possible - operands have different sign
003FAA  1  A5 0D                lda ad1         ;test sign equal between operands and result
003FAC  1  45 0F                eor adrl
003FAE  1  10 04                bpl ckad1       ;no overflow occured - operand and result have same sign
003FB0  1  68                   pla
003FB1  1  09 40                ora #$40        ;set V
003FB3  1  48                   pha
003FB4  1  68           ckad1:  pla
003FB5  1  85 11                sta adrf        ;save expected flags
003FB7  1               ; binary ADC / SBC zp
003FB7  1  08                   php             ;save carry for subtract
003FB8  1  A5 0D                lda ad1
003FBA  1  65 0E                adc ad2         ;perform add
003FBC  1  08                   php
003FBD  1  C5 0F                cmp adrl        ;check result
003FBF  1  F0 03 20 FF          trap_ne         ;bad result
003FC3  1  FF           
003FC4  1  68                   pla             ;check flags
003FC5  1  29 C3                and #$c3        ;mask NV----ZC
003FC7  1  C5 11                cmp adrf
003FC9  1  F0 03 20 FF          trap_ne         ;bad flags
003FCD  1  FF           
003FCE  1  28                   plp
003FCF  1  08                   php             ;save carry for next add
003FD0  1  A5 0D                lda ad1
003FD2  1  E5 12                sbc sb2         ;perform subtract
003FD4  1  08                   php
003FD5  1  C5 0F                cmp adrl        ;check result
003FD7  1  F0 03 20 FF          trap_ne         ;bad result
003FDB  1  FF           
003FDC  1  68                   pla             ;check flags
003FDD  1  29 C3                and #$c3        ;mask NV----ZC
003FDF  1  C5 11                cmp adrf
003FE1  1  F0 03 20 FF          trap_ne         ;bad flags
003FE5  1  FF           
003FE6  1  28                   plp
003FE7  1               ; binary ADC / SBC abs
003FE7  1  08                   php             ;save carry for subtract
003FE8  1  A5 0D                lda ad1
003FEA  1  6D 03 02             adc ada2        ;perform add
003FED  1  08                   php
003FEE  1  C5 0F                cmp adrl        ;check result
003FF0  1  F0 03 20 FF          trap_ne         ;bad result
003FF4  1  FF           
003FF5  1  68                   pla             ;check flags
003FF6  1  29 C3                and #$c3        ;mask NV----ZC
003FF8  1  C5 11                cmp adrf
003FFA  1  F0 03 20 FF          trap_ne         ;bad flags
003FFE  1  FF           
003FFF  1  28                   plp
004000  1  08                   php             ;save carry for next add
004001  1  A5 0D                lda ad1
004003  1  ED 04 02             sbc sba2        ;perform subtract
004006  1  08                   php
004007  1  C5 0F                cmp adrl        ;check result
004009  1  F0 03 20 FF          trap_ne         ;bad result
00400D  1  FF           
00400E  1  68                   pla             ;check flags
00400F  1  29 C3                and #$c3        ;mask NV----ZC
004011  1  C5 11                cmp adrf
004013  1  F0 03 20 FF          trap_ne         ;bad flags
004017  1  FF           
004018  1  28                   plp
004019  1               ; binary ADC / SBC #
004019  1  08                   php             ;save carry for subtract
00401A  1  A5 0E                lda ad2
00401C  1  8D 12 02             sta ex_adci+1   ;set ADC # operand
00401F  1  A5 0D                lda ad1
004021  1  20 11 02             jsr ex_adci     ;execute ADC # in RAM
004024  1  08                   php
004025  1  C5 0F                cmp adrl        ;check result
004027  1  F0 03 20 FF          trap_ne         ;bad result
00402B  1  FF           
00402C  1  68                   pla             ;check flags
00402D  1  29 C3                and #$c3        ;mask NV----ZC
00402F  1  C5 11                cmp adrf
004031  1  F0 03 20 FF          trap_ne         ;bad flags
004035  1  FF           
004036  1  28                   plp
004037  1  08                   php             ;save carry for next add
004038  1  A5 12                lda sb2
00403A  1  8D 15 02             sta ex_sbci+1   ;set SBC # operand
00403D  1  A5 0D                lda ad1
00403F  1  20 14 02             jsr ex_sbci     ;execute SBC # in RAM
004042  1  08                   php
004043  1  C5 0F                cmp adrl        ;check result
004045  1  F0 03 20 FF          trap_ne         ;bad result
004049  1  FF           
00404A  1  68                   pla             ;check flags
00404B  1  29 C3                and #$c3        ;mask NV----ZC
00404D  1  C5 11                cmp adrf
00404F  1  F0 03 20 FF          trap_ne         ;bad flags
004053  1  FF           
004054  1  28                   plp
004055  1               ; binary ADC / SBC zp,x
004055  1  08                   php             ;save carry for subtract
004056  1  A5 0D                lda ad1
004058  1  75 00                adc 0,x         ;perform add
00405A  1  08                   php
00405B  1  C5 0F                cmp adrl        ;check result
00405D  1  F0 03 20 FF          trap_ne         ;bad result
004061  1  FF           
004062  1  68                   pla             ;check flags
004063  1  29 C3                and #$c3        ;mask NV----ZC
004065  1  C5 11                cmp adrf
004067  1  F0 03 20 FF          trap_ne         ;bad flags
00406B  1  FF           
00406C  1  28                   plp
00406D  1  08                   php             ;save carry for next add
00406E  1  A5 0D                lda ad1
004070  1  F5 04                sbc sb2-ad2,x   ;perform subtract
004072  1  08                   php
004073  1  C5 0F                cmp adrl        ;check result
004075  1  F0 03 20 FF          trap_ne         ;bad result
004079  1  FF           
00407A  1  68                   pla             ;check flags
00407B  1  29 C3                and #$c3        ;mask NV----ZC
00407D  1  C5 11                cmp adrf
00407F  1  F0 03 20 FF          trap_ne         ;bad flags
004083  1  FF           
004084  1  28                   plp
004085  1               ; binary ADC / SBC abs,x
004085  1  08                   php             ;save carry for subtract
004086  1  A5 0D                lda ad1
004088  1  7D F5 01             adc ada2-ad2,x  ;perform add
00408B  1  08                   php
00408C  1  C5 0F                cmp adrl        ;check result
00408E  1  F0 03 20 FF          trap_ne         ;bad result
004092  1  FF           
004093  1  68                   pla             ;check flags
004094  1  29 C3                and #$c3        ;mask NV----ZC
004096  1  C5 11                cmp adrf
004098  1  F0 03 20 FF          trap_ne         ;bad flags
00409C  1  FF           
00409D  1  28                   plp
00409E  1  08                   php             ;save carry for next add
00409F  1  A5 0D                lda ad1
0040A1  1  FD F6 01             sbc sba2-ad2,x  ;perform subtract
0040A4  1  08                   php
0040A5  1  C5 0F                cmp adrl        ;check result
0040A7  1  F0 03 20 FF          trap_ne         ;bad result
0040AB  1  FF           
0040AC  1  68                   pla             ;check flags
0040AD  1  29 C3                and #$c3        ;mask NV----ZC
0040AF  1  C5 11                cmp adrf
0040B1  1  F0 03 20 FF          trap_ne         ;bad flags
0040B5  1  FF           
0040B6  1  28                   plp
0040B7  1               ; binary ADC / SBC abs,y
0040B7  1  08                   php             ;save carry for subtract
0040B8  1  A5 0D                lda ad1
0040BA  1  79 04 01             adc ada2-$ff,y  ;perform add
0040BD  1  08                   php
0040BE  1  C5 0F                cmp adrl        ;check result
0040C0  1  F0 03 20 FF          trap_ne         ;bad result
0040C4  1  FF           
0040C5  1  68                   pla             ;check flags
0040C6  1  29 C3                and #$c3        ;mask NV----ZC
0040C8  1  C5 11                cmp adrf
0040CA  1  F0 03 20 FF          trap_ne         ;bad flags
0040CE  1  FF           
0040CF  1  28                   plp
0040D0  1  08                   php             ;save carry for next add
0040D1  1  A5 0D                lda ad1
0040D3  1  F9 05 01             sbc sba2-$ff,y  ;perform subtract
0040D6  1  08                   php
0040D7  1  C5 0F                cmp adrl        ;check result
0040D9  1  F0 03 20 FF          trap_ne         ;bad result
0040DD  1  FF           
0040DE  1  68                   pla             ;check flags
0040DF  1  29 C3                and #$c3        ;mask NV----ZC
0040E1  1  C5 11                cmp adrf
0040E3  1  F0 03 20 FF          trap_ne         ;bad flags
0040E7  1  FF           
0040E8  1  28                   plp
0040E9  1               ; binary ADC / SBC (zp,x)
0040E9  1  08                   php             ;save carry for subtract
0040EA  1  A5 0D                lda ad1
0040EC  1  61 44                adc (<adi2-ad2,x) ;perform add
0040EE  1  08                   php
0040EF  1  C5 0F                cmp adrl        ;check result
0040F1  1  F0 03 20 FF          trap_ne         ;bad result
0040F5  1  FF           
0040F6  1  68                   pla             ;check flags
0040F7  1  29 C3                and #$c3        ;mask NV----ZC
0040F9  1  C5 11                cmp adrf
0040FB  1  F0 03 20 FF          trap_ne         ;bad flags
0040FF  1  FF           
004100  1  28                   plp
004101  1  08                   php             ;save carry for next add
004102  1  A5 0D                lda ad1
004104  1  E1 46                sbc (<sbi2-ad2,x) ;perform subtract
004106  1  08                   php
004107  1  C5 0F                cmp adrl        ;check result
004109  1  F0 03 20 FF          trap_ne         ;bad result
00410D  1  FF           
00410E  1  68                   pla             ;check flags
00410F  1  29 C3                and #$c3        ;mask NV----ZC
004111  1  C5 11                cmp adrf
004113  1  F0 03 20 FF          trap_ne         ;bad flags
004117  1  FF           
004118  1  28                   plp
004119  1               ; binary ADC / SBC (abs),y
004119  1  08                   php             ;save carry for subtract
00411A  1  A5 0D                lda ad1
00411C  1  71 56                adc (adiy2),y   ;perform add
00411E  1  08                   php
00411F  1  C5 0F                cmp adrl        ;check result
004121  1  F0 03 20 FF          trap_ne         ;bad result
004125  1  FF           
004126  1  68                   pla             ;check flags
004127  1  29 C3                and #$c3        ;mask NV----ZC
004129  1  C5 11                cmp adrf
00412B  1  F0 03 20 FF          trap_ne         ;bad flags
00412F  1  FF           
004130  1  28                   plp
004131  1  08                   php             ;save carry for next add
004132  1  A5 0D                lda ad1
004134  1  F1 58                sbc (sbiy2),y   ;perform subtract
004136  1  08                   php
004137  1  C5 0F                cmp adrl        ;check result
004139  1  F0 03 20 FF          trap_ne         ;bad result
00413D  1  FF           
00413E  1  68                   pla             ;check flags
00413F  1  29 C3                and #$c3        ;mask NV----ZC
004141  1  C5 11                cmp adrf
004143  1  F0 03 20 FF          trap_ne         ;bad flags
004147  1  FF           
004148  1  28                   plp
004149  1  60                   rts
00414A  1               
00414A  1               ; target for the jump absolute test
00414A  1  88                   dey
00414B  1  88                   dey
00414C  1               test_far:
00414C  1  08                   php             ;either SP or Y count will fail, if we do not hit
00414D  1  88                   dey
00414E  1  88                   dey
00414F  1  88                   dey
004150  1  28                   plp
004151  1  90 03 20 FF          trap_cs         ;flags loaded?
004155  1  FF           
004156  1  50 03 20 FF          trap_vs
00415A  1  FF           
00415B  1  10 03 20 FF          trap_mi
00415F  1  FF           
004160  1  D0 03 20 FF          trap_eq
004164  1  FF           
004165  1  C9 46                cmp #'F'        ;registers loaded?
004167  1  F0 03 20 FF          trap_ne
00416B  1  FF           
00416C  1  E0 41                cpx #'A'
00416E  1  F0 03 20 FF          trap_ne
004172  1  FF           
004173  1  C0 4F                cpy #('R'-3)
004175  1  F0 03 20 FF          trap_ne
004179  1  FF           
00417A  1  48                   pha             ;save a,x
00417B  1  8A                   txa
00417C  1  48                   pha
00417D  1  BA                   tsx
00417E  1  E0 FD                cpx #$fd        ;check SP
004180  1  F0 03 20 FF          trap_ne
004184  1  FF           
004185  1  68                   pla             ;restore x
004186  1  AA                   tax
004187  1  A9 FF 48 28          set_stat $ff
00418B  1  68                   pla             ;restore a
00418C  1  E8                   inx             ;return registers with modifications
00418D  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
00418F  1  4C B3 08             jmp far_ret
004192  1               
004192  1               ; target for the jump indirect test
004192  1               ;       .align 2
004192  1                       .if * & 1       ; workaround for problems with .align 2
004192  1                           .byte 0     ;
004192  1                       .endif          ;
004192  1               ptr_tst_ind:
004192  1  9B 41                .word   test_ind
004194  1               ptr_ind_ret:
004194  1  3B 09                .word   ind_ret
004196  1  20 FF FF             trap            ;runover protection
004199  1  88                   dey
00419A  1  88                   dey
00419B  1               test_ind:
00419B  1  08                   php             ;either SP or Y count will fail, if we do not hit
00419C  1  88                   dey
00419D  1  88                   dey
00419E  1  88                   dey
00419F  1  28                   plp
0041A0  1  90 03 20 FF          trap_cs         ;flags loaded?
0041A4  1  FF           
0041A5  1  50 03 20 FF          trap_vs
0041A9  1  FF           
0041AA  1  10 03 20 FF          trap_mi
0041AE  1  FF           
0041AF  1  D0 03 20 FF          trap_eq
0041B3  1  FF           
0041B4  1  C9 49                cmp #'I'        ;registers loaded?
0041B6  1  F0 03 20 FF          trap_ne
0041BA  1  FF           
0041BB  1  E0 4E                cpx #'N'
0041BD  1  F0 03 20 FF          trap_ne
0041C1  1  FF           
0041C2  1  C0 41                cpy #('D'-3)
0041C4  1  F0 03 20 FF          trap_ne
0041C8  1  FF           
0041C9  1  48                   pha             ;save a,x
0041CA  1  8A                   txa
0041CB  1  48                   pha
0041CC  1  BA                   tsx
0041CD  1  E0 FD                cpx #$fd        ;check SP
0041CF  1  F0 03 20 FF          trap_ne
0041D3  1  FF           
0041D4  1  68                   pla             ;restore x
0041D5  1  AA                   tax
0041D6  1  A9 FF 48 28          set_stat $ff
0041DA  1  68                   pla             ;restore a
0041DB  1  E8                   inx             ;return registers with modifications
0041DC  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
0041DE  1  6C 94 41             jmp (ptr_ind_ret)
0041E1  1  20 FF FF             trap            ;runover protection
0041E4  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
0041E7  1               
0041E7  1               ; target for the jump subroutine test
0041E7  1  88                   dey
0041E8  1  88                   dey
0041E9  1               test_jsr:
0041E9  1  08                   php             ;either SP or Y count will fail, if we do not hit
0041EA  1  88                   dey
0041EB  1  88                   dey
0041EC  1  88                   dey
0041ED  1  28                   plp
0041EE  1  90 03 20 FF          trap_cs         ;flags loaded?
0041F2  1  FF           
0041F3  1  50 03 20 FF          trap_vs
0041F7  1  FF           
0041F8  1  10 03 20 FF          trap_mi
0041FC  1  FF           
0041FD  1  D0 03 20 FF          trap_eq
004201  1  FF           
004202  1  C9 4A                cmp #'J'        ;registers loaded?
004204  1  F0 03 20 FF          trap_ne
004208  1  FF           
004209  1  E0 53                cpx #'S'
00420B  1  F0 03 20 FF          trap_ne
00420F  1  FF           
004210  1  C0 4F                cpy #('R'-3)
004212  1  F0 03 20 FF          trap_ne
004216  1  FF           
004217  1  48                   pha             ;save a,x
004218  1  8A                   txa
004219  1  48                   pha
00421A  1  BA                   tsx             ;sp -4? (return addr,a,x)
00421B  1  E0 FB                cpx #$fb
00421D  1  F0 03 20 FF          trap_ne
004221  1  FF           
004222  1  AD FF 01             lda $1ff        ;propper return on stack
004225  1  C9 09                cmp #>jsr_ret
004227  1  F0 03 20 FF          trap_ne
00422B  1  FF           
00422C  1  AD FE 01             lda $1fe
00422F  1  C9 8C                cmp #<jsr_ret
004231  1  F0 03 20 FF          trap_ne
004235  1  FF           
004236  1  A9 FF 48 28          set_stat $ff
00423A  1  68                   pla             ;pull x,a
00423B  1  AA                   tax
00423C  1  68                   pla
00423D  1  E8                   inx             ;return registers with modifications
00423E  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
004240  1  60                   rts
004241  1  20 FF FF             trap            ;runover protection
004244  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
004247  1               
004247  1               ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
004247  1               nmi_trap:
004247  1  20 FF FF             trap            ;check stack for conditions at NMI
00424A  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
00424D  1               res_trap:
00424D  1  20 FF FF             trap            ;unexpected RESET
004250  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
004253  1               
004253  1  88                   dey
004254  1  88                   dey
004255  1               irq_trap:               ;BRK test or unextpected BRK or IRQ
004255  1  08                   php             ;either SP or Y count will fail, if we do not hit
004256  1  88                   dey
004257  1  88                   dey
004258  1  88                   dey
004259  1                       ;next traps could be caused by unexpected BRK or IRQ
004259  1                       ;check stack for BREAK and originating location
004259  1                       ;possible jump/branch into weeds (uninitialized space)
004259  1  C9 BD                cmp #$ff-'B'    ;BRK pass 2 registers loaded?
00425B  1  F0 5A                beq break2
00425D  1  C9 42                cmp #'B'        ;BRK pass 1 registers loaded?
00425F  1  F0 03 20 FF          trap_ne
004263  1  FF           
004264  1  E0 52                cpx #'R'
004266  1  F0 03 20 FF          trap_ne
00426A  1  FF           
00426B  1  C0 48                cpy #'K'-3
00426D  1  F0 03 20 FF          trap_ne
004271  1  FF           
004272  1  85 0A                sta irq_a       ;save registers during break test
004274  1  86 0B                stx irq_x
004276  1  BA                   tsx             ;test break on stack
004277  1  BD 02 01             lda $102,x
00427A  1  C9 30                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
00427C  1  F0 03 20 FF          trap_ne         ; - no break flag on stack
004280  1  FF           
004281  1  68                   pla
004282  1  C9 34                cmp_flag intdis ;should have added interrupt disable
004284  1  F0 03 20 FF          trap_ne
004288  1  FF           
004289  1  BA                   tsx
00428A  1  E0 FC                cpx #$fc        ;sp -3? (return addr, flags)
00428C  1  F0 03 20 FF          trap_ne
004290  1  FF           
004291  1  AD FF 01             lda $1ff        ;propper return on stack
004294  1  C9 09                cmp #>brk_ret0
004296  1  F0 03 20 FF          trap_ne
00429A  1  FF           
00429B  1  AD FE 01             lda $1fe
00429E  1  C9 DE                cmp #<brk_ret0
0042A0  1  F0 03 20 FF          trap_ne
0042A4  1  FF           
0042A5  1  A9 FF                load_flag $ff
0042A7  1  48                   pha
0042A8  1  A6 0B                ldx irq_x
0042AA  1  E8                   inx             ;return registers with modifications
0042AB  1  A5 0A                lda irq_a
0042AD  1  49 AA                eor #$aa
0042AF  1  28                   plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
0042B0  1  40                   rti
0042B1  1  20 FF FF             trap            ;runover protection
0042B4  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
0042B7  1               
0042B7  1               break2:                 ;BRK pass 2
0042B7  1  E0 AD                cpx #$ff-'R'
0042B9  1  F0 03 20 FF          trap_ne
0042BD  1  FF           
0042BE  1  C0 B1                cpy #$ff-'K'-3
0042C0  1  F0 03 20 FF          trap_ne
0042C4  1  FF           
0042C5  1  85 0A                sta irq_a       ;save registers during break test
0042C7  1  86 0B                stx irq_x
0042C9  1  BA                   tsx             ;test break on stack
0042CA  1  BD 02 01             lda $102,x
0042CD  1  C9 FF                cmp_flag $ff    ;break test should have B=1
0042CF  1  F0 03 20 FF          trap_ne         ; - no break flag on stack
0042D3  1  FF           
0042D4  1  68                   pla
0042D5  1  09 08                ora #decmode    ;ignore decmode cleared if 65c02
0042D7  1  C9 FF                cmp_flag $ff    ;actual passed flags
0042D9  1  F0 03 20 FF          trap_ne
0042DD  1  FF           
0042DE  1  BA                   tsx
0042DF  1  E0 FC                cpx #$fc        ;sp -3? (return addr, flags)
0042E1  1  F0 03 20 FF          trap_ne
0042E5  1  FF           
0042E6  1  AD FF 01             lda $1ff        ;propper return on stack
0042E9  1  C9 0A                cmp #>brk_ret1
0042EB  1  F0 03 20 FF          trap_ne
0042EF  1  FF           
0042F0  1  AD FE 01             lda $1fe
0042F3  1  C9 13                cmp #<brk_ret1
0042F5  1  F0 03 20 FF          trap_ne
0042F9  1  FF           
0042FA  1  A9 04                load_flag intdis
0042FC  1  48                   pha
0042FD  1  A6 0B                ldx irq_x
0042FF  1  E8                   inx             ;return registers with modifications
004300  1  A5 0A                lda irq_a
004302  1  49 AA                eor #$aa
004304  1  28                   plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
004305  1  40                   rti
004306  1  20 FF FF             trap            ;runover protection
004309  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
00430C  1               
00430C  1               ;     .if report = 1
00430C  1               ;         .include "report.i65"
00430C  1               ;     .endif
00430C  1               
00430C  1               ;copy of data to initialize BSS segment
00430C  1                   .if load_data_direct <> 1
00430C  1               zp_init:
00430C  1               zp1_:   .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
00430C  1               zp7f_:  .byte   $7f             ;test pattern for compare
00430C  1               ;logical zeropage operands
00430C  1               zpOR_:  .byte   0,$1f,$71,$80   ;test pattern for OR
00430C  1               zpAN_:  .byte   $0f,$ff,$7f,$80 ;test pattern for AND
00430C  1               zpEO_:  .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
00430C  1               ;indirect addressing pointers
00430C  1               ind1_:  .word   abs1            ;indirect pointer to pattern in absolute memory
00430C  1                       .word   abs1+1
00430C  1                       .word   abs1+2
00430C  1                       .word   abs1+3
00430C  1                       .word   abs7f
00430C  1               inw1_:  .word   abs1-$f8        ;indirect pointer for wrap-test pattern
00430C  1               indt_:  .word   abst            ;indirect pointer to store area in absolute memory
00430C  1                       .word   abst+1
00430C  1                       .word   abst+2
00430C  1                       .word   abst+3
00430C  1               inwt_:  .word   abst-$f8        ;indirect pointer for wrap-test store
00430C  1               indAN_: .word   absAN           ;indirect pointer to AND pattern in absolute memory
00430C  1                       .word   absAN+1
00430C  1                       .word   absAN+2
00430C  1                       .word   absAN+3
00430C  1               indEO_: .word   absEO           ;indirect pointer to EOR pattern in absolute memory
00430C  1                       .word   absEO+1
00430C  1                       .word   absEO+2
00430C  1                       .word   absEO+3
00430C  1               indOR_: .word   absOR           ;indirect pointer to OR pattern in absolute memory
00430C  1                       .word   absOR+1
00430C  1                       .word   absOR+2
00430C  1                       .word   absOR+3
00430C  1               ;add/subtract indirect pointers
00430C  1               adi2_:  .word   ada2            ;indirect pointer to operand 2 in absolute memory
00430C  1               sbi2_:  .word   sba2            ;indirect pointer to complemented operand 2 (SBC)
00430C  1               adiy2_: .word   ada2-$ff        ;with offset for indirect indexed
00430C  1               sbiy2_: .word   sba2-$ff
00430C  1               zp_end:
00430C  1                   .if (zp_end - zp_init) <> (zp_bss_end - zp_bss)
00430C  1                       ;force assembler error if size is different
00430C  1                       .error "mismatch between bss and zeropage data"
00430C  1                   .endif
00430C  1               data_init:
00430C  1               ex_and_:and #0              ;execute immediate opcodes
00430C  1                       rts
00430C  1               ex_eor_:eor #0              ;execute immediate opcodes
00430C  1                       rts
00430C  1               ex_ora_:ora #0              ;execute immediate opcodes
00430C  1                       rts
00430C  1               ex_adc_:adc #0              ;execute immediate opcodes
00430C  1                       rts
00430C  1               ex_sbc_:sbc #0              ;execute immediate opcodes
00430C  1                       rts
00430C  1               abs1_:  .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
00430C  1               abs7f_: .byte   $7f             ;test pattern for compare
00430C  1               ;loads
00430C  1               fLDx_:  .byte   fn,fn,0,fz      ;expected flags for load
00430C  1               ;shifts
00430C  1               rASL_:                      ;expected result ASL & ROL -carry
00430C  1               rROL_:  .byte   $86,$04,$82,0   ; "
00430C  1               rROLc_: .byte   $87,$05,$83,1   ;expected result ROL +carry
00430C  1               rLSR_:                      ;expected result LSR & ROR -carry
00430C  1               rROR_:  .byte   $61,$41,$20,0   ; "
00430C  1               rRORc_: .byte   $e1,$c1,$a0,$80 ;expected result ROR +carry
00430C  1               fASL_:                      ;expected flags for shifts
00430C  1               fROL_:  .byte   fnc,fc,fn,fz    ;no carry in
00430C  1               fROLc_: .byte   fnc,fc,fn,0     ;carry in
00430C  1               fLSR_:
00430C  1               fROR_:  .byte   fc,0,fc,fz      ;no carry in
00430C  1               fRORc_: .byte   fnc,fn,fnc,fn   ;carry in
00430C  1               ;increments (decrements)
00430C  1               rINC_:  .byte   $7f,$80,$ff,0,1 ;expected result for INC/DEC
00430C  1               fINC_:  .byte   0,fn,fn,fz,0    ;expected flags for INC/DEC
00430C  1               ;logical memory operand
00430C  1               absOR_: .byte   0,$1f,$71,$80   ;test pattern for OR
00430C  1               absAN_: .byte   $0f,$ff,$7f,$80 ;test pattern for AND
00430C  1               absEO_: .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
00430C  1               ;logical accu operand
00430C  1               absORa_:.byte   0,$f1,$1f,0     ;test pattern for OR
00430C  1               absANa_:.byte   $f0,$ff,$ff,$ff ;test pattern for AND
00430C  1               absEOa_:.byte   $ff,$f0,$f0,$0f ;test pattern for EOR
00430C  1               ;logical results
00430C  1               absrlo_:.byte   0,$ff,$7f,$80
00430C  1               absflo_:.byte   fz,fn,0,fn
00430C  1               data_end
00430C  1                   .if (data_end - data_init) <> (data_bss_end - data_bss)
00430C  1                       ;force assembler error if size is different
00430C  1                       .error "mismatch between bss and data"
00430C  1                   .endif
00430C  1               
00430C  1               vec_init
00430C  1                       .word   nmi_trap
00430C  1                       .word   res_trap
00430C  1                       .word   irq_trap
00430C  1               vec_bss equ $fffa
00430C  1                   .endif                   ;end of RAM init data
00430C  1               
00430C  1                   .if (load_data_direct = 1) & (ROM_vectors = 1)
00430C  1                       .segment "VECTORS"
00430C  1                       .org $fffa       ;vectors
00FFFA  1  47 42                .word   nmi_trap
00FFFC  1  4D 42                .word   res_trap
00FFFE  1  55 42                .word   irq_trap
010000  1                   .endif
010000  1               
