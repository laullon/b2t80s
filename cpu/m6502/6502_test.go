package m6502

import (
	"io/ioutil"
	"log"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
)

var mem []byte

var traps = []uint16{
	0x0412, 0x0421, 0x0430, 0x0435, 0x056d, 0x0591, 0x0616, 0x061b, 0x0620, 0x0625,
	0x0628, 0x062b, 0x062e, 0x0631, 0x0652, 0x0657, 0x065c, 0x0661, 0x0664, 0x0667,
	0x066a, 0x066d, 0x067e, 0x0685, 0x068c, 0x0693, 0x069e, 0x06a5, 0x06ac, 0x06b3,
	0x06be, 0x06c5, 0x06cc, 0x06d3, 0x06de, 0x06e5, 0x06ec, 0x06f3, 0x06fe, 0x0705,
	0x070c, 0x0713, 0x071e, 0x0725, 0x072c, 0x0733, 0x073e, 0x0745, 0x074c, 0x0753,
	0x075e, 0x0765, 0x076c, 0x0773, 0x3722, 0x3755, 0x3797, 0x379d, 0x379d, 0x37a3,
	0x37ab, 0x37ef, 0x382f,
}

func init() {
	f, err := os.Open("functional_test/6502_functional_test.bin")
	if err != nil {
		log.Fatal(err)
	}

	mem, err = ioutil.ReadAll(f)
	if err != nil {
		log.Fatal(err)
	}
}

// func TestReset(t *testing.T) { // TODO: review
// 	cpu := newM6502(mem)

// 	for i := 0; i < 8; i++ {
// 		cpu.Tick()
// 		// fmt.Printf("%v\n", cpu.regs)
// 	}

// 	assert.Equal(t, uint16(0x37a3), cpu.regs.PC, "Bad PC")
// 	assert.Equal(t, uint8(0xfc), cpu.regs.SP, "Bad SP")
// }

func _TestBEQ(t *testing.T) {
	mem := []uint8{
		0xa9, 0x00, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea,
		0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea,
		0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea,
		0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea,
		0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea,
		0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea,
		0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea,
		0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea,
		0xf0, 0x80,
	}
	cpu := newM6502(mem)

	cpu.regs.PC = 0

	for i := 0; i < 600; i++ {
		println(i)
		cpu.Tick()
	}
}

func TestFunctionalTests(t *testing.T) { // TODO: review
	cpu := newM6502(mem)

	cpu.regs.PC = 0x0400
	cpu.op = nil
	for i := 0; ; i++ {
		cpu.Tick()
		if cpu.regs.PC > 0xfff0 {
			assert.NotEqual(t, uint16(0xffff), cpu.regs.PC, "ERROR !!!")
			return
		}
		// for _, trap := range traps {
		// 	if cpu.regs.PC == trap {
		// 		assert.FailNowf(t, "error on trap", "0x%04X", trap)
		// 		return
		// 	}
		// }
	}
}
